<?php

class archiAdresse extends config {
	
	private $description = '';
	private $nom		= '';
	private $idRue 		= '';
	private $etage		= '';
	private $numero 	= '';
	private $idQuartier	= '';
	private $idSousQuartier	= '';
	private $idPays		= '';
	private $idVille	= '';
	private $nomRue		= '';
	private $nomQuartier	= '';
	private $nomSousQuartier= '';
	private $nomPays	= '';

	private $microstart;

	function __construct() 
	{
		parent::__construct();
		//$this->microstart=microtime(true);
	}
	
	function __destruct()
	{
		/*$fin_compte=microtime(true);
		$duree=($fin_compte-$this->microstart);
		if($duree>1)
		{	echo '<br><br>Element '.get_class().' :: g&eacute;n&eacute;r&eacute;e en '.substr($duree,0,5).' sec.'; //'.print_r(get_object_vars($this)).'
			$backtrace = debug_backtrace();
			echo  $backtrace[1]['function'];
		}*/
	}

	
	private function getAdresseFields()
	{
	
		return array(
			'nom'         =>array('default'=>'','value'=>'','required'=>false,'error'=>'','type'=>'text'),
			'date'        =>array('default'=>'','value'=>'','required'=>false,'error'=>'','type'=>'date'),
			'description' =>array('default'=>'','value'=>'','required'=>false,'error'=>'','type'=>'text'),
			'indicatif' =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text'),
			'numero'      =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text'),
			'rue'         =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text','checkExist'=>array('table'=>'rue','primaryKey'=>'idRue')),
			'sousQuartier'=>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text','checkExist'=>array('table'=>'sousQuartier','primaryKey'=>'idSousQuartier')),
			'quartier'    =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text','checkExist'=>array('table'=>'quartier','primaryKey'=>'idQuartier')),
			'ville'       =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text','checkExist'=>array('table'=>'ville','primaryKey'=>'idVille')),
			'pays'        =>array('default'=>'0','value'=>'','required'=>false,'error'=>'','type'=>'text','checkExist'=>array('table'=>'pays','primaryKey'=>'idPays'))
		);
	
	}
	
	
	public function getCommentairesFields()
	{
		return array(
				'nom'					=>array('type'=>'text','default'=>'','htmlCode'=>'','libelle'=>'Votre nom ou pseudo : ','required'=>true,'error'=>'','value'=>''),
				'prenom'					=>array('type'=>'text','default'=>'','htmlCode'=>'','libelle'=>'Votre prénom : ','required'=>false,'error'=>'','value'=>''),
				'email'						=>array('type'=>'email','default'=>'','htmlCode'=>"style='width:250px;'",'libelle'=>'Votre e-mail : ','required'=>false,'error'=>'','value'=>''),
				'commentaire'				=>array('type'=>'bigText','default'=>'','htmlCode'=>"rows=5 cols=50",'libelle'=>'Votre commentaire : ','required'=>true,'error'=>'','value'=>''),
				'idEvenementGroupeAdresse' 	=> array('type'=>'hidden','default'=>'','htmlCode'=>'','libelle'=>'','required'=>false,'error'=>'','value'=>''),
				'captcha'					=>array('type'=>'captcha','default'=>'','htmlCode'=>'','libelle'=>'','required'=>true,'error'=>'','value'=>'')
		);
	}
	
	
	// ***************************************************************************************************************************************
	// ajout d'une nouvelle adresse dans la base de données
	// ***************************************************************************************************************************************
	public function ajouter() 
	{
		$authentifie = new archiAuthentification();
		$formulaire = new formGenerator();
		if($authentifie->estConnecte())
		{
			$tabForm=$this->getAdresseFields();
			$this->connexionBdd->getLock(array('historiqueAdresse'));
			$errors = $formulaire->getArrayFromPost($tabForm); // recupere les donnees POST suivant les champs de tabForm , tabForm est passé en référence, il contient donc les valeurs des champs a la sortie de la fonction
			$this->nettoieCoordonneesAdresse($tabForm); // permet de garder l'id de la rue, quartier, sousQuartier le plus bas dans la hierarchie , a partir duquel on peut retrouver le reste
			
			if(count($errors)==0)
			{
				// on regarde si l'adresse existe deja parmis les adresses valides (non "archivees")
				$sql = "SELECT ha1.idAdresse as idAdresse
					FROM historiqueAdresse ha1, historiqueAdresse ha2
					WHERE ha2.idAdresse = ha1.idAdresse
					AND ha1.idRue='".$tabForm['rue']['value']."'
					AND ha1.idSousQuartier='".$tabForm['sousQuartier']['value']."'
					AND ha1.idQuartier='".$tabForm['quartier']['value']."'
					AND ha1.idVille='".$tabForm['ville']['value']."'
					AND ha1.idPays='".$tabForm['pays']['value']."'
					AND ha1.numero = '".$tabForm['numero']['value']."'
					AND ha1.date='".$tabForm['date']['value']."'
					AND ha1.idIndicatif='".$tabForm['indicatif']['value']."'
					GROUP BY ha1.idAdresse, ha1.idHistoriqueAdresse 
					HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)";
				
				
				$resCheckExist=$this->connexionBdd->requete($sql);

				if(mysql_num_rows($resCheckExist)>1)
				{
					echo "plusieurs adresse existe concernant cette adresse, pas d'ajout, veuillez prevenir l'administrateur.<br>";
				}
				elseif(mysql_num_rows($resCheckExist)==1)
				{
					echo "l'adresse existe deja dans la base";
					// recuperation de l'id existant
					$fetchAdresseExistante=mysql_fetch_array($resCheckExist);
				}
				else
				{
					// ajout
					// recherche du nouvel idAdresse
					$resIdAdresse = $this->connexionBdd->requete("select max(idAdresse) as maxIdAdresse from historiqueAdresse");
					$nouvelIdAdresse=0;
					if(mysql_num_rows($resIdAdresse)>0)
					{
						$fetchNouvelIdAdresse = mysql_fetch_array($resIdAdresse);
						$nouvelIdAdresse = $fetchNouvelIdAdresse["maxIdAdresse"] + 1;
					}
					
					$sql = "INSERT INTO historiqueAdresse (idUtilisateur,idAdresse,date,description,nom,idRue,numero,idQuartier,idSousQuartier,idPays,idVille) VALUES (
					'".$authentifie->getIdUtilisateur()."',
					'".$nouvelIdAdresse."',
					\"".$this->date->toBdd($tabForm['date']['value'])."\",
					\"".$tabForm['description']['value']."\",
					\"".$tabForm['nom']['value']."\",
					'".$tabForm['rue']['value']."',
					'".$tabForm['numero']['value']."',
					'".$tabForm['quartier']['value']."',
					'".$tabForm['sousQuartier']['value']."',
					'".$tabForm['pays']['value']."',
					'".$tabForm['ville']['value']."'
					)";
					
					$this->connexionBdd->requete($sql);
					
					$cache = new cacheObject();
					$cache->refreshCache();
				}
			}
			else
			{	
				echo $this->afficheFormulaire($tabForm);
			}
			
			

			
			$this->connexionBdd->freeLock(array('historiqueAdresse'));
		}
		else
		{
			echo "erreur : Vous devez etre authentifié pour faire un ajout<br>";
		}
	}

	public function supprimer($idAdresse = 0, $idHistoriqueAdresse = 0)
	{
		$html = '';
		$formulaire = new formGenerator();	
		// en premier la suppresion de l'historique, si l'évènement n'a qu'un historique
		// on initialisera la variable idEvenement pour utiliser le code plus bas
		if ( $formulaire->estChiffre($idHistoriqueAdresse) == 1)
		{
			$sqlVerif = "SELECT hA.idAdresse, COUNT(hA.idAdresse) AS nbAdresse FROM historiqueAdresse hA
				LEFT JOIN historiqueAdresse hA2 USING (idAdresse)
				WHERE hA.idHistoriqueAdresse=".$idHistoriqueAdresse.'
				GROUP BY hA.idAdresse, hA.idHistoriqueAdresse';
			
			$rep = $this->connexionBdd->requete($sqlVerif);
			$res = mysql_fetch_object($rep);
			
			if ( $res->nbEvenement == 1)
			{
				// on initialise la variable idEvenement pour utiliser la supression d'un évènement
				$idEvenement = $res->idEvenement;
			}
			else
			{
				$t = new Template('modules/archi/templates/');
				$t->set_filenames(array('suppr'=>'suppression.tpl'));
				$t->assign_vars(array('nom'=>'Historique évènement'));

				$sql = "DELETE FROM historiqueEvenement WHERE idHistoriqueEvenement=".$idHistoriqueEvenement;
				$this->connexionBdd->requete($sql);
				$t->assign_block_vars('suppr', array('description'=>'historique evenement', 'nombre'=>mysql_affected_rows()));

				ob_start();
				$t->pparse('suppr');
				$html .= ob_get_contents();
				ob_end_clean();
			}
		}
		
		
		// suppression de toutes les informations sur l'évènement
		if ( $formulaire->estChiffre($idAdresse) == 1)
		{
			$tabSql[] = array( "DELETE FROM historiqueEvenement WHERE idEvenement=".$idEvenement, 'évènement');
			$tabSql[] = array( "DELETE FROM _evenementImage     WHERE idEvenement=".$idEvenement, 'liens images');
			$tabSql[] = array( "DELETE FROM _adresseEvenement   WHERE idEvenement=".$idEvenement, 'liens adresse');
			$tabSql[] = array( "DELETE FROM _evenementPersonne  WHERE idEvenement=".$idEvenement, 'liens personnes');
			$tabSql[] = array( "DELETE FROM _evenementEvenement WHERE idEvenement=".$idEvenement." OR idEvenementAssocie=".$idEvenement, 'liens évènements');
			
			$t = new Template('modules/archi/templates');
			$t->set_filenames(array('suppr'=>'suppression.tpl'));
			$t->assign_vars(array('nom'=>'Évènement'));

			foreach($tabSql AS $suppression)
			{
				list( $sql, $descriptionSupression) = $suppression;
				//$this->connexionBdd->requete($sql);
				$t->assign_block_vars('suppr', array('description'=>$descriptionSupression, 'nombre'=>mysql_affected_rows()));
			}

			ob_start();
			$t->pparse('suppr');
			$html .= ob_get_contents();
			ob_end_clean();
		}
		
		
		$cache = new cacheObject();
		$cache->refreshCache();
		
		return $html;
	}

	public function nettoieCoordonneesAdresse(&$tabForm=array())
	{
		if($tabForm['rue']['value']!=0)
		{
			$tabForm['sousQuartier']['value']=0;
			$tabForm['quartier']['value']=0;
			$tabForm['ville']['value']=0;
			$tabForm['pays']['value']=0;
		}
		elseif($tabForm['sousQuartier']['value']!=0)
		{
			$tabForm['rue']['value']=0;
			$tabForm['quartier']['value']=0;
			$tabForm['ville']['value']=0;
			$tabForm['pays']['value']=0;
		}
		elseif($tabForm['quartier']['value']!=0)
		{
			$tabForm['rue']['value']=0;
			$tabForm['sousQuartier']['value']=0;
			$tabForm['ville']['value']=0;
			$tabForm['pays']['value']=0;
		}
		elseif($tabForm['ville']['value']!=0)
		{
			$tabForm['rue']['value']=0;
			$tabForm['sousQuartier']['value']=0;
			$tabForm['quartier']['value']=0;
			$tabForm['pays']['value']=0;
		}
		elseif($tabForm['pays']['value']!=0)
		{
			$tabForm['rue']['value']=0;
			$tabForm['sousQuartier']['value']=0;
			$tabForm['quartier']['value']=0;
			$tabForm['ville']['value']=0;
		}
	
	}
	
	public function modifierHistorique ( $idHistoriqueAdresse )
	{
		$html = '';
		$authentifie = new archiAuthentification();
		$tabForm = array();
		$formulaire = new formGenerator();	
		if($authentifie->estConnecte())
		{
			if (isset($this->variablesPost['submit']))
			{
				$tabForm=$this->getAdresseFields();
				$errors = $formulaire->getArrayFromPost($tabForm); // recupere les donnees POST suivant les champs de tabForm , tabForm est passé en référence, il contient donc les valeurs des champs a la sortie de la fonction
				$this->nettoieCoordonneesAdresse($tabForm); // permet de garder l'id de la rue, quartier, sousQuartier le plus bas dans la hierarchie , a partir duquel on peut retrouver le reste
				
				if(count($errors)==0)
				{
					// on regarde si l'adresse existe deja parmis les adresses valides (non "archivees")
					$sql = "UPDATE historiqueAdresse 
						SET
						idUtilisateur='".$authentifie->getIdUtilisateur()."',
						date='".$this->date->toBdd($tabForm['date']['value'])."',
						description='".$tabForm['description']['value']."',
						nom='".$tabForm['nom']['value']."',
						idRue='".$tabForm['rue']['value']."',
						numero='".$tabForm['numero']['value']."',
						idQuartier='".$tabForm['quartier']['value']."',
						idSousQuartier='".$tabForm['sousQuartier']['value']."',
						idPays='".$tabForm['pays']['value']."',
						idVille='".$tabForm['ville']['value']."'
						WHERE idHistoriqueAdresse=".$idHistoriqueAdresse;
					$this->connexionBdd->requete($sql);
				}
			}
			$html = $this->afficheFormulaire($tabForm, '', $idHistoriqueAdresse);
		}
		else
		{
			$html = "erreur : Vous devez etre authentifié pour faire un ajout";
		}
		return $html;
	}
	public function ajouterHistoriqueAdresse( $idAdresse )
	{
		$html = '';
		$authentifie = new archiAuthentification();
		$formulaire = new formGenerator();
		if($authentifie->estConnecte())
		{
			$tabForm=$this->getAdresseFields();
			
			if (isset($this->variablesPost['submit']))
			{
				$this->connexionBdd->getLock(array('historiqueAdresse'));
				$errors = $formulaire->getArrayFromPost($tabForm);
				$this->nettoieCoordonneesAdresse($tabForm); // permet de garder l'id de la rue, quartier, sousQuartier le plus bas dans la hierarchie , a partir duquel on peut retrouver le reste
				if(count($errors)==0)
				{
					// on regarde si l'adresse existe deja parmis les adresses valides (non "archivees")
					$sql = "
						SELECT ha.idAdresse
						FROM historiqueAdresse ha 
						WHERE ha.idAdresse = ".$idAdresse."
						AND 
						(
							(
								ha.idRue='".mysql_escape_string($tabForm['rue']['value'])."'
								AND ha.idSousQuartier='".mysql_escape_string($tabForm['sousQuartier']['value'])."'
								AND ha.idQuartier='".mysql_escape_string($tabForm['quartier']['value'])."'
								AND ha.idVille='".mysql_escape_string($tabForm['ville']['value'])."'
								AND ha.idPays='".mysql_escape_string($tabForm['pays']['value'])."'
								AND ha.numero = '".mysql_escape_string($tabForm['numero']['value'])."'
								AND ha.nom='".mysql_escape_string($tabForm['nom']['value'])."'
								AND ha.description='".mysql_escape_string($tabForm['description']['value'])."'
							)
							OR
								ha.date='".$this->date->toBdd($tabForm['date']['value'])."'
						)
						";
					$resCheckExist=$this->connexionBdd->requete($sql);

					if(mysql_num_rows($resCheckExist)>0)
					{
						echo "Cet enregistrement existe deja dans la base, si vous n'avez pas mis les mêmes informations, assurez vous d'avoir bien changé la date.";
						// recuperation de l'id existant
						$fetchAdresseExistante=mysql_fetch_array($resCheckExist);
					}
					else
					{
						// ajout
						$sql = "INSERT INTO historiqueAdresse (idUtilisateur, idAdresse,date,description,nom,idRue,numero,idQuartier,idSousQuartier,idPays,idVille) VALUES (
						'".$authentifie->getIdUtilisateur()."',
						'".$idAdresse."',
						\"".$this->date->toBdd($tabForm['date']['value'])."\",
						\"".$tabForm['description']['value']."\",
						\"".$tabForm['nom']['value']."\",
						'".$tabForm['rue']['value']."',
						'".$tabForm['numero']['value']."',
						'".$tabForm['quartier']['value']."',
						'".$tabForm['sousQuartier']['value']."',
						'".$tabForm['pays']['value']."',
						'".$tabForm['ville']['value']."'
						)";

						$this->connexionBdd->requete($sql);
						
						$cache = new cacheObject();
						$cache->refreshCache();
						echo 'votre modification a bien été prise en compte';
					}
				}
				$this->connexionBdd->freeLock(array('historiqueAdresse'));
				$html .= $this->afficheFormulaire($tabForm, $idAdresse);
			}
			else
			{
				$html .= $this->afficheFormulaire(array(), $idAdresse);
			}
		}
		else
		{
			$html .= "archiAdresse::modifier() => probleme d'authentification ou d'identifiant transmis";
		}

		return $html;
		
	}
	// ***************************************************************************************************************************************
	// renvoi les Evenements lies a l'adresses ( en principe on ne retourne que des groupes d'adresses
	// ***************************************************************************************************************************************
	public function getIdEvenementsFromAdresse($idAdresse=0)
	{
		$sql = "SELECT ae.idEvenement FROM _adresseEvenement ae WHERE ae.idAdresse = '".$idAdresse."'";
		
		return $this->connexionBdd->requete($sql);
	}
	
	// ***************************************************************************************************************************************
	// affiche le detail d'une adresse , c'est a dire les evenements dont le groupe d'adresse correspond
	// ***************************************************************************************************************************************
	public function afficherDetail($idAdresse=0) 
	{
		// attention s'il y a plusieurs evenement distinct (pas associes entre eux) reliés a l'adresse on les affichera a la suite
		$html="";
		$evenement = new archiEvenement();
		$resEvenements=$this->getIdEvenementsFromAdresse($idAdresse); //c'est l'evenement groupe d'adresse qui est relié a l'idAdresse donc on recupere un idEvenementGroupeAdresse en fait
		
		if(mysql_num_rows($resEvenements)==1)
		{
			// un seul evenement groupe d'adresse correspond a l'adresse cliquée
			$fetchEvenements = mysql_fetch_assoc($resEvenements);
			$retourEvenement = $evenement->afficher($fetchEvenements['idEvenement']); // cette fonction va afficher les evenements liés au groupe d'adresse
			$html.=$retourEvenement['html'];
			$html.=$this->getListeCommentaires($fetchEvenements['idEvenement']);
			$html.=$this->getFormulaireCommentaires($fetchEvenements['idEvenement'],$this->getCommentairesFields());
		}
		else
		{
			// il y a plusieurs evenements groupes d'adresses qui correspondent a la meme adresse
			// on n'affiche que les evenements qui concernent la recherche 
			// archiIdEvenementGroupeAdresse , correspond au groupe d'adresse de l'adresse resultat de la recherche
			if(isset($this->variablesGet['recherche_motcle']))
			{
				// on refait une recherche sur les evenements concernés par l'adresse correspondant a plusieurs evenements groupe adresse
				
				$req = "
						SELECT ee.idEvenement as idEvenementGroupeAdresse, he1.idEvenement as idEvenement
						FROM historiqueEvenement he2, historiqueEvenement he1
						RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = '".$idAdresse."'
						RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
						WHERE he2.idEvenement = he1.idEvenement
						AND he1.idEvenement = ee.idEvenementAssocie
						AND CONCAT_WS('',lower(he1.titre),lower(he1.description)) like \"%".strtolower($this->variablesGet['recherche_motcle'])."%\"
						GROUP BY he1.idEvenement,he1.idHistoriqueEvenement
						HAVING he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
				";
				
				$res = $this->connexionBdd->requete($req);
				
				while($fetch = mysql_fetch_assoc($res))
				{
					$retourEvenement = $evenement->afficher($fetch['idEvenementGroupeAdresse']); // cette fonction va afficher les evenements liés au groupe d'adresse
					$html.=$retourEvenement['html'];
				}
			}
			else
			{
				while($fetchEvenements = mysql_fetch_assoc($resEvenements))
				{
					$retourEvenement = $evenement->afficher($fetchEvenements['idEvenement']); // cette fonction va afficher les evenements liés au groupe d'adresse
					$html.=$retourEvenement['html'];
				}
			}
		}
		
		// popup pour la description de la source
		$s = new archiSource();
		$html.=$s->getPopupDescriptionSource();
		
		return $html;
	}
	

	// ***************************************************************************************************************************************
	// renvoi la liste des idAdresses qui correspondent a la recherche par mot cle
	// ***************************************************************************************************************************************
	public function getIdAdressesFromRecherche($criteres)
	{
		$tabIdAdresses=array();
		$sqlWhere="";
		if(isset($criteres['recherche_motcle']) && $criteres['recherche_motcle']!='')
		{
			$tabMotCle = explode(' ', $criteres['recherche_motcle']);
			foreach ($tabMotCle AS $motcle)
			{
				$motcle = mysql_escape_string($motcle);
				$sqlWhere .= "AND (CONCAT_WS('',CONVERT(ha.numero, CHAR(8)),r.prefixe, ha.nom,ha.description,r.nom,sq.nom, q.nom, v.nom, p.nom) LIKE '%".$motcle."%')";
				
			}
			/* (ha.nom LIKE '%".$motcle."%' 
					OR ha.description LIKE '%".$motcle."%' 
					OR ha.numero LIKE '%".$motcle."%' 
					OR r.nom LIKE '%".$motcle."%' 
					OR sq.nom LIKE '%".$motcle."%' 
					OR q.nom LIKE '%".$motcle."%' 
					OR v.nom LIKE '%".$motcle."%' 
					OR p.nom LIKE '%".$motcle."%')
					OR 
			*/
			$req = "
					SELECT distinct ha.idAdresse as idAdresse
					FROM historiqueAdresse ha2, historiqueAdresse ha
					LEFT JOIN rue r 		ON r.idRue = ha.idRue
					LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha.idRue='0' and ha.idSousQuartier!='0' ,ha.idSousQuartier ,r.idSousQuartier )
					LEFT JOIN quartier q		ON q.idQuartier = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier!='0' ,ha.idQuartier ,sq.idQuartier )
					LEFT JOIN ville v		ON v.idVille = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier='0' and ha.idVille!='0' ,ha.idVille ,q.idVille )
					LEFT JOIN pays p		ON p.idPays = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier='0' and ha.idVille='0' and ha.idPays!='0' ,ha.idPays ,v.idPays )

					
					WHERE ha2.idAdresse = ha.idAdresse
					".$sqlWhere."
					GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
					HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
					";
			
			$res = $this->connexionBdd->requete($req);
			
			while($fetch = mysql_fetch_assoc($res))
			{
				$tabIdAdresses[]=$fetch['idAdresse'];

			}
		}
		return $tabIdAdresses;
	
	}
	
	// ***************************************************************************************************************************************
	// affiche la liste des adresses suivant criteres et modeAffichage , modeAffichage permet de préciser ou sera affiché la liste ( calque ou non, et lieu du calque) 
	// afin de changer le comportement des liens et limiter certains affichages, non utiles dans la popup par exemple	
	// ***************************************************************************************************************************************
	public function afficherListe( $criteres = array() , $modeAffichage='')
	{
		$html="";
		
		$sqlId='';
		
		$nbAdresses=0;
		
		$tabParametresAutorises = array('ordre', 'tri', 'limit','archiIdEvenement', 'debut', 'selection', 'id','recherche_rue','recherche_quartier','recherche_ville');
		
		foreach ($tabParametresAutorises as $param)
		{
			if (isset($this->variablesGet[$param]) and !isset($criteres[$param]))
				$criteres[$param] = $this->variablesGet[$param];
		}
		
		if(!empty($criteres['recherche_rue']) && $criteres['recherche_rue']!='0')
		{
			// une rue a ete precisée par l'utilisateur
			$tabSqlWhere[] = ' AND ha1.idRue='.$criteres['recherche_rue'];
		}
		else if(!empty($criteres['recherche_sousQuartier']) && $criteres['recherche_sousQuartier']!='0')
		{
			// un sous quartier a ete précisé par l'utilisateur, on recupere donc les rue de ce sous quartier
			$rep = $this->connexionBdd->requete("SELECT idRue FROM rue WHERE idSousQuartier=".$criteres['recherche_sousQuartier']);
			while ($res = mysql_fetch_object($rep))
			{
				$tabIdRue[] = $res->idRue;
			}
			if (count($tabIdRue) > 0)
				$tabSqlWhere[] = ' AND (ha1.idRue IN(\''.implode("','", array_unique($tabIdRue)).'\') OR ha1.idSousQuartier='.$criteres['recherche_sousQuartier'].')';
			else
				$tabSqlWhere[] = ' AND ha1.idSousQuartier='.$criteres['recherche_sousQuartier'];
		}
		else if(!empty($criteres['recherche_quartier']) && $criteres['recherche_quartier']!='0')
		{
			$rep = $this->connexionBdd->requete("SELECT r.idRue, sQ.idSousQuartier 
				FROM sousQuartier sQ 
				LEFT JOIN rue r USING(idSousQuartier)
				WHERE sQ.idQuartier=".$criteres['recherche_quartier']);
			while ($res = mysql_fetch_object($rep))
			{
				if (!empty($res->idRue))
					$tabIdRue[]          = $res->idRue;
				
				if (!empty($res->idSousQuartier))
					$tabIdSousQuartier[] = $res->idSousQuartier;
			}
			
			$sqlSelect = ' AND (';
			if (count($tabIdRue) > 0)
				$sqlSelect .= ' ha1.idRue IN(\''.implode("','", array_unique($tabIdRue)).'\') OR ';
			if (count($tabIdSousQuartier) > 0)
				$sqlSelect .= ' ha1.idSousQuartier IN(\''.implode("','", array_unique($tabIdSousQuartier)).'\') OR ';
			
			$sqlSelect .= ' ha1.idQuartier='.$criteres['recherche_quartier'] .')';
			$tabSqlWhere[] = $sqlSelect;
		}
		elseif(!empty($criteres['recherche_ville']) && $criteres['recherche_ville']!='0')
		{
			// une ville a ete précisée, on cherche les quartiers, sous quartier et rues correspondant
			$rep = $this->connexionBdd->requete("
				SELECT q.idQuartier as idQuartier, sq.idSousQuartier as idSousQuartier, r.idRue as idRue
				FROM ville v
				LEFT JOIN quartier q ON q.idVille = v.idVille
				LEFT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier
				LEFT JOIN rue r ON r.idSousQuartier = sq.idSousQuartier
				WHERE v.idVille = '".$criteres['recherche_ville']."'
			");
			
			$tabIdRue=array();
			$tabIdSousQuartier=array();
			$tabIdQuartier=array();
			
			while($fetch = mysql_fetch_assoc($rep))
			{
				if($fetch['idRue']!=NULL && $fetch['idRue']!='0')
					$tabIdRue[] = $fetch['idRue'];
				if($fetch['idSousQuartier']!=NULL && $fetch['idSousQuartier']!='0')
					$tabIdSousQuartier[] = $fetch['idSousQuartier'];
				if($fetch['idQuartier']!=NULL && $fetch['idQuartier']!='0')
					$tabIdQuartier[] = $fetch['idQuartier'];
			}
		
			if(mysql_num_rows($rep)>0)
			{
		
				$sqlSelect=' AND (';
			
			
				if(count($tabIdQuartier)>0)
				{
					$sqlSelect .=' ha1.idQuartier IN (\''.implode("','",array_unique($tabIdQuartier)).'\') OR ';
				}
				
				if(count($tabIdSousQuartier)>0)
				{
					$sqlSelect .=' ha1.idSousQuartier IN (\''.implode("','",array_unique($tabIdSousQuartier)).'\') OR ';
				}
				
				if(count($tabIdRue)>0)
				{
					$sqlSelect .=' ha1.idRue IN (\''.implode("','",array_unique($tabIdRue)).'\') OR ';
				}
				
				$sqlSelect .=' ha1.idVille='.$criteres['recherche_ville'].')';
				$tabSqlWhere[]=$sqlSelect;
			}
		}
		elseif(!empty($criteres['recherche_pays']) && $criteres['recherche_pays']!='0')
		{
			// une ville a ete précisée, on cherche les quartiers, sous quartier et rues correspondant
			$rep = $this->connexionBdd->requete("
				SELECT v.idVille as idVille, q.idQuartier as idQuartier, sq.idSousQuartier as idSousQuartier, r.idRue as idRue
				FROM pays p
				LEFT JOIN ville v on v.idPays = p.idPays
				LEFT JOIN quartier q ON q.idVille = v.idVille
				LEFT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier
				LEFT JOIN rue r ON r.idSousQuartier = sq.idSousQuartier
				WHERE p.idPays = '".$criteres['recherche_pays']."'
			");
		
			$tabIdRue=array();
			$tabIdSousQuartier=array();
			$tabIdQuartier=array();
			$tabIdVille=array();
			
			while($fetch = mysql_fetch_assoc($rep))
			{
				if($fetch['idRue']!=NULL && $fetch['idRue']!='0')
					$tabIdRue[] = $fetch['idRue'];
				if($fetch['idSousQuartier']!=NULL && $fetch['idSousQuartier']!='0')
					$tabIdSousQuartier[] = $fetch['idSousQuartier'];
				if($fetch['idQuartier']!=NULL && $fetch['idQuartier']!='0')
					$tabIdQuartier[] = $fetch['idQuartier'];
				if($fetch['idVille']!=NULL && $fetch['idVille']!='0')
					$tabIdVille[] = $fetch['idVille'];
			}

			if(mysql_num_rows($rep)>0)
			{
				$sqlSelect=' AND (';
			
				if(count($tabIdVille)>0)
				{
					$sqlSelect .=' ha1.idVille IN (\''.implode("','",array_unique($tabIdVille)).'\') OR ';
				}

				if(count($tabIdQuartier)>0)
				{
					$sqlSelect .=' ha1.idQuartier IN (\''.implode("','",array_unique($tabIdQuartier)).'\') OR ';
				}
				
				if(count($tabIdSousQuartier)>0)
				{
					$sqlSelect .=' ha1.idSousQuartier IN (\''.implode("','",array_unique($tabIdSousQuartier)).'\') OR ';
				}
				
				if(count($tabIdRue)>0)
				{
					$sqlSelect .=' ha1.idRue IN (\''.implode("','",array_unique($tabIdRue)).'\') OR ';
				}
				
				$sqlSelect .='  ha1.idPays='.$criteres['recherche_pays'].')';
				$tabSqlWhere[]=$sqlSelect;
			}
		}

		$sqlAdressesSupplementaires="";
		$tabidAdresses=array();
		//$listeIdEvenementsGroupeAdresse="";
		$sqlMotCle="";
		$sqlSelectMotCle="";
		$sqlOrderByPoidsMotCle="";
		$sqlOrderBy=" ha1.date ";
		if (!empty($criteres['recherche_motcle']))
		{
			// recherche du mot cle dans les adresses
			//$tabIdAdressesFromRechercheAdresses = $this->getIdAdressesFromRecherche($criteres);
			
			// si recherche par mot cle , on ajoute les idAdresses qui correspondent a une recherche sur mot clé des evenements
			//$evenements = new archiEvenement();
			//$listeIdAdresses=array();
			//$retourEvenements=$evenements->getIdAdressesFromRecherche($criteres);
			//$tabIdAdressesFromRechercheEvenements=$retourEvenements['idAdresses'];
			
			//$tabidAdresses = array_unique(array_merge($tabIdAdressesFromRechercheEvenements,$tabIdAdressesFromRechercheAdresses));
			
			//$listeIdAdresses = implode("','",$tabidAdresses);
				
			//$sqlAdressesSupplementaires.=" AND ha1.idAdresse in ('".$listeIdAdresses."') ";
			
			$motcle = $criteres['recherche_motcle'];
			
			
			$motcleEscaped = mysql_escape_string($motcle);
			$motcleEscaped = str_replace(' ','%',$motcleEscaped);
			
			$sqlMotCle="
				AND
				(
					q.nom LIKE \"%".$motcleEscaped."%\"
					OR sq.nom LIKE \"%".$motcleEscaped."%\"
					OR v.nom LIKE \"%".$motcleEscaped."%\"
					OR p.nom LIKE \"%".$motcleEscaped."%\"
					OR r.nom LIKE \"%".$motcleEscaped."%\"
					OR he1.titre LIKE \"%".$motcleEscaped."%\"
					OR he1.description LIKE \"%".$motcleEscaped."%\" 
					OR CONCAT_WS('',CONVERT(ha1.numero USING utf8),ind.nom,r.prefixe,r.nom,sq.nom, q.nom, v.nom, p.nom) LIKE '%".$motcleEscaped."%'
					OR CONCAT_WS('',pers.nom,pers.prenom) LIKE \"%".$motcleEscaped."%\"
					OR CONCAT_WS('',pers.prenom,pers.nom) LIKE \"%".$motcleEscaped."%\"
				)";
				
			$sqlSelectMotCle="";//,IF(ha1.idQuartier !=0 and ha1.idRue=0 and ha1.numero=0 and q.nom  LIKE \"%".$motcle."%\",1000000000,0) as poidsSpeQuartier
			
			
			$sqlOrderBy="(
							  IF(r.nom LIKE \"%".$motcle."%\",10000,0) 
							+ IF(sq.nom LIKE \"%".$motcle."%\",10000,0) 
							+ IF(q.nom  LIKE \"%".$motcle."%\",10000,0) 
							+ IF(v.nom  LIKE \"%".$motcle."%\",10000,0) 
							+ IF(he1.titre LIKE \"%".$motcle."%\",100,0) 
							+ IF(he1.description LIKE \"%".$motcle."%\",10,0) 
							+ IF(ha1.idQuartier !=0 and ha1.idRue=0 and ha1.numero=0 and q.nom  LIKE \"%".$motcle."%\",1000000000,0)
							+ IF(ha1.numero=0 and CONCAT_WS(' ',r.prefixe,r.nom) LIKE \"%".$motcle."%\",10000000000000000,0)
							+ IF(ha1.numero=0 and ha1.idRue=0 and ha1.idQuartier=0 and ha1.idSousQuartier=0 and v.nom LIKE \"%".$motcle."%\",10000000000000000,0)
							+ IF(CONCAT_WS('',CONVERT(ha1.numero USING utf8),ind.nom,r.prefixe,r.nom,sq.nom, q.nom, v.nom, p.nom) LIKE '%".$motcleEscaped."%',100000000000,0))
							+ IF(CONCAT_WS('',pers.nom,pers.prenom) LIKE \"%".$motcleEscaped."%\",20000000000000000,0)
							+ IF(CONCAT_WS('',pers.prenom,pers.nom) LIKE \"%".$motcleEscaped."%\",20000000000000000,0)";
			
			
			//$sqlOrderByPoidsMotCle="poidsTotal DESC";
		}
		
		
		
		// requete de recherche
		// on fait une requete pour trouver les resultats , et ensuite on fait une requete pour l'affichage , obligé pour eviter les doublons dans l'affichage
		
		
		
		
		
		
		
		// ****************************************************************************************************
		// ajout d'adresses pouvant provenir de la recherche avancee d'evenements
		// ****************************************************************************************************
		if(isset($criteres['adressesSupplementairesExternes']))
		{
			$listeIdAdresses = implode("','",array_unique(array_merge($tabidAdresses,$criteres['adressesSupplementairesExternes'])));
			$sqlAdressesSupplementaires = " AND ha1.idAdresse in ('".$listeIdAdresses."') ";
		}



		if ( !isset( $criteres['ordre'] )) 
		{
			$sqlOrdre = 'nomRue';
		}
		else
		{
			switch( $criteres['ordre']) {
				case 'rue':	$sqlOrdre = 'nomRue';
					break;
				case 'sousQuartier':	$sqlOrdre = 'nomSousQuartier';
					break;
				case 'quartier':	$sqlOrdre = 'nomQuartier';
					break;
				case 'ville':		$sqlOrdre = 'nomVille';
					break;
				case 'pays':		$sqlOrdre = 'nomPays';
					break;
				default:		$sqlOrdre = 'nomRue';
			}
		}
		
		
		
		if ( isset( $criteres['selection'] ) AND is_numeric( $criteres['id'] ) AND $criteres['id'] > 0) {
			switch( $criteres['selection']) {
				case 'rue':		$tabSqlWhere[] = ' AND (ha1.idRue='.$criteres['id'].' OR r.idRue='.$criteres['id'].')';
					break;
				case 'ville':		$tabSqlWhere[] = ' AND (ha1.idVille='.$criteres['id'].' OR v.idVille='.$criteres['id'].')';
					break;
				case 'quartier':	$tabSqlWhere[] = ' AND (ha1.idQuartier='.$criteres['id'].' OR q.idQuartier='.$criteres['id'].')';
					break;
				case 'sousQuartier':	$tabSqlWhere[] = ' AND (ha1.idSousQuartier='.$criteres['id'].' OR sq.idSousQuartier='.$criteres['id'].')';
					break;
				case 'pays':		$tabSqlWhere[] = ' AND (ha1.idPays='.$criteres['id'].' OR p.idPays='.$criteres['id'].')';
					break;
				default:		
				break;
			}
		}
		
		// si l'on precise un id evenement dans les criteres	(attention : idEvenement est de type GROUPE d'ADRESSES)
		$sqlJoin ="";
		$selectEvenement="";
		if(isset($criteres['archiIdEvenement']))
		{
			//$sqlJoin =' RIGHT JOIN _adresseEvenement _aE ON _aE.idAdresse = hA.idAdresse ';
			$tabSqlWhere[] = " AND ae.idEvenement = '".$criteres['archiIdEvenement']."'";
		}

		$sqlWhere = '';
		if( isset($tabSqlWhere))
		{
			$prefix = '';
			foreach ($tabSqlWhere AS $val)
			{
				$sqlWhere .= ' '.$prefix.' '.$val;
				$prefix    = 'AND';
			}
		}
/*		else
		{
			$sqlWhere ='1';
		}
*/
		if ( !isset( $criteres['debut'] ) OR !is_numeric( $criteres['debut'] ) OR $criteres['debut'] < 1) 
		{
			$sqlLimit = '0, 10';
			$valDebutSuivant = 0;
			$valDebutPrecedent = 0;
			$criteres['debut'] = 0;
		}
		else 
		{
			$sqlLimit = $criteres['debut'].', 10';
			if ( $criteres['debut'] > 9 )
				$valDebutPrecedent = $criteres['debut'] -10;
			else
				$valDebutPrecedent = 0;
			$valDebutSuivant = $criteres['debut'];
		}
		

		if (isset( $criteres['tri'])) 
		{
			if ($criteres['tri'] == 'desc')
				$sqlTri = 'DESC';
			else
				$sqlTri = 'ASC';
		}
		else {
			$sqlTri = 'ASC';
		}
		
		
		
		if(isset($criteres['toutesLesDemolitions']))
		{
			$arrayIdAdressesDemolitions = $this->getIdAdressesFromCriteres(array('whereSql'=>"te.nom = 'Démolition'"));
			$sqlAdressesSupplementaires = " AND ha1.idAdresse in ('".implode("','",$arrayIdAdressesDemolitions)."')";
			$sqlWhere="";
		}
		
		if(isset($criteres['tousLesTravaux']))
		{
			$arrayIdAdressesTravaux = $this->getIdAdressesFromCriteres(array('whereSql'=>"te.nom ='Construction' or te.nom='Rénovation' or te.nom='Extension' or te.nom='Transformation' or te.nom='Ravalement'"));
			$sqlAdressesSupplementaires = " AND ha1.idAdresse in ('".implode("','",$arrayIdAdressesTravaux)."')";
			$sqlWhere="";
		}
		
		if(isset($criteres['tousLesEvenementsCulturels']))
		{
			$arrayIdAdressesEvenements = $this->getIdAdressesFromCriteres(array('whereSql'=>"te.groupe='1'"));
			$sqlAdressesSupplementaires = " AND ha1.idAdresse in ('".implode("','",$arrayIdAdressesEvenements)."')";
			$sqlWhere="";
		}
		
		$sqlSelectionExterne="";
		if(isset($criteres['sqlSelectionExterne']))
		{
			$sqlSelectionExterne=$criteres['sqlSelectionExterne'];
		}
		
		
		/*$sqlCount = 'SELECT 0 
			FROM historiqueAdresse hAb,historiqueAdresse hA  
			LEFT JOIN rue r 		ON r.idRue = hA.idRue
			LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(hA.idRue=0 and hA.idSousQuartier!=0 ,hA.idSousQuartier ,r.idSousQuartier )
			LEFT JOIN quartier q		ON q.idQuartier = IF(hA.idRue=0 and hA.idSousQuartier=0 and hA.idQuartier!=0 ,hA.idQuartier ,sq.idQuartier )
			LEFT JOIN ville v		ON v.idVille = IF(hA.idRue=0 and hA.idSousQuartier=0 and hA.idQuartier=0 and hA.idVille!=0 ,hA.idVille ,q.idVille )
			LEFT JOIN pays p		ON p.idPays = IF(hA.idRue=0 and hA.idSousQuartier=0 and hA.idQuartier=0 and hA.idVille=0 and hA.idPays!=0 ,hA.idPays ,v.idPays )
			LEFT JOIN _adresseEvenement ae ON ae.idAdresse = hA.idAdresse
			'.$sqlJoin.'
			WHERE '. $sqlWhere .' '.$sqlAdressesSupplementaires.' '.$sqlSelectionExterne.' 
			AND hAb.idAdresse = hA.idAdresse 
			AND ae.idAdresse IS NOT NULL
			GROUP BY hA.idAdresse,hA.idHistoriqueAdresse   
			HAVING hA.idHistoriqueAdresse = max(hAb.idHistoriqueAdresse)';
		*/
		
		$sqlCount = "
				SELECT distinct ha1.idAdresse			
				
				FROM historiqueAdresse ha2,historiqueAdresse ha1
				
				
				RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha1.idAdresse
				RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
				RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
				RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
				
				
				LEFT JOIN rue r 		ON r.idRue = ha1.idRue
				LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
				LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
				LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
				LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )
				
				LEFT JOIN _evenementPersonne ep ON ep.idEvenement = he1.idEvenement
				LEFT JOIN personne pers ON pers.idPersonne = ep.idPersonne
				LEFT JOIN indicatif ind ON ind.idIndicatif = ha1.idIndicatif
				
				WHERE
					ha2.idAdresse = ha1.idAdresse
				". $sqlWhere ." ".$sqlAdressesSupplementaires."  ".$sqlSelectionExterne." ".$sqlMotCle." 
				GROUP BY ha1.idAdresse, he1.idEvenement,ha1.idHistoriqueAdresse,he1.idHistoriqueEvenement
				HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
		";

		
		
		
		$result = $this->connexionBdd->requete($sqlCount);
		$nbResult = 
		
		$nbReponses = mysql_num_rows($result);
		
		if (( $nbResult - $valDebutSuivant ) > 10)
			$valDebutSuivant += 10;
		
		
		
		$nbAdresses = $nbReponses;
		
		$t=new Template('modules/archi/templates/');
		
		
		if(!isset($criteres['useTemplateFile']))
		{
			$t->set_filenames(array('listeAdresses'=>'listeAdresses.tpl'));
		}
		else
		{
			$t->set_filenames(array('listeAdresses'=>$criteres['useTemplateFile']));
		}
		
		// gestion du titre de la liste des adresses
		if(!isset($criteres['cacheTitre']))
		{
			if(isset($criteres['titre']))
				$t->assign_vars(array('titre'=>$criteres['titre']));
			else
			{
				if(isset($this->variablesGet['selection']) && $this->variablesGet['selection']=='personne' && isset($this->variablesGet['id']) && $this->variablesGet['id']!='0')
				{
					// on affiche un titre et une description
					$personneObj = new archiPersonne();
					$infosPersonne = $personneObj->getInfosPersonne($this->variablesGet['id']);
					$titre="";
					if(isset($infosPersonne['nomMetier']) && $infosPersonne['nomMetier']!="")
					{
						$titre = ucwords(stripslashes($infosPersonne['nomMetier']))." : ";
					}
					$titre.=ucwords(stripslashes($infosPersonne['nom']))." ".ucwords(stripslashes($infosPersonne['prenom']));
					
					
					$description="";
					if($infosPersonne['dateNaissance']!='0000-00-00')
					{
						$description.="<br>Date de naissance : ".$this->date->toFrench($infosPersonne['dateNaissance']);
					}
					
					if($infosPersonne['dateDeces']!='0000-00-00')
					{
						$description.="<br>Date de décès : ".$this->date->toFrench($infosPersonne['dateDeces']);
					}
					
					$descriptionPersonne = (stripslashes($this->BBversHTML($infosPersonne['description'])));//nl2br
					$descriptionPersonne = str_replace("\n\r","<br>",$descriptionPersonne);
					
					$descriptionPersonne = str_replace("\n","<br>",$descriptionPersonne);
					
					
					$descriptionPersonne = str_replace("###serveur###",$this->nomServeur,$descriptionPersonne);
					
					
					
					$descriptionPersonne = eregi_replace("\\[url=\"http\\://(.+)\"\\](.+)\\[/url\\]","<a href='http://\\1'>\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[url=\\'http\\://(.+)\\'\\](.+)\\[/url\\]","<a href='http://\\1'>\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[url=http\\://(.+)\\](.+)\\[/url\\]","<a href='http://\\1'>\\2</a>",$descriptionPersonne);
					
					
					$descriptionPersonne = eregi_replace("\\[url=\"(.+)\"\\](.+)\\[/url\\]","<a href='\\1'>\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[url=\\'(.+)\\'\\](.+)\\[/url\\]","<a href='\\1'>\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[url=(.+)\\](.+)\\[/url\\]","<a href='\\1'>\\2</a>",$descriptionPersonne);
					
					//$description = eregi_replace("\\[url=\"(.+)\"\\](.+)\\[/url\\]","<a href='\\1'>\\2</a>",$description);
					$descriptionPersonne = eregi_replace("\\[url\\](.+)\\[/url\\]","<a href='\\1'>\\1</a>",$descriptionPersonne);
					
					
					
					$descriptionPersonne = eregi_replace("\\[urlExterne\\=\"http\\://(.+)\"](.+)\\[/urlExterne\\]","<a href=\"http://\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[urlExterne\\=\\'http\\://(.+)\\'](.+)\\[/urlExterne\\]","<a href=\"http://\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[urlExterne\\=http\\://(.+)](.+)\\[/urlExterne\\]","<a href=\"http://\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);

					$descriptionPersonne = eregi_replace("\\[urlExterne\\=\"(.+)\"](.+)\\[/urlExterne\\]","<a href=\"\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[urlExterne\\=\\'(.+)\\'](.+)\\[/urlExterne\\]","<a href=\"\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);
					$descriptionPersonne = eregi_replace("\\[urlExterne\\=(.+)](.+)\\[/urlExterne\\]","<a href=\"\\1\" target=\"_blank\">\\2</a>",$descriptionPersonne);
					
					$descriptionPersonne = eregi_replace("\\[urlExterne\\](.+)\\[/urlExterne\\]","<a href=\"\\1\" target=\"_blank\">\\1</a>",$descriptionPersonne);
					
					$description.="<br>".$descriptionPersonne."<br><br><h2>Liste de ses réalisations : </h2>";
					
					
					$t->assign_vars(array('titre'=>$titre));
					$t->assign_vars(array('description'=>$description));
				}
				else
				{
					$t->assign_vars(array('titre'=>'Adresses'));
				}
			}
		}
		
		
		// gestion de la pagination de la recherche
		switch($modeAffichage)
		{
			case 'calqueImage':
				$urlPrecedent = '#';
				$urlPrecedentOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutPrecedent)))."','resultatsAdresse')";
				$urlSuivant = '#';
				$urlSuivantOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutSuivant)))."','resultatsAdresse')";
			break;
			case 'calqueImageChampsMultiples':
				$urlPrecedent = '#';
				$urlPrecedentOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutPrecedent)))."','resultatsAdresse')";
				$urlSuivant = '#';
				$urlSuivantOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutSuivant)))."','resultatsAdresse')";
			break;
			case 'calqueEvenement':
					$urlPrecedent = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutPrecedent)));
					$urlPrecedentOnClick = "";
					$urlSuivant = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutSuivant)));
					$urlSuivantOnClick = "";
					$tabTempo = array(
					array(	'url'     => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom'))),
						'urlOnClick' => '',
						'titre'   => 'Titre',
						'urlDesc' => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom', 'tri'   => 'desc'))),
						'urlDescOnClick' => '',
						'urlAsc'  => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom', 'tri'   => 'asc'))),
						'urlAscOnClick' => ''),
					array(	'url'     => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image'))),
						'urlOnClick' => '',
						'titre'   => 'Image',
						'urlDesc' => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image', 'tri'   => 'desc'))),
						'urlDescOnClick' => '',
						'urlAsc'  => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image', 'tri'   => 'asc'))),
						'urlAscOnClick' => '')
				);
				
			break;
			default:
				$urlPrecedent = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutPrecedent)));
				$urlPrecedentOnClick = "";
				$urlSuivant = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $valDebutSuivant)));
				$urlSuivantOnClick = "";
				$tabTempo = array(
					array(	'url'     => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom'))),
						'urlOnClick' => '',
						'titre'   => 'Titre',
						'urlDesc' => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom', 'tri'   => 'desc'))),
						'urlDescOnClick' => '',
						'urlAsc'  => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'nom', 'tri'   => 'asc'))),
						'urlAscOnClick' => ''),
					array(	'url'     => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image'))),
						'urlOnClick' => '',
						'titre'   => 'Image',
						'urlDesc' => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image', 'tri'   => 'desc'))),
						'urlDescOnClick' => '',
						'urlAsc'  => $this->creerUrl('','',array_merge($this->variablesGet, array('ordre' => 'image', 'tri'   => 'asc'))),
						'urlAscOnClick' => '')
					
				);
		}
		
		
		// on peut cacher l'affichage du nombre de reponses suivant l'affichage souhaité
		if(!isset($criteres['cacheNbReponses']))
		{
			$nbReponses=$nbReponses.' réponses :';
		}
		else
		{
			$nbReponses="";
		}
			
		
		$t->assign_block_vars('t', array(
			'urlPrecedent' 		=> $urlPrecedent,
			'urlPrecedentOnClick'	=> $urlPrecedentOnClick,
			'urlSuivant'   		=> $urlSuivant,
			'urlSuivantOnClick'	=> $urlSuivantOnClick,
			'nbReponses'   		=> $nbReponses));
	
		if(!isset($criteres['cacheEnteteTri']))
		{
			for ( $i=0; $i<count($tabTempo); $i++) {
				$t->assign_block_vars('t.liens', $tabTempo[$i]);
			}
		}
		
		if ($criteres['debut'] == 0 OR $criteres['debut'] < 51)
		{
			$debutNav = 0;
			$finNav   = 200;
		}
		else
		{
			$debutNav = $criteres['debut']-50;
			$finNav   = $debutNav + 150;
		}
		for( $i=$debutNav; $i<$finNav ; $i+=10)
		{
			if ($criteres['debut'] == $i-10 && $nbReponses>0)
			{
				$t->assign_block_vars('t.nav.courant', array());
			}
			
			if($nbReponses > $i)
			{
				switch($modeAffichage)
				{
					case 'calqueImage':
						$urlNbOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $i)))."','resultatsAdresse');";
						$urlNb = '#';
					break;
					case 'calqueEvenement':
						/*$urlNbOnClick = "appelAjax('".$this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $i)))."','resultatsAdresse');";
						$urlNb = '#';*/
						$urlNbOnClick = '';
						$urlNb = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $i)));
					break;
					case 'calqueImageChampsMultiples':
						$urlNbOnClick = '';
						$urlNb = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $i)));					
					break;
					default:
						$urlNbOnClick = '';
						$urlNb = $this->creerUrl('','',array_merge($this->variablesGet, array('debut' => $i)));
				}
				$t->assign_block_vars('t.nav', array(
					'urlNbOnClick' => $urlNbOnClick,
					'urlNb'        => $urlNb,
					'nb'           => ($i/10)+1 ));
				
			}
		}
		
		

		
		$sql = "
				SELECT distinct ha1.idAdresse as idAdresse, ha1.numero, ha1.idQuartier, ha1.idVille,ind.nom,
				
				r.nom as nomRue,
				sq.nom as nomSousQuartier,
				q.nom as nomQuartier,
				v.nom as nomVille,
				p.nom as nomPays,
				ha1.numero as numeroAdresse, 
				ha1.idRue,
				r.prefixe as prefixeRue,
				IF (ha1.idSousQuartier != 0, ha1.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
				IF (ha1.idQuartier != 0, ha1.idQuartier, sq.idQuartier) AS idQuartier,
				IF (ha1.idVille != 0, ha1.idVille, q.idVille) AS idVille,
				IF (ha1.idPays != 0, ha1.idPays, v.idPays) AS idPays,
				
				ha1.numero as numero,
				ha1.idHistoriqueAdresse,
				ha1.idIndicatif as idIndicatif
					
				
				".$sqlSelectMotCle."
				
				
				FROM historiqueAdresse ha2,historiqueAdresse ha1
				
				".$sqlJoin."
				
				LEFT JOIN _adresseEvenement ae ON ae.idAdresse = ha1.idAdresse
				LEFT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
				LEFT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
				LEFT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
				
				LEFT JOIN _evenementPersonne ep ON ep.idEvenement = he1.idEvenement
				LEFT JOIN personne pers ON pers.idPersonne = ep.idPersonne
				LEFT JOIN indicatif ind ON ind.idIndicatif = ha1.idIndicatif
				
				LEFT JOIN rue r 		ON r.idRue = ha1.idRue
				LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
				LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
				LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
				LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )
				
				
				
				WHERE
					ha2.idAdresse = ha1.idAdresse 
					
					". $sqlWhere ." ".$sqlAdressesSupplementaires."  ".$sqlSelectionExterne." ".$sqlMotCle." 
				AND ae.idAdresse IS NOT NULL
				GROUP BY ha1.idAdresse,he1.idEvenement,ha1.idHistoriqueAdresse, he1.idHistoriqueEvenement
				HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
				ORDER BY  ".$sqlOrderBy."
							DESC
				LIMIT ".$sqlLimit."
				";////ORDER BY  ".pia_substr($sqlOrderByPoidsMotCle,0,-1)."
			
		
		
		
		
		
		// ***************************************************************************************************************************************
		// affichage des resultats de la recherche
		// ***************************************************************************************************************************************
		$requeteAdresse = $this->connexionBdd->requete( $sql );

		//echo $sql;
		
		
		
		
		if(!isset($criteres['useTemplateFile']) && $nbReponses==1 && !isset($criteres['desactivateRedirection'])) // si on utilise le template par defaut , c'est qu'on est dans un affichage de resultat de recherche , sinon c'est un affichage de detail d'adresse
		{
			$fetch=mysql_fetch_assoc($requeteAdresse);
			// s'il n'y a qu'un seul resultat a la recherche on redirige automatiquement vers le resultat
			// a voir pour ne pas utiliser le javascript et afficher directement avec la fonction afficherDetail
			echo "<script language='javascript'>location.href='".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$fetch['idAdresse']))."';</script>";
		}
		else
		{
			if(mysql_num_rows($requeteAdresse)>0)
			{
				while($fetch=mysql_fetch_assoc($requeteAdresse))
				{
					
					// *******************************************************************************************************************
					// recuperation de l'adresse
					$nomAdresse ='';
					$nomAdresse = stripslashes($this->getIntituleAdresse($fetch));
					// *******************************************************************************************************************
					
					// *******************************************************************************************************************
					// titre de l'evenement ajouté derriere l'adresse
					// on prend le premier titre qui n'est pas vide
					// et on fabrique le lien avec l'ancre vers l'evenement qui pourra etre cliqué directement
					// on a une adresse qui correspond a un groupe d'adresse , on va donc chercher le titre des evenements qui correspondent au groupe d'adresse
					$titresEvenements="";
					$tabTitresEvenements = array();
					$reqTitresEvenements = "
						SELECT he1.titre as titre , ae.idAdresse as idAdresse
						FROM historiqueEvenement he1, historiqueEvenement he2
						RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = '".$fetch['idAdresse']."'
						RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
						WHERE he2.idEvenement = he1.idEvenement
						AND he1.idEvenement = ee.idEvenementAssocie
						GROUP BY he1.idEvenement,he1.idHistoriqueEvenement
						HAVING he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
						ORDER BY he1.dateDebut,he1.idHistoriqueEvenement
					";
					
					$resTitresEvenements = $this->connexionBdd->requete($reqTitresEvenements);
					
					$positionAncre=0;
					while($fetchTitresEvenements = mysql_fetch_assoc($resTitresEvenements))
					{
						if(trim($fetchTitresEvenements['titre'])!='')
						{
							$tabTitresEvenements[] = "<a href='".$this->creerUrl('','',array('archiIdAdresse'=>$fetch['idAdresse'],'archiAffichage'=>'adresseDetail','debut'=>''))."#".$positionAncre."'>".stripslashes($fetchTitresEvenements['titre'])."</a>";
						}
						$positionAncre++;
					}
					$titresEvenements = implode(' - ',$tabTitresEvenements);
					// *******************************************************************************************************************
					
					
					// mise en place du lien de l'adresse suivant l'affichage ou l'on est
					switch($modeAffichage)
					{
						case 'calqueImage':
							$urlDetailHref    = "#";
							$urlDetailOnClick = "document.getElementById(document.getElementById('paramChampsAppelantAdresse').value).value='".$fetch['idAdresse']."';document.getElementById(document.getElementById('paramChampsAppelantAdresse').value+'txt').value='".$nomAdresse."';document.getElementById('calqueAdresse').style.display='none';";
							/*$urlNomRue        = '#';
							$urlNomRueOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'rue', 'id'=>$fetch['idRue'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomSousQuartier = '#';
							$urlNomSousQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomQuartier = '#';
							$urlNomQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomVille = '#';
							$urlNomVilleOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'ville', 'id'=>$fetch['idVille'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomPays = '#';
							$urlNomPaysOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'pays', 'id'=>$fetch['idPays'], 'debut'=>0)))."','resultatsAdresse');";
							*/
						break;
						case 'calqueImageChampsMultiples':
							// les liens renvoient la valeur dans un champ select et non pas dans un champ texte , mais la meme popup peut etre appelé plusieurs fois pour plusieurs champs differents du meme type
							$urlDetailHref    = "#";
							$urlDetailOnClick = "parent.document.getElementById(parent.document.getElementById('paramChampsAppelantAdresse').value).innerHTML+='<option selected=\'selected\' value=\'".$fetch['idAdresse']."\'>".addslashes($nomAdresse)."</option>';";
							$urlNomRue        = '#';
							$urlNomRueOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'rue', 'id'=>$fetch['idRue'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomSousQuartier = '#';
							$urlNomSousQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomQuartier = '#';
							$urlNomQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomVille = '#';
							$urlNomVilleOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'ville', 'id'=>$fetch['idVille'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomPays = '#';
							$urlNomPaysOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'pays', 'id'=>$fetch['idPays'], 'debut'=>0)))."','resultatsAdresse');";
						break;
						case 'calqueImageChampsMultiplesRetourSimple':
							// les liens renvoient la valeur dans un champ texte et non pas dans une liste multiple , mais la meme popup peut etre appelé plusieurs fois pour plusieurs champs differents du meme type
							$urlDetailHref    = "#";
							$urlDetailOnClick = "parent.document.getElementById(parent.document.getElementById('paramChampsAppelantAdresse').value).value='".$fetch['idAdresse']."'; parent.document.getElementById(parent.document.getElementById('paramChampsAppelantAdresse').value+'txt').value='".addslashes($nomAdresse)."';";
							$urlNomRue        = '#';
							$urlNomRueOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'rue', 'id'=>$fetch['idRue'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomSousQuartier = '#';
							$urlNomSousQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomQuartier = '#';
							$urlNomQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomVille = '#';
							$urlNomVilleOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'ville', 'id'=>$fetch['idVille'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomPays = '#';
							$urlNomPaysOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'pays', 'id'=>$fetch['idPays'], 'debut'=>0)))."','resultatsAdresse');";
						break;
						case 'calqueEvenement':
							$urlDetailHref = "#";
							$urlDetailOnClick = "parent.document.getElementById('adresses').innerHTML+='<option selected=\'selected\' value=\'".$fetch['idAdresse']."\'>".addslashes($nomAdresse)."</option>';";
							$urlNomRue        = '#';
							$urlNomRueOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'rue', 'id'=>$fetch['idRue'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomSousQuartier = '#';
							$urlNomSousQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomQuartier = '#';
							$urlNomQuartierOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomVille = '#';
							$urlNomVilleOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'ville', 'id'=>$fetch['idVille'], 'debut'=>0)))."','resultatsAdresse');";
							$urlNomPays = '#';
							$urlNomPaysOnClick = "appelAjax('".$this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'pays', 'id'=>$fetch['idPays'], 'debut'=>0)))."','resultatsAdresse');";
						break;
						default:
							$criteresFiltres = array();
							/*foreach($criteres as $critereName => $critereValue)
							{
								if(!in_array($critereName,array('sqlSelectionExterne','titre')))
								{
									$criteresFiltres[$critereName] = $critereValue;
								}
							}*/
						
						
							$urlDetailHref    = $this->creerUrl('','',array_merge($criteresFiltres,array('archiIdAdresse'=>$fetch['idAdresse'],'archiAffichage'=>'adresseDetail','debut'=>'')));
							$urlDetailOnClick = '';
							$urlNomRue        = $this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'rue', 'id'=>$fetch['idRue'], 'debut'=>0)));
							$urlNomRueOnClick = '';
							$urlNomSousQuartier = $this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)));
							$urlNomSousQuartierOnClick = '';
							$urlNomQuartier = $this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)));
							$urlNomQuartierOnClick = '';
							$urlNomVille = $this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'ville', 'id'=>$fetch['idVille'], 'debut'=>0)));
							$urlNomVilleOnClick = '';
							$urlNomPays = $this->creerUrl('', '', array_merge( $this->variablesGet, array('selection'=>'pays', 'id'=>$fetch['idPays'], 'debut'=>0)));
							$urlNomPaysOnClick = '';
						break;
					}
					
					
					// recuperation d'une image d'illustration pour l'affichage de l'adresse
					$illustration = $this->getUrlImageFromAdresse($fetch['idAdresse']);
					
					
					$t->assign_block_vars('t.adresses',array(
						'nom'		=> $nomAdresse,
						'titresEvenements'		=> $titresEvenements,
						'nomRue'	=> $fetch['nomRue'],
						'nomSousQuartier'	=> $fetch['nomSousQuartier'],
						'nomQuartier'		=> $fetch['nomQuartier'],
						'nomVille'		=> $fetch['nomVille'],
						'nomPays'		=> $fetch['nomPays'],
						'urlNomRue'		=> $urlNomRue,
						'urlNomRueOnClick'	=> $urlNomRueOnClick,
						'urlNomSousQuartier'	=> $urlNomSousQuartier,
						'urlNomSousQuartierOnClick' => $urlNomSousQuartierOnClick,
						'urlNomQuartier'	=> $urlNomQuartier,
						'urlNomQuartierOnClick'	=> $urlNomQuartierOnClick,
						'urlNomVille'		=> $urlNomVille,
						'urlNomVilleOnClick'	=> $urlNomVilleOnClick,
						'urlNomPays'		=> $urlNomPays,
						'urlNomPaysOnClick'	=> $urlNomPaysOnClick,
						'urlDetailHref'		=> $urlDetailHref,
						'urlDetailOnClick' 	=> $urlDetailOnClick,
						'urlImageIllustration'	=> $illustration['url']
					));
					
					// **********************************************************************************************************************************************
					// lien vers la liste des adresses relatives a l'adresse courante:
					// **********************************************************************************************************************************************
					$t->assign_vars(array('urlAutresBiensRue'=>$this->creerUrl('','afficherListeRelative',array('archiIdAdresse'=>$fetch['idAdresse'],'archiTypeLocalite'=>'rue'))));
					$t->assign_vars(array('urlAutresBiensQuartier'=>$this->creerUrl('','afficherListeRelative',array('archiIdAdresse'=>$fetch['idAdresse'],'archiTypeLocalite'=>'quartier'))));
					// **********************************************************************************************************************************************
					// recherche des images liées a l'adresse et uniquement les images de la table de liaison _adresseImage
					// **********************************************************************************************************************************************
					$reqImageLiees = "	SELECT hi.idImage as idImage,hi.idHistoriqueImage as idHistoriqueImage,hi.dateUpload as dateUpload
										FROM historiqueImage hi2 , historiqueImage hi
										RIGHT JOIN _adresseImage ai ON hi.idImage = ai.idImage
										WHERE hi2.idImage = hi.idImage
										AND ai.idAdresse = '".$fetch['idAdresse']."'
										GROUP BY hi.idImage,hi.idHistoriqueImage
										HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
					";
					
					$resImagesLiees = $this->connexionBdd->requete($reqImageLiees);
					
					if(count($resImagesLiees)>0)
					{
						$t->assign_block_vars('t.adresses.isImagesLiees',array());
						
					}	
					while($fetchImagesLiees = mysql_fetch_assoc($resImagesLiees))
					{
						// on affiche l'image liee a l'adresse seulement si elle est différente de l'image d'illustration
						//if($fetchImagesLiees['idHistoriqueImage'] != $illustration['idHistoriqueImage'])
						//{
							$t->assign_block_vars('t.adresses.isImagesLiees.images',array('url'=>$this->urlImagesMini.$fetchImagesLiees['dateUpload'].'/'.$fetchImagesLiees['idHistoriqueImage'].'.jpg'));
						//}
					}
					
					// **********************************************************************************************************************************************
					
					
				}
			}
		}
		
		ob_start();
		$t->pparse('listeAdresses');
		$html=ob_get_contents();
		ob_end_clean();

		
		return array('html'=>$html,'nbAdresses'=>$nbAdresses);
	}
	
	// ***************************************************************************************************************************************
	// renvoi l'adresse mise en forme
	// ***************************************************************************************************************************************
	public function getIntituleAdresse($fetch=array())
	{
		$nomAdresse = "";
		if($fetch['numero']!='' && $fetch['numero']!='0')
			$nomAdresse .= $fetch['numero'];
		
		
		// recherche de l'indicatif 
		if(isset($fetch['idIndicatif']) && $fetch['idIndicatif']!='0')
		{
			$reqIndicatif = "SELECT nom FROM indicatif WHERE idIndicatif='".$fetch['idIndicatif']."'";
			$resIndicatif = $this->connexionBdd->requete($reqIndicatif);
			$fetchIndicatif = mysql_fetch_assoc($resIndicatif);
			
			$nomAdresse .=$fetchIndicatif['nom'];
		}
		
		if(pia_substr($fetch['prefixeRue'],0,pia_strlen($fetch['prefixeRue']))=="'")
			$nomAdresse.=' '.$fetch['prefixeRue'].ucfirst($fetch['nomRue']);
		else
			$nomAdresse.=' '.$fetch['prefixeRue'].' '.ucfirst($fetch['nomRue']);
		
		if(isset($fetch['nomQuartier']) && $fetch['nomQuartier']!='autre')
			$nomAdresse .= ' '.ucfirst($fetch['nomQuartier']);
		
		if(isset($fetch['nomVille'])) //  && $fetch['nomVille']!='Strasbourg'
		{
			$nomAdresse.= ' '.ucfirst($fetch['nomVille']);
		}
		
		return $nomAdresse;
	}
	
	// ***************************************************************************************************************************************
	// recuperation d'une image appartenant a une adresse de la rue
	// ***************************************************************************************************************************************
	public function getUrlImageFromRue($idRue,$format='mini')
	{
		$url="";

		switch($format)
		{
			case 'mini':
				$chemin = $this->urlImagesMini;
			break;
			case 'moyen':
				$chemin = $this->urlImagesMoyen;
			break;
			case 'grand':
				$chemin = $this->urlImagesGrand;
			break;
		}
		
		
		
		$queryAdresse = "
						SELECT hi.idHistoriqueImage as idHistoriqueImage , hi.idImage as idImage, hi.nom as nom , hi.dateUpload as dateUpload , hi.dateCliche as dateCliche
						FROM historiqueImage hi2, historiqueImage hi
						RIGHT JOIN _adresseImage ai ON ai.idImage = hi.idImage
						WHERE ai.idAdresse in (select idAdresse FROM historiqueAdresse where idRue ='".$idRue."')
						AND hi2.idImage = hi.idImage
						GROUP BY hi.idImage, hi.idHistoriqueImage
						HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
						LIMIT 1
		";
		
		$resAdresse = $this->connexionBdd->requete($queryAdresse);
		if(mysql_num_rows($resAdresse)==1)
		{
			$fetchAdresse = mysql_fetch_assoc($resAdresse);
			$url = $chemin.$fetchAdresse['dateUpload'].'/'.$fetchAdresse['idHistoriqueImage'].".jpg";
		}
		else
		{
			// on recherche une image appartenant a un evenement de l'adresse
			// recherche des evenements de l'adresse:
			//$queryEvenements ="SELECT idEvenement FROM _adresseEvenement WHERE idAdresse = '".$idAdresse."'";
			
			$queryEvenements="
								SELECT ae.idEvenement as idEvenement
								FROM historiqueAdresse ha2, historiqueAdresse ha
								RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
								WHERE ha2.idAdresse = ha.idAdresse
								AND ha.idRue = '".$idRue."'
								GROUP BY ha.idAdresse , ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
							";
			

			//echo $queryEvenements."<br>";
			$resEvenements = $this->connexionBdd->requete($queryEvenements);
			$arrayListeEvenementsGroupeAdresse=array();
			while($fetchEvenement = mysql_fetch_assoc($resEvenements))
			{
				$arrayListeEvenementsGroupeAdresse[] = $fetchEvenement['idEvenement'];
			}
			
			if(count($arrayListeEvenementsGroupeAdresse)>0)
			{
				// on recherche les evenements du groupe d'adresses
				$listeEvenementsGroupeAdresse = implode("','",$arrayListeEvenementsGroupeAdresse);
				$queryEvenementAssocies = "
									SELECT idEvenementAssocie FROM _evenementEvenement WHERE idEvenement in ('".$listeEvenementsGroupeAdresse."')
				";
				
				$resEvenementsAssocies = $this->connexionBdd->requete($queryEvenementAssocies);
				
				$arrayListeEvenementsAssocies=array();
				while($fetchEvenementsAssocies = mysql_fetch_assoc($resEvenementsAssocies))
				{
					$arrayListeEvenementsAssocies[] = $fetchEvenementsAssocies['idEvenementAssocie'];
				
				}
			
				$listeEvenementsAssocies = implode("','",$arrayListeEvenementsAssocies);
				
				$queryImage = "	SELECT hi.idImage as idImage , hi.idHistoriqueImage as idHistoriqueImage, hi.dateUpload as dateUpload
								FROM historiqueImage hi2, historiqueImage hi
								RIGHT JOIN _evenementImage ei ON ei.idImage = hi.idImage
								WHERE ei.idEvenement in ('".$listeEvenementsAssocies."')
								AND hi2.idImage = hi.idImage
								GROUP BY hi.idImage , hi.idHistoriqueImage
								HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
								LIMIT 1
				"; // on limit a 1 sinon cela peut prendre du temps
				
				$resImage = $this->connexionBdd->requete($queryImage);
				if(mysql_num_rows($resImage)>0)
				{
					$fetchImage = mysql_fetch_assoc($resImage);
					$url = $chemin.$fetchImage['dateUpload'].'/'.$fetchImage['idHistoriqueImage'].".jpg";
				}
			}
		}
		return $url;
	}
	// ***************************************************************************************************************************************
	// recuperation d'une image appartenant a une adresse de la rue
	// ***************************************************************************************************************************************
	public function getUrlImageFromVille($idVille,$format='mini')
	{
		$url="";

		switch($format)
		{
			case 'mini':
				$chemin = $this->urlImagesMini;
			break;
			case 'moyen':
				$chemin = $this->urlImagesMoyen;
			break;
			case 'grand':
				$chemin = $this->urlImagesGrand;
			break;
		}
		
		
		
		$queryQuartier = "
							SELECT idRue 
							FROM rue 
							WHERE idSousQuartier in(SELECT idSousQuartier FROM sousQuartier WHERE idQuartier in 
							(SELECT idQuartier FROM quartier WHERE idVille = '".$idVille."'))

		";
		
		$resQuartier = $this->connexionBdd->requete($queryQuartier);
		$arrayRues=array();
		while($fetchQuartier = mysql_fetch_assoc($resQuartier))
		{
			$arrayRues[] = $fetchQuartier['idRue'];
		}

		if(count($arrayRues)>0)
		{
			$sqlRues_reqEvenement = " AND ha.idRue in ('".implode("','",$arrayRues)."') ";
			$sqlRues_reqAdresse = " ai.idAdresse in (select idAdresse FROM historiqueAdresse where  idRue in ('".implode("','",$arrayRues)."')) ";
		}
		else
		{
			$sqlRues_reqEvenement = " AND ha.idVille='".$idVille."' ";
			$sqlRues_reqAdresse = " ai.idAdresse in (select idAdresse FROM historiqueAdresse where  idVille ='".$idVille."') ";
		}
		
		$queryAdresse = "
						SELECT hi.idHistoriqueImage as idHistoriqueImage , hi.idImage as idImage, hi.nom as nom , hi.dateUpload as dateUpload , hi.dateCliche as dateCliche
						FROM historiqueImage hi2, historiqueImage hi
						RIGHT JOIN _adresseImage ai ON ai.idImage = hi.idImage
						WHERE ".$sqlRues_reqAdresse."
						AND hi2.idImage = hi.idImage
						GROUP BY hi.idImage, hi.idHistoriqueImage
						HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
						LIMIT 1
		";
		
		$resAdresse = $this->connexionBdd->requete($queryAdresse);
		if(mysql_num_rows($resAdresse)==1)
		{
			$fetchAdresse = mysql_fetch_assoc($resAdresse);
			$url = $chemin.$fetchAdresse['dateUpload'].'/'.$fetchAdresse['idHistoriqueImage'].".jpg";
		}
		else
		{
			// on recherche une image appartenant a un evenement de l'adresse
			// recherche des evenements de l'adresse:
			//$queryEvenements ="SELECT idEvenement FROM _adresseEvenement WHERE idAdresse = '".$idAdresse."'";
			
			$queryEvenements="
								SELECT ae.idEvenement as idEvenement
								FROM historiqueAdresse ha2, historiqueAdresse ha
								RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
								WHERE ha2.idAdresse = ha.idAdresse
								".$sqlRues_reqEvenement."
								GROUP BY ha.idAdresse , ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
							";
			

			//echo $queryEvenements."<br>";
			$resEvenements = $this->connexionBdd->requete($queryEvenements);
			$arrayListeEvenementsGroupeAdresse=array();
			while($fetchEvenement = mysql_fetch_assoc($resEvenements))
			{
				$arrayListeEvenementsGroupeAdresse[] = $fetchEvenement['idEvenement'];
			}
			
			if(count($arrayListeEvenementsGroupeAdresse)>0)
			{
				// on recherche les evenements du groupe d'adresses
				$listeEvenementsGroupeAdresse = implode("','",$arrayListeEvenementsGroupeAdresse);
				$queryEvenementAssocies = "
									SELECT idEvenementAssocie FROM _evenementEvenement WHERE idEvenement in ('".$listeEvenementsGroupeAdresse."')
				";
				
				$resEvenementsAssocies = $this->connexionBdd->requete($queryEvenementAssocies);
				
				$arrayListeEvenementsAssocies=array();
				while($fetchEvenementsAssocies = mysql_fetch_assoc($resEvenementsAssocies))
				{
					$arrayListeEvenementsAssocies[] = $fetchEvenementsAssocies['idEvenementAssocie'];
				
				}
			
				$listeEvenementsAssocies = implode("','",$arrayListeEvenementsAssocies);
				
				$queryImage = "	SELECT hi.idImage as idImage , hi.idHistoriqueImage as idHistoriqueImage, hi.dateUpload as dateUpload
								FROM historiqueImage hi2, historiqueImage hi
								RIGHT JOIN _evenementImage ei ON ei.idImage = hi.idImage
								WHERE ei.idEvenement in ('".$listeEvenementsAssocies."')
								AND hi2.idImage = hi.idImage
								GROUP BY hi.idImage , hi.idHistoriqueImage
								HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
								LIMIT 1
				"; // on limit a 1 sinon cela peut prendre du temps
				
				$resImage = $this->connexionBdd->requete($queryImage);
				if(mysql_num_rows($resImage)>0)
				{
					$fetchImage = mysql_fetch_assoc($resImage);
					$url = $chemin.$fetchImage['dateUpload'].'/'.$fetchImage['idHistoriqueImage'].".jpg";
				}
			}
		}
		return $url;
	}
	// ***************************************************************************************************************************************
	// recuperation d'une image appartenant a une adresse de la rue
	// ***************************************************************************************************************************************
	public function getUrlImageFromQuartier($idQuartier,$format='mini')
	{
		$url="";

		switch($format)
		{
			case 'mini':
				$chemin = $this->urlImagesMini;
			break;
			case 'moyen':
				$chemin = $this->urlImagesMoyen;
			break;
			case 'grand':
				$chemin = $this->urlImagesGrand;
			break;
		}
		
		
		
		$queryQuartier = "
							SELECT idRue 
							FROM rue 
							WHERE idSousQuartier in(SELECT idSousQuartier FROM sousQuartier WHERE idQuartier='".$idQuartier."' )";
		
		$resQuartier = $this->connexionBdd->requete($queryQuartier);
		$arrayRues=array();
		while($fetchQuartier = mysql_fetch_assoc($resQuartier))
		{
			$arrayRues[] = $fetchQuartier['idRue'];
		}
		
		
		$queryAdresse = "
						SELECT hi.idHistoriqueImage as idHistoriqueImage , hi.idImage as idImage, hi.nom as nom , hi.dateUpload as dateUpload , hi.dateCliche as dateCliche
						FROM historiqueImage hi2, historiqueImage hi
						RIGHT JOIN _adresseImage ai ON ai.idImage = hi.idImage
						WHERE ai.idAdresse in (select idAdresse FROM historiqueAdresse where idRue in ('".implode("','",$arrayRues)."'))
						AND hi2.idImage = hi.idImage
						GROUP BY hi.idImage, hi.idHistoriqueImage
						HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
						LIMIT 1
		";
		
		$resAdresse = $this->connexionBdd->requete($queryAdresse);
		if(mysql_num_rows($resAdresse)==1)
		{
			$fetchAdresse = mysql_fetch_assoc($resAdresse);
			$url = $chemin.$fetchAdresse['dateUpload'].'/'.$fetchAdresse['idHistoriqueImage'].".jpg";
		}
		else
		{
			// on recherche une image appartenant a un evenement de l'adresse
			// recherche des evenements de l'adresse:
			//$queryEvenements ="SELECT idEvenement FROM _adresseEvenement WHERE idAdresse = '".$idAdresse."'";
			
			$queryEvenements="
								SELECT ae.idEvenement as idEvenement
								FROM historiqueAdresse ha2, historiqueAdresse ha
								RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
								WHERE ha2.idAdresse = ha.idAdresse
								AND ha.idRue in ('".implode("','",$arrayRues)."')
								GROUP BY ha.idAdresse , ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
							";
			

			//echo $queryEvenements."<br>";
			$resEvenements = $this->connexionBdd->requete($queryEvenements);
			$arrayListeEvenementsGroupeAdresse=array();
			while($fetchEvenement = mysql_fetch_assoc($resEvenements))
			{
				$arrayListeEvenementsGroupeAdresse[] = $fetchEvenement['idEvenement'];
			}
			
			if(count($arrayListeEvenementsGroupeAdresse)>0)
			{
				// on recherche les evenements du groupe d'adresses
				$listeEvenementsGroupeAdresse = implode("','",$arrayListeEvenementsGroupeAdresse);
				$queryEvenementAssocies = "
									SELECT idEvenementAssocie FROM _evenementEvenement WHERE idEvenement in ('".$listeEvenementsGroupeAdresse."')
				";
				
				$resEvenementsAssocies = $this->connexionBdd->requete($queryEvenementAssocies);
				
				$arrayListeEvenementsAssocies=array();
				while($fetchEvenementsAssocies = mysql_fetch_assoc($resEvenementsAssocies))
				{
					$arrayListeEvenementsAssocies[] = $fetchEvenementsAssocies['idEvenementAssocie'];
				
				}
			
				$listeEvenementsAssocies = implode("','",$arrayListeEvenementsAssocies);
				
				$queryImage = "	SELECT hi.idImage as idImage , hi.idHistoriqueImage as idHistoriqueImage, hi.dateUpload as dateUpload
								FROM historiqueImage hi2, historiqueImage hi
								RIGHT JOIN _evenementImage ei ON ei.idImage = hi.idImage
								WHERE ei.idEvenement in ('".$listeEvenementsAssocies."')
								AND hi2.idImage = hi.idImage
								GROUP BY hi.idImage , hi.idHistoriqueImage
								HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
								LIMIT 1
				"; // on limit a 1 sinon cela peut prendre du temps
				
				$resImage = $this->connexionBdd->requete($queryImage);
				if(mysql_num_rows($resImage)>0)
				{
					$fetchImage = mysql_fetch_assoc($resImage);
					$url = $chemin.$fetchImage['dateUpload'].'/'.$fetchImage['idHistoriqueImage'].".jpg";
				}
			}
		}
		return $url;
	}


	public function getUrlImageFromEvenement($idEvenement=0,$format='mini')
	{
		$url="";
		$dateUpload="";
		$idHistoriqueImage="";
		switch($format)
                {
                        case 'mini':
                                $chemin = $this->urlImagesMini;
                        break;
                        case 'moyen':
                                $chemin = $this->urlImagesMoyen;
                        break;
                        case 'grand':
                                $chemin = $this->urlImagesGrand;
                        break;
                }

		$reqImage="
			SELECT hi.idHistoriqueImage,hi.dateUpload
			FROM historiqueImage hi2, historiqueImage hi
			RIGHT JOIN _evenementImage ei ON ei.idEvenement = '".$idEvenement."' 
			WHERE hi2.idImage = hi.idImage
			AND hi.idImage = ei.idImage
			GROUP BY hi.idImage,hi.idHistoriqueImage
			HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
			LIMIT 1	
		";
		$resImage = $this->connexionBdd->requete($reqImage);

		if(mysql_num_rows($resImage)==1)
		{
			$fetchImage = mysql_fetch_assoc($resImage);
                        $url = $chemin.$fetchImage['dateUpload'].'/'.$fetchImage['idHistoriqueImage'].".jpg";
                        $dateUpload = $fetchImage['dateUpload'];
                        $idHistoriqueImage = $fetchImage['idHistoriqueImage'];

		}
             
		   if($url=='')
                        $url = $this->urlImages.'transparent.gif';
                return array('url'=>$url,'dateUpload'=>$dateUpload,'idHistoriqueImage'=>$idHistoriqueImage);


	}
	// ***************************************************************************************************************************************
	// recuperation d'une image appartenant a l'adresse , s'il n'y en a pas , on en recupere une d'un evenement lié a l'adresse
	// ***************************************************************************************************************************************
	public function getUrlImageFromAdresse($idAdresse=0,$format='mini')
	{
		$url="";
		$dateUpload = "";
		$idHistoriqueImage = "";
		
		switch($format)
		{
			case 'mini':
				$chemin = $this->urlImagesMini;
			break;
			case 'moyen':
				$chemin = $this->urlImagesMoyen;
			break;
			case 'grand':
				$chemin = $this->urlImagesGrand;
			break;
		}

		// requete desactivée : on n'affiche pas les images reliee a l'adresse par la table _adresseimage
		$queryAdresse = "
						SELECT hi.idHistoriqueImage as idHistoriqueImage , hi.idImage as idImage, hi.nom as nom , hi.dateUpload as dateUpload , hi.dateCliche as dateCliche
						FROM historiqueImage hi2, historiqueImage hi
						RIGHT JOIN _adresseImage ai ON ai.idImage = hi.idImage
						WHERE ai.idAdresse = '".$idAdresse."'
						AND hi2.idImage = hi.idImage
						GROUP BY hi.idImage, hi.idHistoriqueImage
						HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage)
						LIMIT 0
		";
		$resAdresse = $this->connexionBdd->requete($queryAdresse);
		
		if(mysql_num_rows($resAdresse)==1)
		{
			$fetchAdresse = mysql_fetch_assoc($resAdresse);
			$url = $chemin.$fetchAdresse['dateUpload'].'/'.$fetchAdresse['idHistoriqueImage'].".jpg";
			$dateUpload = $fetchAdresse['dateUpload'];
			$idHistoriqueImage = $fetchAdresse['idHistoriqueImage'];
		}
		else
		{	
			// on recherche une image appartenant a un evenement de l'adresse
			
			// recherche des evenements de l'adresse:
			$queryEvenements ="SELECT idEvenement FROM _adresseEvenement WHERE idAdresse = '".$idAdresse."'";
			$resEvenements = $this->connexionBdd->requete($queryEvenements);
			$arrayListeEvenementsGroupeAdresse=array();
			while($fetchEvenement = mysql_fetch_assoc($resEvenements))
			{
				$arrayListeEvenementsGroupeAdresse[] = $fetchEvenement['idEvenement'];
			}
			
			if(count($arrayListeEvenementsGroupeAdresse)>0)
			{
				// on recherche les evenements du groupe d'adresses
				$listeEvenementsGroupeAdresse = implode("','",$arrayListeEvenementsGroupeAdresse);
				$queryEvenementAssocies = "
					SELECT idEvenementAssocie FROM _evenementEvenement WHERE idEvenement in ('".$listeEvenementsGroupeAdresse."')
				";
				
				$resEvenementsAssocies = $this->connexionBdd->requete($queryEvenementAssocies);
				
				$arrayListeEvenementsAssocies=array();
				while($fetchEvenementsAssocies = mysql_fetch_assoc($resEvenementsAssocies))
				{
					$arrayListeEvenementsAssocies[] = $fetchEvenementsAssocies['idEvenementAssocie'];
				
				}
			
				$listeEvenementsAssocies = implode("','",$arrayListeEvenementsAssocies);
				
				$queryImage = "	SELECT hi.idImage as idImage , hi.idHistoriqueImage as idHistoriqueImage, hi.dateUpload as dateUpload,ha1.numero as numero,
								
								r.nom as nomRue,
								sq.nom as nomSousQuartier,
								q.nom as nomQuartier,
								v.nom as nomVille,
								p.nom as nomPays,
								ha1.numero as numeroAdresse, 
								ha1.idRue,
								r.prefixe as prefixeRue,
								IF (ha1.idSousQuartier != 0, ha1.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
								IF (ha1.idQuartier != 0, ha1.idQuartier, sq.idQuartier) AS idQuartier,
								IF (ha1.idVille != 0, ha1.idVille, q.idVille) AS idVille,
								IF (ha1.idPays != 0, ha1.idPays, v.idPays) AS idPays

								FROM historiqueImage hi2, historiqueImage hi
								
								RIGHT JOIN _evenementImage ei ON ei.idImage = hi.idImage
								RIGHT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = ei.idEvenement
								RIGHT JOIN _adresseEvenement ae ON ae.idEvenement = ee.idEvenement
								RIGHT JOIN historiqueAdresse ha1 ON ha1.idAdresse = ae.idAdresse
								RIGHT JOIN historiqueAdresse ha2 ON ha2.idAdresse = ha1.idAdresse		
								
								LEFT JOIN rue r 		ON r.idRue = ha1.idRue
								LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
								LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
								LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
								LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )

								WHERE ei.idEvenement in ('".$listeEvenementsAssocies."')
								AND hi2.idImage = hi.idImage
								GROUP BY hi.idImage , hi.idHistoriqueImage,ha1.idAdresse,ha1.idHistoriqueAdresse
								HAVING hi.idHistoriqueImage = max(hi2.idHistoriqueImage) AND ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
								ORDER BY ei.position ASC
								LIMIT 1
				"; // on limit a 1 sinon cela peut prendre du temps
				
				$resImage = $this->connexionBdd->requete($queryImage);
				if(mysql_num_rows($resImage)>0)
				{
						$fetchImage = mysql_fetch_assoc($resImage);
						//$url = $chemin.$fetchImage['dateUpload'].'/'.$fetchImage['idHistoriqueImage'].".jpg";
						$url = 'photos-'.$this->convertStringToUrlRewrite($this->getIntituleAdresse($fetchImage)).'-'.$fetchImage['dateUpload'].'-'.$fetchImage['idHistoriqueImage'].'-'.$format.'.html';
						$dateUpload = $fetchImage['dateUpload'];
						$idHistoriqueImage = $fetchImage['idHistoriqueImage'];
				}
			}
		}
		
		if($url=='')
			$url = $this->urlImages.'transparent.gif';

		return array('url'=>$url,'dateUpload'=>$dateUpload,'idHistoriqueImage'=>$idHistoriqueImage);
	}
	
	// fonction recuperant l'image de la demolition
	public function getUrlImageFrom($idAdresse=0,$format='mini',$sqlWhere='')
	{
		$url="";
		$dateUpload = "";
		$idHistoriqueImage = "";
		
		/* inutile a cause de l'url rewriting
		switch($format)
		{
			case 'mini':
				$chemin = $this->urlImagesMini;
			break;
			case 'moyen':
				$chemin = $this->urlImagesMoyen;
			break;
			case 'grand':
				$chemin = $this->urlImagesGrand;
			break;
		}
		*/
		$req = "SELECT hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload,ha1.idAdresse as idAdresse,ha1.numero as numero,
		
		r.nom as nomRue,
		sq.nom as nomSousQuartier,
		q.nom as nomQuartier,
		v.nom as nomVille,
		p.nom as nomPays,
		ha1.numero as numeroAdresse, 
		ha1.idRue,
		r.prefixe as prefixeRue,
		IF (ha1.idSousQuartier != 0, ha1.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
		IF (ha1.idQuartier != 0, ha1.idQuartier, sq.idQuartier) AS idQuartier,
		IF (ha1.idVille != 0, ha1.idVille, q.idVille) AS idVille,
		IF (ha1.idPays != 0, ha1.idPays, v.idPays) AS idPays
		
		FROM historiqueImage hi2, historiqueImage hi1
		RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = '".$idAdresse."' 
		RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
		RIGHT JOIN _evenementImage ei ON ei.idEvenement = ee.idEvenementAssocie
		RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement=ee.idEvenementAssocie
		RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
		RIGHT JOIN historiqueAdresse ha1 ON ha1.idAdresse = ae.idAdresse
		RIGHT JOIN historiqueAdresse ha2 ON ha2.idAdresse = ha1.idAdresse

		LEFT JOIN rue r 		ON r.idRue = ha1.idRue
		LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
		LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
		LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
		LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )
		
		WHERE hi2.idImage = hi1.idImage
		AND hi1.idImage = ei.idImage
		 ".$sqlWhere." 
		GROUP BY hi1.idImage,he1.idEvenement,ha1.idAdresse, hi1.idHistoriqueImage, he1.idHistoriqueEvenement, ha1.idHistoriqueAdresse
		HAVING hi1.idHistoriqueImage = max(hi2.idHistoriqueImage) 
		AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement) 
		AND ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
		LIMIT 1";
		
		
		$res = $this->connexionBdd->requete($req);
		
		$url='';
		$dateUpload='';
		$idHistoriqueImage=0;
		
		if(mysql_num_rows($res)==1)
		{
			$fetchAdresse = mysql_fetch_assoc($res);
			//$url = $chemin.$fetchAdresse['dateUpload'].'/'.$fetchAdresse['idHistoriqueImage'].".jpg";
			$url = 'photos-'.$this->convertStringToUrlRewrite($this->getIntituleAdresse($fetchAdresse)).'-'.$fetchAdresse['dateUpload'].'-'.$fetchAdresse['idHistoriqueImage'].'-'.$format.'.html';
			$dateUpload = $fetchAdresse['dateUpload'];
			$idHistoriqueImage = $fetchAdresse['idHistoriqueImage'];
		}
		if($url=='')
			$url = $this->urlImages.'transparent.gif';

		return array('url'=>$url,'dateUpload'=>$dateUpload,'idHistoriqueImage'=>$idHistoriqueImage);
	}
	
	
	// ***************************************************************************************************************************************
	// affiche l'historique d'une adresse
	// ***************************************************************************************************************************************
	public function afficherHistorique($idAdresse=0)
	{
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('historiqueAdresse'=>'historiqueAdresse.tpl')));
	
		$req = "
		SELECT 
		
		hA.idHistoriqueAdresse as idHistoriqueAdresse,
		hA.date as date,
		hA.nom as nom,
		hA.numero as numero,
		r.nom as nomRue,
		sq.nom as nomSousQuartier,
		q.nom as nomQuartier,
		v.nom as nomVille,
		p.nom as nomPays,
		hA.idRue,
		hA.idSousQuartier,
		hA.idQuartier,
		hA.idVille,
		hA.idPays,
		r.prefixe as prefixeRue
		
		FROM historiqueAdresse hA
		LEFT JOIN rue r 			ON r.idRue = hA.idRue
		LEFT JOIN sousQuartier sq 	ON sq.idSousQuartier = hA.idSousQuartier
		LEFT JOIN quartier q 		ON q.idQuartier = hA.idQuartier
		LEFT JOIN ville v 			ON v.idVille = hA.idVille
		LEFT JOIN pays p 			ON p.idPays = hA.idPays
		WHERE idAdresse='".$idAdresse."' 
		order by date DESC
		";
		
		$res=$this->connexionBdd->requete($req);
		
		while($fetch = mysql_fetch_array($res))
		{
			$date = $this->date->toFrench($fetch['date']);
			$t->assign_block_vars('histoAdresse',array(
				'date'=> $date,
				'nom'=>$fetch['nom'],
				'coordonnees'=>$this->getAdresseToDisplay($fetch)));
		}
	
		ob_start();
		$t->pparse('historiqueAdresse');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// ***************************************************************************************************************************************
	// affiche l'adresse de l'evenement
	// ***************************************************************************************************************************************
	/*public function getAdresseFromEvenement($idEvenement=0,$separateur=' ')
	{
		$req='
			SELECT hA.idAdresse,hA.date , hA.description, hA.nom, hA.idRue, hA.etage, hA.numero, hA.idQuartier, hA.idSousQuartier, hA.idVille,hA.idPays,hA.idHistoriqueAdresse
			FROM historiqueAdresse hAb, historiqueAdresse hA
			RIGHT JOIN _adresseEvenement _aE ON hA.idAdresse = _aE.idAdresse
			where hAb.idAdresse = hA.idAdresse
			AND _aE.idAdresse='.$idEvenement.'
			group by hA.idAdresse ,hA.idHistoriqueAdresse
			having hA.date = max(hAb.date) and hA.idHistoriqueAdresse = max(hAb.idHistoriqueAdresse)
		';
		
		$res = $this->connexionBdd->requete($req);
		
		$fetch = mysql_fetch_array($res);
		
		return $this->getAdresseToDisplay($fetch,$separateur);
	}*/
	
	
	
	// retourne un tableau contenant les infos de l'adresse
	public function getArrayAdresseFromIdAdresse($idAdresse=0)
	{
		$req = "
		select ha.idAdresse as idAdresse, 
		ha.date as date,
		ha.description as description,
		ha.nom as nom,
		ha.idHistoriqueAdresse as idHistoriqueAdresse,
		ha.numero as numero,
		ha.idRue,
		IF (ha.idSousQuartier != 0, ha.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
		IF (ha.idQuartier != 0, ha.idQuartier, sq.idQuartier) AS idQuartier,
		IF (ha.idVille != 0, ha.idVille, q.idVille) AS idVille,
		IF (ha.idPays != 0, ha.idPays, v.idPays) AS idPays,
		
		r.prefixe as prefixeRue,
		r.nom as nomRue,
		sq.nom as nomSousQuartier,
		q.nom as nomQuartier,
		v.nom as nomVille,
		p.nom as nomPays
		
		from historiqueAdresse hab, historiqueAdresse ha

		LEFT JOIN rue r 		ON r.idRue = ha.idRue
		LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha.idRue='0' and ha.idSousQuartier!='0' ,ha.idSousQuartier ,r.idSousQuartier )
		LEFT JOIN quartier q		ON q.idQuartier = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier!='0' ,ha.idQuartier ,sq.idQuartier )
		LEFT JOIN ville v		ON v.idVille = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier='0' and ha.idVille!='0' ,ha.idVille ,q.idVille )
		LEFT JOIN pays p		ON p.idPays = IF(ha.idRue='0' and ha.idSousQuartier='0' and ha.idQuartier='0' and ha.idVille='0' and ha.idPays!='0' ,ha.idPays ,v.idPays )		

		where ha.idAdresse = '".$idAdresse."'
		and	hab.idAdresse = ha.idAdresse
		group by ha.idAdresse, ha.idHistoriqueAdresse
		having ha.idHistoriqueAdresse = max(hab.idHistoriqueAdresse)
		";

		$res=$this->connexionBdd->requete($req);
		return mysql_fetch_assoc($res);
	}
	
	public function getNomAdresse($fetch = array())
	{
	
		if (empty($fetch['nomVille']))
		{
			$nomAdresse = 'Pays : '.$fetch['nomPays'];
		}
		else if (empty($fetch['nomQuartier']))
		{
			$nomAdresse = 'Ville : '.$fetch['nomVille'];
		}
		else if (empty($fetch['nomSousQuartier']))
		{
			$nomAdresse = 'Quartier : '.$fetch['nomQuartier'];
		}
		else if (empty($fetch['nomRue']))
		{
			$nomAdresse = 'Ss-Quartier : '.$fetch['nomSousQuartier'];
		} 
		else if (empty($fetch['nom']))
		{
			$nomAdresse = 'Rue : '.$fetch['nomRue'];
		}
		else
		{
			$nomAdresse=$fetch['nom'];
		}
		
		return $nomAdresse;
	}
	
	
	// ***************************************************************************************************************************************
	// dispatch des elements d'adresses recupérés d'une requete afin de recuperer les infos de l'adresse complete
	// ***************************************************************************************************************************************
	public function getAdresseToDisplay($fetch=array(),$separateur=' ')
	{
		$html='';
		$adresseArray =array();
		if($fetch['idRue']!='0')
		{
			$adresseArray = $this->getAdresseComplete($fetch['idRue'],'rue');
		}
		elseif($fetch['idQuartier']!='0')
		{
			$adresseArray = $this->getAdresseComplete($fetch['idQuartier'],'quartier');
		}
		elseif($fetch['idSousQuartier']!='0')
		{
			$adresseArray = $this->getAdresseComplete($fetch['idSousQuartier'],'sousQuartier');
		}
		elseif($fetch['idVille']!='0')
		{
			$adresseArray = $this->getAdresseComplete($fetch['idVille'],'ville');
		}
		elseif($fetch['idPays']!='0')
		{
			$adresseArray = $this->getAdresseComplete($fetch['idPays'],'pays');
		}
		
		if(count($adresseArray)>0)
		{
			$t=new Template('modules/archi/templates/');
			$t->set_filenames(array('adresseDetail'=>'adresseToDisplay.tpl'));
			$nomAdresse = '';
			if (empty($adresseArray['quartier']))
			{
				$nomAdresse = 'Ville : ';
			}
			else if (empty($adresseArray['sousQuartier']))
			{
				$nomAdresse = 'Quartier : ';
			}
			else if (empty($adresseArray['rue']))
			{
				$nomAdresse = 'Ss-Quartier : ';
			} 
			else if (empty($fetch['nom']))
			{
				if($fetch['numero']!='0')
					$nomAdresse .= $fetch['numero'].$separateur;
				
				if($fetch['etage']!='0')
					$nomAdresse .= 'Etage : '.$fetch['etage'].$separateur;

				$nomAdresse .= 'Rue : ';
			}
			else
			{
				if($fetch['numero']!='0')
					$nomAdresse .= 'N°'.$fetch['numero'].$separateur;
				
				$nomAdresse .= $fetch['nom'];
			}
			
			if (!empty($adresseArray['sousQuartier']))
				$t->assign_block_vars('sousQuartier', array());
			if (!empty($adresseArray['quartier']))
				$t->assign_block_vars('quartier', array());

			$t->assign_vars(array(
				'nom' => $nomAdresse,
				'urlSousQuartier' => $this->creerUrl('', 'adresseListe', array('selection'=> 'sousQuartier', 'id'=>$fetch['idSousQuartier'], 'debut'=>0)),
				'nomSousQuartier' => $adresseArray['sousQuartier'],
				'urlQuartier' => $this->creerUrl('', 'adresseListe', array('selection'=> 'quartier', 'id'=>$fetch['idQuartier'], 'debut'=>0)),
				'nomQuartier' => $adresseArray['quartier'],
				'urlVille' => $this->creerUrl('', 'adresseListe', array('selection'=> 'ville', 'id'=>$fetch['idVille'], 'debut'=>0)),
				'nomVille' => $adresseArray['ville'],
				'urlPays'  => $this->creerUrl('', 'adresseListe', array('selection'=> 'pays',  'id'=>$fetch['idPays'], 'debut'=>0)),
				'nomPays' => $adresseArray['pays']
				));
			
			ob_start();
			$t->pparse('adresseDetail');
			$html .= ob_get_contents();
			ob_end_clean();
		}
		return $html;
	}
	
	
	// ***************************************************************************************************************************************
	// renvoi les infos a partir d'un id de rue, de sousquartier, de quartier, de ville, de pays 
	// ( ex : si on veux l'adresse complete d'une rue , on aura en parametres $id = idDeLaRue et $type = 'rue' et la fonction va nous renvoyer la ville le pays le quartier ... de cette rue)
	// ***************************************************************************************************************************************
	public function getAdresseComplete($id=0,$type='')
	{
		$retour=array();
		
		switch($type)
		{
			case 'rue':
				$req = "
							SELECT r.nom as nomRue, sq.nom as nomSousQuartier, q.nom as nomQuartier, v.nom as nomVille, p.nom as nomPays,r.prefixe as prefixeRue
							FROM rue r, sousQuartier sq, quartier q, ville v, pays p
							WHERE r.idRue='".$id."'
							and sq.idSousQuartier = r.idSousQuartier
							and q.idQuartier = sq.idQuartier
							and v.idVille = q.idVille
							and p.idPays = v.idPays
					";
				
				$res=$this->connexionBdd->requete($req);
				
				$fetch=mysql_fetch_array($res);
				$retour['prefixe']		= $fetch["prefixeRue"];
				$retour['rue'] 			= $fetch["nomRue"];
				$retour['sousQuartier'] = $fetch["nomSousQuartier"];
				$retour['quartier'] 	= $fetch["nomQuartier"];
				$retour['ville']		= $fetch["nomVille"];
				$retour['pays']			= $fetch["nomPays"];
				
			break;
			case 'sousQuartier':
				$req = "
							SELECT sq.nom as nomSousQuartier, q.nom as nomQuartier, v.nom as nomVille, p.nom as nomPays
							FROM sousQuartier sq, quartier q, ville v, pays p
							WHERE sq.idSousQuartier='".$id."'
							and q.idQuartier = sq.idQuartier
							and v.idVille = q.idVille
							and p.idPays = v.idPays
					";
				
				$res=$this->connexionBdd->requete($req);
				
				$fetch=mysql_fetch_array($res);
				
				$retour['rue'] 			= '';
				$retour['prefixe']		= '';
				$retour['sousQuartier'] = $fetch["nomSousQuartier"];
				$retour['quartier'] 	= $fetch["nomQuartier"];
				$retour['ville']		= $fetch["nomVille"];
				$retour['pays']			= $fetch["nomPays"];
			break;
			case 'quartier':
				$req = "
							SELECT q.nom as nomQuartier, v.nom as nomVille, p.nom as nomPays
							FROM quartier q, ville v, pays p
							WHERE q.idQuartier = '".$id."'
							and v.idVille = q.idVille
							and p.idPays = v.idPays
					";
				
				$res=$this->connexionBdd->requete($req);
				
				$fetch=mysql_fetch_array($res);
				
				$retour['rue'] 			= '';
				$retour['prefixe']		= '';
				$retour['sousQuartier'] = '';
				$retour['quartier'] 	= $fetch["nomQuartier"];
				$retour['ville']		= $fetch["nomVille"];
				$retour['pays']			= $fetch["nomPays"];
			break;
			case 'ville':
				$req = "
							SELECT v.nom as nomVille, p.nom as nomPays
							FROM ville v, pays p
							WHERE v.idVille = '".$id."'
							and p.idPays = v.idPays
					";
				
				$res=$this->connexionBdd->requete($req);
				
				$fetch=mysql_fetch_array($res);
				
				$retour['rue'] 			= '';
				$retour['prefixe']		= '';
				$retour['sousQuartier'] = '';
				$retour['quartier'] 	= '';
				$retour['ville']		= $fetch["nomVille"];
				$retour['pays']			= $fetch["nomPays"];
			break;
			case 'pays':
				$req = "
							SELECT v.nom as nomVille, p.nom as nomPays
							FROM pays p
							WHERE p.idPays = '".$id."'
					";
				
				$res=$this->connexionBdd->requete($req);
				
				$fetch=mysql_fetch_array($res);
				
				$retour['rue'] 			= '';
				$retour['prefixe']		= '';
				$retour['sousQuartier'] = '';
				$retour['quartier'] 	= '';
				$retour['ville']		= '';
				$retour['pays']			= $fetch["nomPays"];
			break;
		}
		return $retour;
	}
	
	// ***************************************************************************************************************************************
	// affichage du formulaire d'ajout d'une adresse
	// ***************************************************************************************************************************************
	public function afficheFormulaire($tabTravail=array(),$idAdresse=0, $idHistoriqueAdresse = 0)
	{
	
		$pays=0;
		$ville=0;
		$quartier=0;
		$sousQuartier=0;
		$rue=0;
		$formulaire = new formGenerator();	
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('adresseFormulaire'=>'adresseFormulaire.tpl')));
		
		if( $formulaire->estChiffre($idHistoriqueAdresse))
		{
			if ( count($tabTravail) == 0 )
			{
				// copie pure et dure de la version un peu plus bas avec champ idAdresse
				// À simplifier en changeant juste la requête !
				// À simplifier en changeant juste la requête !
				// À simplifier en changeant juste la requête !
				// À simplifier en changeant juste la requête !
				// recuperation des donnees enregistree en cas de modification d'une adresse 
				$resAdresse = $this->connexionBdd->requete("
					SELECT a.idAdresse as idAdresse, DATE_FORMAT(a.date,'%d/%m/%Y') as date, a.description as description, a.nom as nom, a.idHistoriqueAdresse as idHistoriqueAdresse,
							a.idRue as idRue,  a.numero as numero, a.idQuartier as idQuartier, a.idSousQuartier as idSousQuartier, a.idPays as idPays,
							a.idVille as idVille
					FROM historiqueAdresse a, historiqueAdresse b
					WHERE a.idHistoriqueAdresse = '".$idHistoriqueAdresse."'
					LIMIT 1
				");
				
				$tabTravail=array();
				
				if(mysql_num_rows($resAdresse)==1)
				{
					$fetchAdresse=mysql_fetch_array($resAdresse);
					$tabTravail=array(
					'nom'=>array('value'=>$fetchAdresse['nom'],'error'=>''),
					'description'=>array('value'=>$fetchAdresse['description'],'error'=>''),
					'date'=>array('value'=>$fetchAdresse['date'],'error'=>''),
					'numero'=>array('value'=>$fetchAdresse['numero'],'error'=>''),
					'pays'=>array('value'=>$fetchAdresse['idPays'],'error'=>''),
					'ville'=>array('value'=>$fetchAdresse['idVille'],'error'=>''),
					'quartier'=>array('value'=>$fetchAdresse['idQuartier'],'error'=>''),
					'sousQuartier'=>array('value'=>$fetchAdresse['idSousQuartier'],'error'=>''),
					'rue'=>array('value'=>$fetchAdresse['idRue'],'error'=>'')
					);
					
					
					$pays = $fetchAdresse['idPays'];
					$ville = $fetchAdresse['idVille'];
					$quartier = $fetchAdresse['idQuartier'];
					$sousQuartier = $fetchAdresse['idSousQuartier'];
					$rue = $fetchAdresse['idRue'];
					
					$arrayAdresse=array();
					if($rue!=0)
					{
						$arrayAdresse=$this->getArrayAdresseFrom($rue,'rue');
					}
					elseif($sousQuartier!=0)
					{
						// recuperation des infos du  quartier, ville, pays du sousQuartier
						$arrayAdresse=$this->getArrayAdresseFrom($sousQuartier,'sousQuartier');
					}
					elseif($quartier!=0)
					{
						// recuperation des infos  ville, pays du quartier
						$arrayAdresse=$this->getArrayAdresseFrom($quartier,'quartier');
					}
					elseif($ville!=0)
					{
						// recuperation des infos du pays de la ville
						$arrayAdresse=$this->getArrayAdresseFrom($ville,'ville');
					}
					elseif($pays!=0)
					{
						$arrayAdresse=$this->getArrayAdresseFrom($pays,'pays');
					}
					
					if(count($arrayAdresse)>0)
					{
						$pays = $arrayAdresse['pays'];
						$ville = $arrayAdresse['ville'];
						$quartier = $arrayAdresse['quartier'];
						$sousQuartier = $arrayAdresse['sousQuartier'];
						$rue = $arrayAdresse['rue'];					
					}
				}
			}
			// assignation du bouton modifier
			$t->assign_vars(array('boutonSubmit'=>'Modifier'));
			$t->assign_vars(array('idAdresseModification'=>$idAdresse));
			$t->assign_vars(array('formAction'=>$this->creerUrl('modifAdresse')));
		}
		else if( $formulaire->estChiffre($idAdresse))
		{
			if ( count($tabTravail) == 0 )
			{
				// recuperation des donnees enregistree en cas de modification d'une adresse 
				$resAdresse = $this->connexionBdd->requete("
					SELECT a.idAdresse as idAdresse, DATE_FORMAT(a.date,'%d/%m/%Y') as date, a.description as description, a.nom as nom, a.idHistoriqueAdresse as idHistoriqueAdresse,
							a.idRue as idRue, a.numero as numero, a.idQuartier as idQuartier, a.idSousQuartier as idSousQuartier, a.idPays as idPays,
							a.idVille as idVille
					FROM historiqueAdresse a, historiqueAdresse b
					WHERE b.idAdresse = a.idAdresse
					AND a.idAdresse = '".$idAdresse."'
					GROUP BY a.idAdresse,a.idHistoriqueAdresse
					HAVING a.idHistoriqueAdresse = max(b.idHistoriqueAdresse)
				");
				
				$tabTravail=array();
				
				if(mysql_num_rows($resAdresse)==1)
				{
					$fetchAdresse=mysql_fetch_array($resAdresse);
					$tabTravail=array(
					'nom'=>array('value'=>$fetchAdresse['nom'],'error'=>''),
					'description'=>array('value'=>$fetchAdresse['description'],'error'=>''),
					'date'=>array('value'=>$fetchAdresse['date'],'error'=>''),
					'numero'=>array('value'=>$fetchAdresse['numero'],'error'=>''),
					'pays'=>array('value'=>$fetchAdresse['idPays'],'error'=>''),
					'ville'=>array('value'=>$fetchAdresse['idVille'],'error'=>''),
					'quartier'=>array('value'=>$fetchAdresse['idQuartier'],'error'=>''),
					'sousQuartier'=>array('value'=>$fetchAdresse['idSousQuartier'],'error'=>''),
					'rue'=>array('value'=>$fetchAdresse['idRue'],'error'=>'')
					);
					
					
					$pays = $fetchAdresse['idPays'];
					$ville = $fetchAdresse['idVille'];
					$quartier = $fetchAdresse['idQuartier'];
					$sousQuartier = $fetchAdresse['idSousQuartier'];
					$rue = $fetchAdresse['idRue'];
					
					$arrayAdresse=array();
					if($rue!=0)
					{
						$arrayAdresse=$this->getArrayAdresseFrom($rue,'rue');
					}
					elseif($sousQuartier!=0)
					{
						// recuperation des infos du  quartier, ville, pays du sousQuartier
						$arrayAdresse=$this->getArrayAdresseFrom($sousQuartier,'sousQuartier');
					}
					elseif($quartier!=0)
					{
						// recuperation des infos  ville, pays du quartier
						$arrayAdresse=$this->getArrayAdresseFrom($quartier,'quartier');
					}
					elseif($ville!=0)
					{
						// recuperation des infos du pays de la ville
						$arrayAdresse=$this->getArrayAdresseFrom($ville,'ville');
					}
					elseif($pays!=0)
					{
						$arrayAdresse=$this->getArrayAdresseFrom($pays,'pays');
					}
					
					if(count($arrayAdresse)>0)
					{
						$pays = $arrayAdresse['pays'];
						$ville = $arrayAdresse['ville'];
						$quartier = $arrayAdresse['quartier'];
						$sousQuartier = $arrayAdresse['sousQuartier'];
						$rue = $arrayAdresse['rue'];					
					}
				}
			}
			// assignation du bouton modifier
			$t->assign_vars(array('boutonSubmit'=>'Modifier'));
			$t->assign_vars(array('idAdresseModification'=>$idAdresse));
			$t->assign_vars(array('formAction'=>$this->creerUrl('modifAdresse')));
		}
		else
		{
			// assignation du bouton ajout
			$t->assign_vars(array('boutonSubmit'=>'Ajouter'));
			$t->assign_vars(array('idAdresseModification'=>''));
			$t->assign_vars(array('formAction'=>$this->creerUrl('ajoutAdresse')));
		}

		if(isset($this->variablesPost['pays']))
			$pays = $this->variablesPost['pays'];

		if(isset($this->variablesPost['ville']))
			$ville = $this->variablesPost['ville'];
		
		if(isset($this->variablesPost['quartier']))
			$quartier = $this->variablesPost['quartier'];
		
		if(isset($this->variablesPost['sousQuartier']))
			$sousQuartier = $this->variablesPost['sousQuartier'];
		
		if(isset($this->variablesPost['rue']))
			$rue = $this->variablesPost['rue'];
		

		
		// recuperation des variables POST pour les passer au sous formulaire des adresses ( rue , pays ...)
		$arrayChoixAdresse=array();
		if($pays!='0')
		{
			$arrayChoixAdresse=array_merge(array('idPaysChoixAdresse'=>$pays),$arrayChoixAdresse);
		}
		
		if($ville!='0')
		{
			$arrayChoixAdresse=array_merge(array('idVilleChoixAdresse'=>$ville),$arrayChoixAdresse);
		}

		if($quartier!='0')
		{
			$arrayChoixAdresse=array_merge(array('idQuartierChoixAdresse'=>$quartier),$arrayChoixAdresse);
		}

		if($sousQuartier!='0')
		{
			$arrayChoixAdresse=array_merge(array('idSousQuartierChoixAdresse'=>$sousQuartier),$arrayChoixAdresse);
		}

		if($rue!='0')
		{
			$arrayChoixAdresse=array_merge(array('idRueChoixAdresse'=>$rue),$arrayChoixAdresse);
		}

		
		$t->assign_vars(array('appelAjaxJavascript'=>"<script language='javascript'>appelAjax('".$this->creerUrl('','afficheChoixAdresse',array_merge(array('noHeaderNoFooter'=>'1'),$arrayChoixAdresse))."','choixAdresse');</script>"));

		

		foreach($tabTravail as $name => $value)
		{
			$t->assign_vars(array($name=>$value["value"]));
			if($value["error"]!='')
			{
				$t->assign_vars(array($name."-error" => $value["error"].' : '.$name));
			}
		}
		
		ob_start();
		$t->pparse('adresseFormulaire');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// renvoi un tableau contenant les id a partir de l'element final de l'adresse (ex : si rue !=0 , on renvoi le sousquartier, la ville le pays de cette rue)
	public function getArrayAdresseFrom($id,$type='')
	{
		$retourAdresse=array('rue'=>0,'sousQuartier'=>0,'quartier'=>0,'ville'=>0,'pays'=>0);
		
		switch($type)
		{
			case 'rue':
					// recuperation des infos du sousQuartier, quartier, ville, pays de la rue
					$resRue = $this->connexionBdd->requete("
						SELECT r.idRue as idRue, sq.idSousQuartier as idSousQuartier, q.idQuartier as idQuartier,v.idVille as idVille, p.idPays as idPays
						FROM rue r
						LEFT JOIN sousQuartier sq ON sq.idSousQuartier = r.idSousQuartier
						LEFT JOIN quartier q ON q.idQuartier = sq.idQuartier
						LEFT JOIN ville v ON v.idVille= q.idVille
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE r.idRue = '".$id."'
					");
					
					$fetchRue=mysql_fetch_array($resRue);
					$retourAdresse['rue']=$fetchRue['idRue'];
					$retourAdresse['sousQuartier']=$fetchRue['idSousQuartier'];
					$retourAdresse['quartier']=$fetchRue['idQuartier'];
					$retourAdresse['ville']=$fetchRue['idVille'];
					$retourAdresse['pays']=$fetchRue['idPays'];

			break;
			
			case 'sousQuartier':
					// recuperation des infos du  quartier, ville, pays du sousQuartier
					$resSousQuartier = $this->connexionBdd->requete("
						SELECT sq.idSousQuartier as idSousQuartier, q.idQuartier as idQuartier,v.idVille as idVille, p.idPays as idPays
						FROM sousQuartier sq 
						LEFT JOIN quartier q ON q.idQuartier = sq.idQuartier
						LEFT JOIN ville v ON v.idVille= q.idVille
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE sq.idSousQuartier = '".$id."'
					");
					
					$fetchSousQuartier=mysql_fetch_array($resSousQuartier);
					$retourAdresse['rue']=0;
					$retourAdresse['sousQuartier']=$fetchSousQuartier['idSousQuartier'];
					$retourAdresse['quartier']=$fetchSousQuartier['idQuartier'];
					$retourAdresse['ville']=$fetchSousQuartier['idVille'];
					$retourAdresse['pays']=$fetchSousQuartier['idPays'];
			break;
			
			case 'quartier':
					// recuperation des infos du  quartier, ville, pays du sousQuartier
					$resQuartier = $this->connexionBdd->requete("
						SELECT q.idQuartier as idQuartier,v.idVille as idVille, p.idPays as idPays
						FROM quartier q
						LEFT JOIN ville v ON v.idVille= q.idVille
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE q.idQuartier = '".$id."'
					");
					
					$fetchQuartier=mysql_fetch_array($resQuartier);
					$retourAdresse['rue']=0;
					$retourAdresse['sousQuartier']=0;
					$retourAdresse['quartier']=$fetchQuartier['idQuartier'];
					$retourAdresse['ville']=$fetchQuartier['idVille'];
					$retourAdresse['pays']=$fetchQuartier['idPays'];
			break;
			
			case 'ville':
					// recuperation des infos du  quartier, ville, pays du sousQuartier
					$resVille = $this->connexionBdd->requete("
						SELECT v.idVille as idVille, p.idPays as idPays
						FROM ville v
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE v.idVille='".$id."'
					");
					
					$fetchVille=mysql_fetch_array($resVille);
					$retourAdresse['rue']=0;
					$retourAdresse['sousQuartier']=0;
					$retourAdresse['quartier']=0;
					$retourAdresse['ville']=$fetchVille['idVille'];
					$retourAdresse['pays']=$fetchVille['idPays'];
			break;
			
			case 'pays':
					$retourAdresse['rue']=0;
					$retourAdresse['sousQuartier']=0;
					$retourAdresse['quartier']=0;
					$retourAdresse['ville']=0;
					$retourAdresse['pays']=$id;
			break;
			
			default:
				echo 'archiAdresse::getAdresseFrom => type inconnu';
			break;
		}
	
		return $retourAdresse;
	}
	
	
	// ***************************************************************************************************************************************
	// affichage du formulaire appelé en ajax pour le choix des rues rattachée à un sousQuartier, rattaché au quartier, ville, pays ......
	// dans les criteres on précise quelle partie du formulaire on veut afficher
	// ***************************************************************************************************************************************
	public function afficheChoixAdresse($criteres=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('choixAdresse'=>'choixAdresse.tpl')));

		// est ce que l'on affiche tous les champs de choix ou seulement ceux dont on a besoin ?
		$urlTypeNew='';
		
		
		if(isset($this->variablesGet['typeNew']))
		{
			switch($this->variablesGet['typeNew'])
			{
				case 'rue':
					$criteres['modeAffichage_rue']=1;
				break;
				case 'sousQuartier':
					$criteres['modeAffichage_sousQuartier']=1;
				break;
				case 'quartier':
					$criteres['modeAffichage_quartier']=1;
				break;
				case 'ville':
					$criteres['modeAffichage_ville']=1;
				break;
				case 'pays':
					$criteres['modeAffichage_pays']=1;
				break;			
			}
		}
		
		
		
		if(count($criteres)>0)
		{
			if(isset($criteres['modeAffichage_rue']))
			{
				//$t->assign_block_vars('isRue',array());
				$t->assign_block_vars('isSousQuartier',array());
				$t->assign_block_vars('isQuartier',array());
				$t->assign_block_vars('isVille',array());
				$t->assign_block_vars('isPays',array());
				$urlTypeNew="+'&typeNew=rue'";
			}
			if(isset($criteres['modeAffichage_sousQuartier']))
			{
				//$t->assign_block_vars('isSousQuartier',array());
				$t->assign_block_vars('isQuartier',array());
				$t->assign_block_vars('isVille',array());
				$t->assign_block_vars('isPays',array());
				$urlTypeNew="+'&typeNew=sousQuartier'";
			}
			if(isset($criteres['modeAffichage_quartier']))
			{
				//$t->assign_block_vars('isQuartier',array());
				$t->assign_block_vars('isVille',array());
				$t->assign_block_vars('isPays',array());
				$urlTypeNew="+'&typeNew=quartier'";
			}
			if(isset($criteres['modeAffichage_ville']))
			{
				//$t->assign_block_vars('isVille',array());
				$t->assign_block_vars('isPays',array());
				$urlTypeNew="+'&typeNew=ville'";
			}
			if(isset($criteres['modeAffichage_pays']))
			{
				//$t->assign_block_vars('isPays',array());
				$urlTypeNew="+'&typeNew=pays'";
			}
		}
		else
		{
			$t->assign_block_vars('isRue',array());
			$t->assign_block_vars('isSousQuartier',array());
			$t->assign_block_vars('isQuartier',array());
			$t->assign_block_vars('isVille',array());
			$t->assign_block_vars('isPays',array());
		}

		// initialisation des identifiants de pays, ville,quartier, sousquartier,rue selectionnés par l'utilisateur
		$idPaysChoixAdresse=0;
		if(isset($this->variablesGet['idPaysChoixAdresse']))
			$idPaysChoixAdresse=$this->variablesGet['idPaysChoixAdresse'];
		
		$idVilleChoixAdresse=0;
		if(isset($this->variablesGet['idVilleChoixAdresse']))
			$idVilleChoixAdresse=$this->variablesGet['idVilleChoixAdresse'];
			
		$idQuartierChoixAdresse=0;
		if(isset($this->variablesGet['idQuartierChoixAdresse']))
			$idQuartierChoixAdresse=$this->variablesGet['idQuartierChoixAdresse'];
			
		$idSousQuartierChoixAdresse=0;
		if(isset($this->variablesGet['idSousQuartierChoixAdresse']))
			$idSousQuartierChoixAdresse=$this->variablesGet['idSousQuartierChoixAdresse'];
		
		$idRueChoixAdresse=0;
		if(isset($this->variablesGet['idRueChoixAdresse']))
			$idRueChoixAdresse=$this->variablesGet['idRueChoixAdresse'];
		
		
		

		$tabUrl['pays']="&idPaysChoixAdresse='+document.getElementById('pays').value";
		$tabUrl['ville']="+'&idVilleChoixAdresse='+document.getElementById('ville').value";
		$tabUrl['sousQuartier']="+'&idSousQuartierChoixAdresse='+document.getElementById('sousQuartier').value";
		$tabUrl['quartier']="+'&idQuartierChoixAdresse='+document.getElementById('quartier').value";
		$tabUrl['rue']="+'&idRueChoixAdresse='+document.getElementById('rue').value";
		//**********************************************************************************************************************************
		// gestion des favoris :
		// s'il n'y a pas de pays choisi ni de ville et qu'il existe une information sur les favoris dans la session de l'utilisateur connecté
		// et que les affichages ne sont ni des ajout de villes ni de pays , alors on assigne 
		if($idPaysChoixAdresse==0 && $idVilleChoixAdresse==0 && $this->session->isInSession('idVilleFavoris') && $this->session->isInSession('idPaysFavoris'))
		{
			if(!isset($criteres['modeAffichage_ville']) && !isset($criteres['modeAffichage_pays'])) // pas de selection par defaut des favoris si on est sur un affichage d'ajour de ville ou de pays
			{
				$idPaysChoixAdresse 	= $this->session->getFromSession('idPaysFavoris');
				$idVilleChoixAdresse 	= $this->session->getFromSession('idVilleFavoris');
			}
		}
		//***********************************************************************************************************************************
		
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// pays 
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		if(	!isset($criteres['modeAffichage_pays'])) 
		{
			$t->assign_vars(array('paysOnChange'=>"appelAjax('index.php?archiAffichage=afficheChoixAdresse&noHeaderNoFooter=1".$tabUrl['pays'].$urlTypeNew.",'choixAdresse')"));
			
			$resPays=$this->connexionBdd->requete("select idPays,nom from pays where lower(nom)<>'autre' order by nom");
			while($fetchPays=mysql_fetch_array($resPays))
			{
				$selectedPays='';
				if($idPaysChoixAdresse !=0 && $idPaysChoixAdresse==$fetchPays['idPays'])
				{
					$selectedPays='selected';
				}
				$t->assign_block_vars('isPays.listePays',array('idPays'=>$fetchPays['idPays'],'nomPays'=>$fetchPays['nom'],'selected'=>$selectedPays));
			}
		}
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// villes 
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		if($idPaysChoixAdresse!=0 && !isset($criteres['modeAffichage_ville']))
		{
			$t->assign_vars(array('villeOnChange'=>"appelAjax('index.php?archiAffichage=afficheChoixAdresse&noHeaderNoFooter=1".$tabUrl['pays'].$tabUrl['ville'].$urlTypeNew.",'choixAdresse')"));
			
			
			$resVille=$this->connexionBdd->requete("select idVille, nom from ville where idPays='".$idPaysChoixAdresse."' and lower(nom)<>'autre' order by nom");
			while($fetchVille=mysql_fetch_array($resVille))
			{
				$selectedVille='';
				if($idVilleChoixAdresse!='0' && $idVilleChoixAdresse==$fetchVille['idVille'])
				{
					$selectedVille='selected';
				}
				$t->assign_block_vars('isVille.listeVilles',array('idVille'=>$fetchVille['idVille'],'nomVille'=>$fetchVille['nom'],'selected'=>$selectedVille));
			}
		}
		
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Quartier
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		if(	$idVilleChoixAdresse!='0' && !isset($criteres['modeAffichage_quartier']))
		{
			$t->assign_vars(array('quartierOnChange'=>"appelAjax('index.php?archiAffichage=afficheChoixAdresse&noHeaderNoFooter=1".$tabUrl['pays'].$tabUrl['ville'].$tabUrl['quartier'].$urlTypeNew.",'choixAdresse')"));

			$resQuartier = $this->connexionBdd->requete("select idQuartier, nom from quartier where idVille='".$idVilleChoixAdresse."' and lower(nom)<>'autre' order by nom");

			while($fetchQuartier=mysql_fetch_array($resQuartier))
			{
				$selectedQuartier='';
				if($idQuartierChoixAdresse!='0' && $idQuartierChoixAdresse==$fetchQuartier['idQuartier'])
				{
					$selectedQuartier='selected';
				}
				
				$t->assign_block_vars('isQuartier.listeQuartiers',array('idQuartier'=>$fetchQuartier['idQuartier'],'nomQuartier'=>$fetchQuartier['nom'],'selected'=>$selectedQuartier));
			}
		}

		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Sous Quartier
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		if($idQuartierChoixAdresse!=0 && !isset($criteres['modeAffichage_sousQuartier']))
		{
			$t->assign_vars(array('sousQuartierOnChange'=>"appelAjax('index.php?archiAffichage=afficheChoixAdresse&noHeaderNoFooter=1".$tabUrl['pays'].$tabUrl['ville'].$tabUrl['quartier'].$tabUrl['sousQuartier'].$urlTypeNew.",'choixAdresse')"));
			
			$resSousQuartier = $this->connexionBdd->requete("select idSousQuartier, nom from sousQuartier where idQuartier='".$idQuartierChoixAdresse."' and lower(nom)<>'autre' order by nom");
			while($fetchSousQuartier=mysql_fetch_array($resSousQuartier))
			{
				$selectedSousQuartier='';
				if($idSousQuartierChoixAdresse!='0' && $idSousQuartierChoixAdresse==$fetchSousQuartier['idSousQuartier'])
				{
					$selectedSousQuartier='selected';
				}
				$t->assign_block_vars('isSousQuartier.listeSousQuartiers',array('idSousQuartier'=>$fetchSousQuartier['idSousQuartier'],'nomSousQuartier'=>$fetchSousQuartier['nom'],'selected'=>$selectedSousQuartier));
			}
		}
		
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Rue
		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		if($idSousQuartierChoixAdresse!='0' && !isset($criteres['modeAffichage_rue']))
		{
			//$t->assign_vars(array('sousQuartierOnChange'=>"appelAjax('index.php?archiAffichage=afficheChoixAdresse&noHeaderNoFooter=1".$tabUrl['pays'].$tabUrl['ville'].$tabUrl['quartier'].$tabUrl['sousQuartier'].",'choixAdresse')"));
			
			$resRue = $this->connexionBdd->requete("select idRue, nom from rue where idSousQuartier='".$idSousQuartierChoixAdresse."'");
			while($fetchRue=mysql_fetch_array($resRue))
			{
				$selectedRue='';
				if($idRueChoixAdresse!='0' && $idRueChoixAdresse==$fetchRue['idRue'])
				{
					$selectedRue='selected';
				}
				$t->assign_block_vars('isRue.listeRues',array('idRue'=>$fetchRue['idRue'],'nomRue'=>$fetchRue['nom'],'selected'=>$selectedRue));
			}
		}
		
		
		ob_start();
		$t->pparse('choixAdresse');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	public function getPopupChoixAdresse($modeAffichage='resultatRechercheAdresseCalqueImage')
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('popupChoixAdresse'=>'popupChoixAdresse.tpl')));
		$t->assign_vars(array('boutonRecherche'=>$this->creerUrl('',$modeAffichage,array('noHeaderNoFooter'=>'1')))); // voir dans le template pour la suite de l'url
		$t->assign_vars(array('contenuCalque'=>$this->afficheChoixAdresse()));
		
		ob_start();
		$t->pparse('popupChoixAdresse');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}

	
	// cette fonction permet d'ajout un nouvel element provenant du formulaire afficheFormulaireNouvelleAdresse
	// elle met a jour les tables rue, sousQuartier, quartier, ville, pays
	public function ajoutNouvelleAdresse()
	{
		if(isset($this->variablesPost['typeNouvelElement']) && $this->variablesPost['nouvelElement']!='')
		{
			switch($this->variablesPost['typeNouvelElement'])
			{
				case 'newRue':
					// est ce que ce nom de rue existe deja ?
/*					if(isset($this->variablesPost['sousQuartier']) && $this->variablesPost['sousQuartier']!='0')
					{
						
						$sql="
							SELECT idRue 
							FROM rue 
							WHERE idSousQuartier = '".$this->variablesPost['sousQuartier']."'
							AND LOWER(nom) = LOWER(\"".$this->variablesPost['nouvelElement']."\")
							AND LOWER(prefixe) = LOWER(\"".$this->variablesPost['complement']."\")
						";
						$res=$this->connexionBdd->requete($sql);
						
						if(mysql_num_rows($res)>0)
						{
							$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de rue du même nom");
						}
						else
						{
							// ajout
							$this->connexionBdd->requete("
								INSERT INTO rue (idSousQuartier,nom,prefixe) 
								VALUES ('".$this->variablesPost['sousQuartier']."',\"".$this->variablesPost['nouvelElement']."\",\"".$this->variablesPost['complement']."\")
							");
						}
					}
					else
					{
						$this->erreurs->ajouter("Erreur : Vous n'avez pas précisé le sous-quartier");
					}
*/
					
					$sousQuartier=0;
					$quartier=0;
					$ville=0;
					$pays=0;
					
					if(isset($this->variablesPost['sousQuartier']) && $this->variablesPost['sousQuartier']!='0')
					{
						$sousQuartier = $this->variablesPost['sousQuartier'];
						$typeDernier = 'sousQuartier';
					}
					elseif(isset($this->variablesPost['quartier']) && $this->variablesPost['quartier']!='0')
					{
						$quartier = $this->variablesPost['quartier'];
						$typeDernier = 'quartier';
					}
					elseif(isset($this->variablesPost['ville']) && $this->variablesPost['ville']!='0')
					{
						$ville = $this->variablesPost['ville'];
						$typeDernier = 'ville';
					}
					elseif(isset($this->variablesPost['pays']) && $this->variablesPost['pays']!='0')
					{
						$pays = $this->variablesPost['pays'];
						$typeDernier = 'pays';
					}
					
					if(($sousQuartier + $quartier + $ville + $pays)==0)
					{
						$this->erreurs->ajouter("Erreur : Il faut au moins préciser un élément auquel appartient la rue.");
					}
					else
					{
						// recherche du dernier element renseigné
						switch($typeDernier)
						{
							//************************************************************************************************************************************************************
							case 'sousQuartier':
								// ajout d'une rue , il faut preciser un sous quartier
								// ajoutRue va verifier si la rue n'existe pas deja et renverra un message d'erreur si c'est le cas
								$this->ajoutRue($this->variablesPost['sousQuartier'],$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
							break;
							//************************************************************************************************************************************************************
							case 'quartier':
								// ajout d'une rue , il faut preciser un sous quartier
								// on doit donc d'abord trouver le sousQuartier 'autre' correspondant au quartier renseigné, s'il n'existe pas , on le cree
								$reqAutreSousQuartier = "
															SELECT idSousQuartier FROM sousQuartier WHERE nom='autre' AND idQuartier = '".$quartier."'
														";
								$resAutreSousQuartier = $this->connexionBdd->requete($reqAutreSousQuartier);
								
								if(mysql_num_rows($resAutreSousQuartier)==0)
								{
									// pas de valeur 'autre' pour le sous quartier , il faut le creer
									$reqAjoutSousQuartierAutre = "insert into sousQuartier (idQuartier,nom) values ('".$quartier."','autre')";
									$this->connexionBdd->requete($reqAjoutSousQuartierAutre);
									$newId = mysql_insert_id();
									$this->ajoutRue($newId,$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
								}
								else
								{
									// sous quartier autre trouve pour le quartier
									$fetchAutreSousQuartier = mysql_fetch_assoc($resAutreSousQuartier);
									
									$this->ajoutRue($fetchAutreSousQuartier['idSousQuartier'],$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
								
								}
								
							break;
							//************************************************************************************************************************************************************
							case 'ville':
								// ajout d'une rue , il faut preciser un sous quartier
								// recuperation du quartier 'autre' de la ville puis du sousQuartier 'autre' de ce quartier
								$reqAutreQuartier = "SELECT idQuartier FROM quartier WHERE nom='autre' and idVille='".$ville."'";
								$resAutreQuartier = $this->connexionBdd->requete($reqAutreQuartier);
								
								if(mysql_num_rows($resAutreQuartier)==0)
								{
									// creation du quartier 'autre' de la ville concernee
									$reqAjoutQuartierAutre = "insert into quartier (idVille,nom) values ('".$ville."','autre')";
									$resAjoutQuartierAutre= $this->connexionBdd->requete($reqAjoutQuartierAutre);
									$idQuartierAutreNew = mysql_insert_id();
									
									// creation du sousQuartier 'autre' de ce nouveau quartier autre
									$reqAjoutSousQuartierAutre = "insert into sousQuartier (idQuartier,nom) value ('".$idQuartierAutreNew."','autre')";
									$resAjoutSousQuartierAutre = $this->connexionBdd->requete($reqAjoutSousQuartierAutre);
									$idSousQuartierAutreNew = mysql_insert_id();
									
									// ajout de la rue
									$this->ajoutRue($idSousQuartierAutreNew,$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
								}
								else
								{
									// le quartier autre existe
									// recherche du sousQuartier qui lui appartient
									$fetchIdQuartier = mysql_fetch_assoc($resAutreQuartier);
									$quartier = $fetchIdQuartier['idQuartier'];
									$reqAutreSousQuartier = "
																SELECT idSousQuartier FROM sousQuartier WHERE nom='autre' AND idQuartier = '".$quartier."'
															";
									$resAutreSousQuartier = $this->connexionBdd->requete($reqAutreSousQuartier);
									
									if(mysql_num_rows($resAutreSousQuartier)==0)
									{
										// pas de valeur 'autre' pour le sous quartier , il faut le creer
										$reqAjoutSousQuartierAutre = "insert into sousQuartier (idQuartier,nom) values ('".$quartier."','autre')";
										$this->connexionBdd->requete($reqAjoutSousQuartierAutre);
										$newId = mysql_insert_id();
										$this->ajoutRue($newId,$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
									}
									else
									{
										// sous quartier autre trouve pour le quartier
										$fetchAutreSousQuartier = mysql_fetch_assoc($resAutreSousQuartier);
										
										$this->ajoutRue($fetchAutreSousQuartier['idSousQuartier'],$this->variablesPost['nouvelElement'],$this->variablesPost['complement']);
									}
								}
								
							break;
							//************************************************************************************************************************************************************
							case 'pays':
							// ajout d'une rue , il faut preciser un sous quartier
							echo "ajout d'une rue dans un pays verrouillee. Contactez l'administrateur ou selectionnez d'abord une ville. Si celle ci n'existe pas, contactez nous pour que nous l'ajoutions.";
							break;
						}
					
					}
					
					
					
				break;
				case 'newSousQuartier':
					if(isset($this->variablesPost['quartier']) && $this->variablesPost['quartier']!='0')
					{
						// est ce que l'enregistrement existe deja ?
						$sql="
							SELECT idSousQuartier
							FROM sousQuartier
							WHERE idQuartier = '".$this->variablesPost['quartier']."'
							AND LOWER(nom) = LOWER(\"".$this->variablesPost['nouvelElement']."\")
						";
						$res=$this->connexionBdd->requete($sql);
						
						if(mysql_num_rows($res)>0)
						{
							$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de sous-quartier du même nom");
						}
						else
						{
							// ajout
							$this->connexionBdd->requete("
								INSERT INTO sousQuartier (idQuartier,nom)
								VALUES ('".$this->variablesPost['quartier']."',\"".$this->variablesPost['nouvelElement']."\")
							");
						}
					}
					else
					{
						$this->erreurs->ajouter("Erreur : Vous n'avez pas précisé le quartier");
					}
				break;
				case 'newQuartier':
					if(isset($this->variablesPost['ville']) && $this->variablesPost['ville']!='0')
					{
						// est ce que l'enregistrement existe deja ?
						$sql="
							SELECT idQuartier
							FROM quartier
							WHERE idVille = '".$this->variablesPost['ville']."'
							AND LOWER(nom) = LOWER(\"".$this->variablesPost['nouvelElement']."\")
						";
						
						$res=$this->connexionBdd->requete($sql);
						
						if(mysql_num_rows($res)>0)
						{
							$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de quartier du même nom");						
						}
						else
						{
							// ajout
							$this->connexionBdd->requete("
								INSERT INTO quartier (idVille,nom)
								VALUES ('".$this->variablesPost['ville']."',\"".$this->variablesPost['nouvelElement']."\")
							");
						}
					}
					else
					{
						$this->erreurs->ajouter("Erreur : Vous n'avez pas précisé la ville");
					}
				break;
				case 'newVille':
					if(isset($this->variablesPost['pays']) && $this->variablesPost['pays']!='0')
					{
						// est ce que l'enregistrement existe deja ?
						$sql="
							SELECT idVille
							FROM ville
							WHERE idPays = '".$this->variablesPost['pays']."'
							AND LOWER(nom) = LOWER(\"".$this->variablesPost['nouvelElement']."\")
						";
						$res=$this->connexionBdd->requete($sql);
						if(mysql_num_rows($res)>0)
						{
							$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de ville du même nom");
						}
						else
						{
							// ajout
							$this->connexionBdd->requete("
								INSERT INTO ville (idPays,nom)
								VALUES ('".$this->variablesPost['pays']."',\"".$this->variablesPost['nouvelElement']."\")
							");
						}
					}
					else
					{
						$this->erreurs->ajouter("Erreur : Vous n'avez pas précisé le pays");
					}
				break;
				case 'newPays':
					// est ce que l'enregistrement existe deja ?
					$sql = "
						SELECT idPays
						FROM pays
						WHERE LOWER(nom)=LOWER(\"".$this->variablesPost['nouvelElement']."\")
					";
					
					$res=$this->connexionBdd->requete($sql);
					
					if(mysql_num_rows($res)>0)
					{
						$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de pays du même nom");
					}
					else
					{
						// ajout
						$this->connexionBdd->requete("
							INSERT INTO pays (nom) VALUES (\"".$this->variablesPost['nouvelElement']."\")
						");
					}
				break;
			}
		}
		else
		{
			$this->erreurs->ajouter("Erreur: le champ 'intitule' est vide");
		}
	}

	
	// fonction affichant le formulaire permettant aux admins d'ajouter de nouvelles adresses (rue, sousQuartier, Quartier, ....)
	public function afficheFormulaireNouvelleAdresse($criteres=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('nouvelleAdresse'=>'nouvelleAdresseFormulaire.tpl')));

		if(!isset($criteres['typeNew']))
		{
			$criteres['typeNew']='newRue';
		}
		switch ($criteres['typeNew'])
		{
			case 'newRue':
				$t->assign_block_vars('afficheComplement',array());
				$criteres['modeAffichage_rue'] = 1;
			break;
			case 'newSousQuartier':
				$criteres['modeAffichage_sousQuartier'] = 1;
			break;
			case 'newQuartier':
				$criteres['modeAffichage_quartier'] = 1;
			break;
			case 'newVille':
				$criteres['modeAffichage_ville'] = 1;
			break;
			case 'newPays':
				$criteres['modeAffichage_pays'] = 1;
			break;
			default:
				$criteres['modeAffichage_rue'] = 1;
		}
		
		$t->assign_vars(array(
			'urlNewRue'		=>	$this->creerUrl('','ajoutNouvelleAdresse',array('typeNew' => 'newRue')),
			'urlNewSousQuartier'	=>	$this->creerUrl('','ajoutNouvelleAdresse',array('typeNew' => 'newSousQuartier')),
			'urlNewQuartier'	=>	$this->creerUrl('','ajoutNouvelleAdresse',array('typeNew' => 'newQuartier')),
			'urlNewVille'		=>	$this->creerUrl('','ajoutNouvelleAdresse',array('typeNew' => 'newVille')),
			'urlNewPays'		=>	$this->creerUrl('','ajoutNouvelleAdresse',array('typeNew' => 'newPays'))
		));
		
		
		$t->assign_vars(array(
			'afficheChoixAdresse'=>$this->afficheChoixAdresse($criteres),
			'typeNouvelElement'=>$criteres['typeNew'],
			'formAction'=>$this->creerUrl('ajoutNouvelleAdresse')
			));
		
		
		ob_start();
		$t->pparse('nouvelleAdresse');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// fonction réalisant l'ajout d'un nouveau dossier (groupe d'adresses + evenement construction)
	// **********************************************************************************************************************************************************************
	public function ajouterNouveauDossier()
	{
		$mail = new mailObject();
		// ******************************************************
		// en premier lieu on ajoute l'adresse
		// ******************************************************
		$arrayIdAdresses = array();
		if(isset($this->variablesPost['idUnique']) && count($this->variablesPost['idUnique'])>0)
		{

			foreach($this->variablesPost['idUnique'] as $indice => $valueIdUnique)
			{
				if($this->variablesPost['rue'][$valueIdUnique]!='' && $this->variablesPost['rue'][$valueIdUnique]!='0')
				{
					$arrayIdAdresses[] = $this->ajouterAdresseFromArray(array(
														'idPays'=>1,
														'idVille'=>$this->variablesPost['ville'],
														'idQuartier' => $this->variablesPost['quartiers'],
														'idSousQuartier'=>$this->variablesPost['sousQuartiers'],
														'numero'=>$this->variablesPost['numero'][$valueIdUnique],
														'indicatif'=>$this->variablesPost['indicatif'][$valueIdUnique],
														'idRue'=>$this->variablesPost['rue'][$valueIdUnique]
												));
				}
				else
				{
					$arrayIdAdresses[] = $this->ajouterAdresseFromArray(array(
														'idPays'=>1,
														'idVille'=>$this->variablesPost['ville'],
														'idQuartier' => $this->variablesPost['quartiers'],
														'idSousQuartier'=>$this->variablesPost['sousQuartiers'],
														'numero'=>0,
														'indicatif'=>0,
														'idRue'=>0
												));
				
				}
			}
			
			
			// ******************************************************
			// ensuite on ajoute l'evenement
			// ******************************************************
			$evenement=new archiEvenement();
			$arrayRetourEvenementNouveauDossier=$evenement->ajouterEvenementNouveauDossier();
		
			$idEvenementGroupeAdresses=0;
			$idSousEvenement=0;
			
			// s'il n'y a pas eu d'erreurs , on peut faire l'ajout des liaisons entre evenement et adresses
			if(count($arrayRetourEvenementNouveauDossier['errors'])==0 && count($arrayIdAdresses)>0)
			{
				$idEvenementGroupeAdresses = $arrayRetourEvenementNouveauDossier['idEvenementGroupeAdresse'];
				$idSousEvenement = $arrayRetourEvenementNouveauDossier['idSousEvenement'];
				// liaison entre les adresses et l'evenement groupe d'adresses
				$resSupp = $this->connexionBdd->requete("delete from _adresseEvenement where idEvenement = '".$idEvenementGroupeAdresses."'");
				$arrayIdAdresses = array_unique($arrayIdAdresses);
				foreach($arrayIdAdresses as $indice => $id)
				{
					$reqLiaisons = "INSERT INTO _adresseEvenement (idAdresse,idEvenement)
									VALUES ('".$id."','".$idEvenementGroupeAdresses."')
					";
					$resLiaisons = $this->connexionBdd->requete($reqLiaisons);
				}
				
				// envoi d'un mail aux administrateur pour la moderation
				$utilisateur = new archiUtilisateur();
				
				$message="L'utilisateur suivant a créé un nouveau dossier : ";
				$message .= $utilisateur->getMailUtilisateur($this->session->getFromSession('utilisateurConnecte'))."<br>";
				$message .="<a href='".$this->creerUrl('','evenement',array('idEvenement'=>$idEvenementGroupeAdresses))."'>lien vers l'article</a>";
				
				$mail->sendMailToAdministrators($mail->getSiteMail(),'archi-strasbourg.org : un utilisateur a créé un nouveau dossier',$message);
				$retourEvenement = $evenement->afficher($idEvenementGroupeAdresses);
				echo $retourEvenement["html"];
			}
			
			// enfin on regenere les caches
			$cache = new cacheObject();
			$cache->refreshCache();

		}
		else
		{
			$this->erreurs->ajouter("Aucune adresse n'a pu être ajoutée. Vérifiez la saisie du champ.");
		}
	}


	// **********************************************************************************************************************************************************************
	// cette fonction va ajouter une adresse dans la table historiqueAdresses en verifiant que celle ci n'existe pas encore , puis elle renvoi l'id de la nouvelle adresse , si l'adresse existe , elle renvoi l'id de l'adresse existante
	// **********************************************************************************************************************************************************************
	public function ajouterAdresseFromArray($adresse=array())
	{
		$mail = new mailObject();
		if(count($adresse)>0)
		{
			$select ="";
			$leftJoin="";
			
			$numero=$adresse['numero'];
			$indicatif=$adresse['indicatif'];
			
			if($numero != '' && $numero !='0')
			{
				$select .=" AND ha.numero='".$numero."' ";
				if($indicatif!='' and $indicatif!='0')
				{
					$select .=" AND ha.idIndicatif='".$indicatif."' ";
				}
			}
			else
			{
				$select .=" AND ha.numero='0' AND ha.idIndicatif='0' ";
			}
			
			if($adresse['idRue']>0)
			{
				$select .=" AND ha.idRue ='".$adresse['idRue']."' ";
			}
			elseif($adresse['idSousQuartier']>0)
			{
				$select .=" AND ha.idSousQuartier ='".$adresse['idSousQuartier']."' AND ha.idRue='0' ";
			}
			elseif($adresse['idQuartier']>0)
			{
				$select .=" AND ha.idQuartier ='".$adresse['idQuartier']."' AND ha.idRue='0' AND ha.idSousQuartier='0' ";
			}
			elseif($adresse['idVille']>0)
			{
				$select .=" AND ha.idVille ='".$adresse['idVille']."' AND ha.idRue='0' AND ha.idSousQuartier='0' AND ha.idQuartier='0' ";
			}
			
			$reqVerifAdresse = "SELECT ha.idAdresse as idAdresse,ha.idHistoriqueAdresse as idHistoriqueAdresse
								FROM historiqueAdresse ha, historiqueAdresse ha2
								".$leftJoin."
								WHERE 1=1
								".$select."
								AND ha2.idAdresse = ha.idAdresse
								GROUP BY ha.idAdresse , ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
								";
			
			$resVerifAdresse = $this->connexionBdd->requete($reqVerifAdresse);
			
			if(mysql_num_rows($resVerifAdresse)==1)
			{
				//l'adresse existe deja , on recupere son id
				$fetchAdresse = mysql_fetch_assoc($resVerifAdresse);
				$idAdresse = $fetchAdresse['idAdresse'];
			}
			elseif(mysql_num_rows($resVerifAdresse)>1)
			{
				// il y a des adresses redondantes : envoyer un mail 
				$this->erreurs->ajouter("Il existe une adresse redondante dans la base de donnée , veuillez contacter l'administrateur");
				$fetchAdresse = mysql_fetch_assoc($resVerifAdresse);
				$idAdresse =$fetchAdresse['idAdresse']; // on prend la premiere
			}			
			else
			{
				// on enregistre la nouvelle adresse et on renvoi son id
				$newIdAdresse = $this->getNewIdAdresse();
				
				if($adresse['idRue']>0)
				{
					$idRue = $adresse['idRue'];
					$idSousQuartier = 0;
					$idQuartier = 0;
					$idVille = 0;
					$idPays = 0;
				}
				elseif($adresse['idSousQuartier']>0)
				{
					$idRue = 0;
					$idSousQuartier = $adresse['idSousQuartier'];
					$idQuartier = 0;
					$idVille = 0;
					$idPays = 0;
					$numero="";
					$indicatif="";
				}
				elseif($adresse['idQuartier']>0)
				{
					$idRue = 0;
					$idSousQuartier = 0;
					$idQuartier = $adresse['idQuartier'];
					$idVille = 0;
					$idPays = 0;
					$numero="";
					$indicatif="";
				}
				elseif($adresse['idVille']>0)
				{
					$idRue = 0;
					$idSousQuartier = 0;
					$idQuartier = 0;
					$idVille = $adresse['idVille'];
					$idPays = 0;
					$numero="";
					$indicatif="";
				}
				
				
				// recuperation du nom de la rue , le complément et l'indicatif
				$reqRue = "SELECT idRue, nom, prefixe FROM rue WHERE idRue = '".$idRue."'";
				$resRue = $this->connexionBdd->requete($reqRue);
				$fetchRue = mysql_fetch_assoc($resRue);
				
				$idUtilisateur = 0;
				$auth = new archiAuthentification();
				if($auth->estConnecte())
				{
					$idUtilisateur = $auth->getIdUtilisateur();
				}
				
				
				$reqInsertAdresse="INSERT INTO historiqueAdresse (idAdresse,date,idRue,numero, idQuartier,idSousQuartier,idPays, idVille,nom,idIndicatif,idUtilisateur)
									VALUES ('".$newIdAdresse."',now(),'".$idRue."','".$numero."','".$idQuartier."','".$idSousQuartier."','".$idPays."','".$idVille."',\"".$numero.' '.$fetchRue['prefixe'].' '.$fetchRue['nom']."\",'".$indicatif."','".$idUtilisateur."')
				";
				$resInsertAdresse = $this->connexionBdd->requete($reqInsertAdresse);
				$idAdresse = $newIdAdresse;
				
				// ****************************************************************************************************************************************************************
				// envoi du mail de notification aux administrateurs
				$message = "Une nouvelle adresse a été ajoutée : ".$this->getIntituleAdresse(array('nomRue'=>$fetchRue['nom'],'idIndicatif'=>$indicatif,'numero'=>$numero,'prefixeRue'=>$fetchRue['prefixe']));
				
				// recuperation des infos sur l'utilisateur qui fais la modif
				$utilisateur = new archiUtilisateur();
				$arrayInfosUtilisateur = $utilisateur->getArrayInfosFromUtilisateur($this->session->getFromSession('utilisateurConnecte'));
				
				$message .="<br>".$arrayInfosUtilisateur['nom']." - ".$arrayInfosUtilisateur['prenom']." - ".$arrayInfosUtilisateur['mail']."<br>";

				$mail->sendMailToAdministrators($mail->getSiteMail(),"Ajout d'une adresse sur archi-strasbourg.org",$message," and alerteMail='1' ");
				
				// ****************************************************************************************************************************************************************
				// envoi du mail aux utilisateurs dont la notification est activée (alerteMail)
				// ****************************************************************************************************************************************************************
				$reqUtilisateurs = "SELECT idUtilisateur,mail FROM utilisateur WHERE alerteMail='1' and compteActif='1' and estAdmin='0'";
				$resUtilisateurs = $this->connexionBdd->requete($reqUtilisateurs);
				while($fetchUtilisateurs = mysql_fetch_assoc($resUtilisateurs))
				{
					if($fetchUtilisateurs['idUtilisateur']!=$auth->getIdUtilisateur())
					{
						$message="";
						$message.="Un utilisateur a ajouté une adresse sur le site : <br>";
						$message.=$this->getIntituleAdresse(array('nomRue'=>$fetchRue['nom'],'idIndicatif'=>$indicatif,'numero'=>$numero,'prefixeRue'=>$fetchRue['prefixe']));
						$mail->sendMail($mail->getSiteMail(),$fetchUtilisateurs['mail'],"Une nouvelle adresse a été ajouté sur le site",$message);
					}
				}
				// ****************************************************************************************************************************************************************
				
			}
		}
		else
		{
			// erreur dans le tableau d'adresse (ajouterAdressesFromArray)
			$this->erreurs->ajouter("Erreur dans la saisie de l'adresse");
			$idAdresse = 0;
		}

		return $idAdresse;
	}

	public function getAdressesFromImage($idImage=0)
	{
			$query = "
					SELECT 	ha.idAdresse as idAdresse,
							ha.idRue as idRue,
							ha.numero as numero,
							ha.idQuartier as idQuartier,
							ha.idSousQuartier as idSousQuartier,
							ha.idPays as idPays,
							ha.idVille as idVille,
							v.nom as nomVille,
							q.nom as nomQuartier,
							sq.nom as nomSousQuartier,
							r.nom as nomRue,
							ha.idIndicatif as idIndicatif,
							r.prefixe as prefixeRue
					FROM historiqueAdresse ha2, historiqueAdresse ha
					RIGHT JOIN _adresseImage ai ON ai.idAdresse = ha.idAdresse
					LEFT JOIN rue r ON r.idRue = ha.idRue
					LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
					LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
					LEFT JOIN ville v ON v.idVille = ha.idVille
					LEFT JOIN pays p ON p.idPays = ha.idPays
					WHERE ai.idImage = '".$idImage."'
					AND ha2.idAdresse = ha.idAdresse
					GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
					HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
		";
		return $this->connexionBdd->requete($query);
	}
	
	
	public function supprimerIdAdresseFromGroupeAdresse($idEvenementGroupeAdresse=0,$idAdresse=0)
	{
		$req = "DELETE FROM _adresseEvenement WHERE idEvenement='".$idEvenementGroupeAdresse."' and idAdresse='".$idAdresse."'";
		$res = $this->connexionBdd->requete($req);
	}
	
	// **********************************************************************************************************************************************************************
	// fonction recuperant les adresses d'un groupe d'adresses dans un tableau
	// **********************************************************************************************************************************************************************
	public function getAdressesFromEvenementGroupeAdresses($idEvenementGroupeAdresse=0)
	{
		$query = "
					SELECT 	ha.idAdresse as idAdresse,
							ha.idRue as idRue,
							ha.numero as numero,
							ha.idQuartier as idQuartier,
							ha.idSousQuartier as idSousQuartier,
							ha.idPays as idPays,
							ha.idVille as idVille,
							v.nom as nomVille,
							q.nom as nomQuartier,
							sq.nom as nomSousQuartier,
							r.nom as nomRue,
							ha.idIndicatif as idIndicatif,
							r.prefixe as prefixeRue
					FROM historiqueAdresse ha2, historiqueAdresse ha
					RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
					LEFT JOIN rue r ON r.idRue = ha.idRue
					LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
					LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
					LEFT JOIN ville v ON v.idVille = ha.idVille
					LEFT JOIN pays p ON p.idPays = ha.idPays
					WHERE ae.idEvenement = '".$idEvenementGroupeAdresse."'
					AND ha2.idAdresse = ha.idAdresse
					GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
					HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
					ORDER BY ha.idAdresse
		";
		return $this->connexionBdd->requete($query);
	}
	
	// **********************************************************************************************************************************************************************
	// cette fonction renvoi les adresses d'un evenement
	// **********************************************************************************************************************************************************************
	public function getIdAdressesFromIdEvenement($params=array())
	{
		$req = "
				SELECT  distinct ae.idAdresse as idAdresse
				FROM _adresseEvenement ae
				LEFT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = '".$params['idEvenement']."'
				WHERE ae.idEvenement = ee.idEvenement
		";
		
		return $req;
	}
	// **********************************************************************************************************************************************************************
	// cette fonction affiche le formulaire d'ajout d'adresse multiple
	// c'est a dire le formulaire d'ajout d'un dossier , sans la partie evenement
	// **********************************************************************************************************************************************************************
	public function afficheAjoutAdressesMultiple($idEvenementGroupeAdresse=0)
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('ajoutAdressesMultiple'=>'nouveauDossier.tpl')));
		
		
		// recapitulatif de(s) l'adresse(s) deja liee(s)
		$t->assign_block_vars('isNotAjoutNouvelleAdresse',array());
		$t->assign_vars(array('recapitulatifAdresse'=>$this->afficherRecapitulatifAdresses($idEvenementGroupeAdresse)));
		
		// affichage du block d'adresses
		$t->assign_block_vars('isNotAjoutSousEvenement',array());
		
		// recuperation des adresses de l'evenement groupe d'adresse
		$resAdresses = $this->getAdressesFromEvenementGroupeAdresses($idEvenementGroupeAdresse);
		
		
		
		// parcours des adresses recuperées de la base de données pour voir si certaines viennent d'autres quartier , ville ou sousquartier ==> si c'est le cas il faudra gerer l'affichage plusieurs formulaire , un par groupe de sousquartier identiques
		if(mysql_num_rows($resAdresses)>0)
			mysql_data_seek($resAdresses,0);
		
		$arrayVilles		=array();
		$arrayQuartiers 	=array();
		$arraySousQuartiers	=array();
		
		while($fetchAdressesVerif = mysql_fetch_assoc($resAdresses))
		{
			$arrayVilles[]=$fetchAdressesVerif['idVille'];
			$arrayQuartiers[]=$fetchAdressesVerif['idQuartier'];
			$arraySousQuartiers[]=$fetchAdressesVerif['idSousQuartier'];
		}
		
		$arrayVilles   = array_unique($arrayVilles);
		$arrayQuartiers = array_unique($arrayQuartiers);
		$arraySousQuartiers = array_unique($arraySousQuartiers);
		if(count($arrayVilles)>1 || count($arrayQuartiers)>1 || count($arraySousQuartiers)>1)
		{
			echo "Attention il y a des adresses qui ne font pas partie du même quartier.<br>";
			// affichage de plusieurs formulaires pour chaque adresse de rue qui n'appartient pas au meme ensemble
			// a faire ?? ou limiter les groupes d'adresses au adresses appartenant à la meme rue
		}
		else
		{
			// toutes les adresses appartiennent au meme quartier, sousQuartier,ville 
			// on reprend le premier enregistrement de la requete pour chercher les infos ville, quartier, sousquartier a assigner au formulaire
			if(mysql_num_rows($resAdresses)>0)
				mysql_data_seek($resAdresses,0);
			$fetchInfosAdresse = mysql_fetch_assoc($resAdresses);
			
			// l'adresse concerne t elle une rue, un quartier , un sous quartier, une ville ... 
			// pour l'instant on considere que cela concerne une rue avec son numero
			if($fetchInfosAdresse['idRue']!='0')
			{
				// recherche de la ville, du quartier et sous quartier
				
				$infosNomsAdresse 	= $this->getAdresseComplete($fetchInfosAdresse['idRue'],'rue');
				$infosIds 			= $this->getArrayAdresseFrom($fetchInfosAdresse['idRue'],'rue');
				
				$t->assign_vars(array(
										'ville'=>$infosIds['ville'],
										'villetxt'=>$infosNomsAdresse['ville']
				));
			
				// assignation du quartier
				$resQuartiers=$this->connexionBdd->requete("SELECT idQuartier,nom FROM quartier WHERE idVille = '".$infosIds['ville']."' order by nom");
				while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
				{
					$selected="";
					if($infosIds['quartier']==$fetchQuartiers['idQuartier'])
						$selected = " selected";
					
					if($fetchQuartiers['nom']!='autre')
					{
						$t->assign_block_vars("isNotAjoutSousEvenement.quartiers",array(
																'nom'=>$fetchQuartiers['nom'],
																'id'=>$fetchQuartiers['idQuartier'],
																'selected'=>$selected
														));
					}
				}
				
				$t->assign_vars(array('onChangeListeQuartier'=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'listeSousQuartier')"));
				// assignation du sousQuartier
				$resSousQuartiers=$this->connexionBdd->requete("SELECT idSousQuartier,nom FROM sousQuartier WHERE idQuartier = '".$infosIds['quartier']."' order by nom");
				while($fetchSousQuartiers = mysql_fetch_assoc($resSousQuartiers))
				{
					$selected="";
					if($infosIds['sousQuartier']==$fetchSousQuartiers['idSousQuartier'])
						$selected=" selected";
					
					if($fetchSousQuartiers['nom']!='autre')
					{	
						$t->assign_block_vars("isNotAjoutSousEvenement.sousQuartiers",array(
																'nom'=>$fetchSousQuartiers['nom'],
																'id'=>$fetchSousQuartiers['idSousQuartier'],
																'selected'=>$selected
														));
					}
				}
			}
			elseif($fetchInfosAdresse['idSousQuartier']!='0')
			{
				// recherche de la ville, du quartier et sous quartier
				
				$infosNomsAdresse 	= $this->getAdresseComplete($fetchInfosAdresse['idSousQuartier'],'sousQuartier');
				$infosIds 			= $this->getArrayAdresseFrom($fetchInfosAdresse['idSousQuartier'],'sousQuartier');
				
				$t->assign_vars(array(
										'ville'=>$infosIds['ville'],
										'villetxt'=>$infosNomsAdresse['ville']
				));
				
				// assignation du quartier
				$resQuartiers=$this->connexionBdd->requete("SELECT idQuartier,nom FROM quartier WHERE idVille = '".$infosIds['ville']."' order by nom");
				while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
				{
					$selected="";
					if($infosIds['quartier']==$fetchQuartiers['idQuartier'])
						$selected = " selected";
					
					if($fetchQuartiers['nom']!='autre')
					{
						$t->assign_block_vars("isNotAjoutSousEvenement.quartiers",array(
																'nom'=>$fetchQuartiers['nom'],
																'id'=>$fetchQuartiers['idQuartier'],
																'selected'=>$selected
														));
					}
				}
				
				$t->assign_vars(array('onChangeListeQuartier'=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'listeSousQuartier')"));
				// assignation du sousQuartier
				$resSousQuartiers=$this->connexionBdd->requete("SELECT idSousQuartier,nom FROM sousQuartier WHERE idQuartier = '".$infosIds['quartier']."' order by nom");
				while($fetchSousQuartiers = mysql_fetch_assoc($resSousQuartiers))
				{
					$selected="";
					if($infosIds['sousQuartier']==$fetchSousQuartiers['idSousQuartier'])
						$selected=" selected";
					
					if($fetchSousQuartiers['nom']!='autre')
					{	
						$t->assign_block_vars("isNotAjoutSousEvenement.sousQuartiers",array(
																'nom'=>$fetchSousQuartiers['nom'],
																'id'=>$fetchSousQuartiers['idSousQuartier'],
																'selected'=>$selected
														));
					}
				}
				
			}
			elseif($fetchInfosAdresse['idQuartier']!='0')
			{
				// recherche de la ville, du quartier et sous quartier
				
				$infosNomsAdresse 	= $this->getAdresseComplete($fetchInfosAdresse['idQuartier'],'quartier');
				$infosIds 			= $this->getArrayAdresseFrom($fetchInfosAdresse['idQuartier'],'quartier');
				
				$t->assign_vars(array(
										'ville'=>$infosIds['ville'],
										'villetxt'=>$infosNomsAdresse['ville']
				));
				
				// assignation du quartier
				$resQuartiers=$this->connexionBdd->requete("SELECT idQuartier,nom FROM quartier WHERE idVille = '".$infosIds['ville']."' order by nom");
				while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
				{
					$selected="";
					if($infosIds['quartier']==$fetchQuartiers['idQuartier'])
						$selected = " selected";
					
					if($fetchQuartiers['nom']!='autre')
					{
						$t->assign_block_vars("isNotAjoutSousEvenement.quartiers",array(
																'nom'=>$fetchQuartiers['nom'],
																'id'=>$fetchQuartiers['idQuartier'],
																'selected'=>$selected
														));
					}
				}
				
				$t->assign_vars(array('onChangeListeQuartier'=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'listeSousQuartier')"));
				// assignation du sousQuartier
				$resSousQuartiers=$this->connexionBdd->requete("SELECT idSousQuartier,nom FROM sousQuartier WHERE idQuartier = '".$infosIds['quartier']."' order by nom");
				while($fetchSousQuartiers = mysql_fetch_assoc($resSousQuartiers))
				{
					$selected="";
					if($infosIds['sousQuartier']==$fetchSousQuartiers['idSousQuartier'])
						$selected=" selected";
					
					if($fetchSousQuartiers['nom']!='autre')
					{	
						$t->assign_block_vars("isNotAjoutSousEvenement.sousQuartiers",array(
																'nom'=>$fetchSousQuartiers['nom'],
																'id'=>$fetchSousQuartiers['idSousQuartier'],
																'selected'=>$selected
														));
					}
				}
			}
			elseif($fetchInfosAdresse['idVille']!='0')
			{
				$infosNomsAdresse 	= $this->getAdresseComplete($fetchInfosAdresse['idVille'],'ville');
				$infosIds 			= $this->getArrayAdresseFrom($fetchInfosAdresse['idVille'],'ville');
				
				$t->assign_vars(array(
										'ville'=>$infosIds['ville'],
										'villetxt'=>$infosNomsAdresse['ville']
				));
				
				// assignation du quartier
				$resQuartiers=$this->connexionBdd->requete("SELECT idQuartier,nom FROM quartier WHERE idVille = '".$infosIds['ville']."' order by nom");
				while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
				{
					$selected="";
					if($infosIds['quartier']==$fetchQuartiers['idQuartier'])
						$selected = " selected";
					
					if($fetchQuartiers['nom']!='autre')
					{
						$t->assign_block_vars("isNotAjoutSousEvenement.quartiers",array(
																'nom'=>$fetchQuartiers['nom'],
																'id'=>$fetchQuartiers['idQuartier'],
																'selected'=>$selected
														));
					}
				}
				
				$t->assign_vars(array('onChangeListeQuartier'=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'listeSousQuartier')"));
				// assignation du sousQuartier
				$resSousQuartiers=$this->connexionBdd->requete("SELECT idSousQuartier,nom FROM sousQuartier WHERE idQuartier = '".$infosIds['quartier']."' order by nom");
				while($fetchSousQuartiers = mysql_fetch_assoc($resSousQuartiers))
				{
					$selected="";
					if($infosIds['sousQuartier']==$fetchSousQuartiers['idSousQuartier'])
						$selected=" selected";
					
					if($fetchSousQuartiers['nom']!='autre')
					{	
						$t->assign_block_vars("isNotAjoutSousEvenement.sousQuartiers",array(
																'nom'=>$fetchSousQuartiers['nom'],
																'id'=>$fetchSousQuartiers['idSousQuartier'],
																'selected'=>$selected
														));
					}
				}
			}
		}
		
		
		// parcours des adresses
		
		$numLigne=0;
		if(isset($this->variablesPost['idUnique']))
		{
			foreach($this->variablesPost['idUnique'] as $indice =>$valueIdUnique)
			{
				if((isset($this->variablesGet['supprAdresse']) && $this->variablesGet['supprAdresse']==$valueIdUnique))
				{
					//
				}
				else
				{
					$arrayAdresse[$numLigne]['idAdresse']	=0;
					$arrayAdresse[$numLigne]['txt'] 		= $this->variablesPost['ruetxt'][$valueIdUnique];
					$arrayAdresse[$numLigne]['id']  		= $this->variablesPost['rue'][$valueIdUnique];
					$arrayAdresse[$numLigne]['numero']  	= $this->variablesPost['numero'][$valueIdUnique];
					$arrayAdresse[$numLigne]['indicatif']   = $this->variablesPost['indicatif'][$valueIdUnique];
					$numLigne++;
				}
			}
			
			if(isset($this->variablesPost['ajouterAdresse']))
			{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
			}
			
			if(count($this->variablesPost['idUnique'])==1 && isset($this->variablesPost['enleverAdresse']))
			{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
			}
		}
		else
		{
			$resAdresses = $this->getAdressesFromEvenementGroupeAdresses($idEvenementGroupeAdresse);
			if(mysql_num_rows($resAdresses)>0 && !isset($this->variablesPost['ajouterAdresse']))
			{
				mysql_data_seek($resAdresses,0);
				while($fetchAdresses = mysql_fetch_assoc($resAdresses))
				{
					$arrayAdresse[$numLigne]['idAdresse']  =  $fetchAdresses['idAdresse'];
					$arrayAdresse[$numLigne]['txt'] 		= $fetchAdresses['nomRue'];
					$arrayAdresse[$numLigne]['id']  		= $fetchAdresses['idRue'];
					$arrayAdresse[$numLigne]['numero']  	= $fetchAdresses['numero'];
					$arrayAdresse[$numLigne]['indicatif'] 	= $fetchAdresses['idIndicatif'];
					$numLigne++;
				}
			}
			else
			{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
			}
		}
		
		for($i=0 ; $i<$numLigne ; $i++)
		{
			// affichage des indicatifs pour chaque adresse
			
			$t->assign_block_vars("isNotAjoutSousEvenement.adresses",array(
													'idUnique'					=> $i,
													'idAdresse'					=> $arrayAdresse[$i]['idAdresse'],
													'onClickBoutonChoixRue' 	=> "document.getElementById('paramChampAppelantRue').value= 'rue".$i."';document.getElementById('iFrameRue').src='".$this->creerUrl('','afficheChoixRue',array('noHeaderNoFooter'=>1))."&archiIdVille='+document.getElementById('ville').value+'&archiIdQuartier='+document.getElementById('quartiers').value+'&archiIdSousQuartier='+document.getElementById('sousQuartiers').value;document.getElementById('calqueRue').style.display='block';",
													"onClickBoutonSupprAdresse"	=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','formulaireGroupeAdresses',array('archiIdEvenementGroupeAdresses'=>$idEvenementGroupeAdresse,'supprAdresse'=>$i))."'",
													"nomRue"				=> $arrayAdresse[$i]["txt"],
													"rue"					=> $arrayAdresse[$i]["id"],
													"numero"				=> $arrayAdresse[$i]["numero"]
												));
			
			// gestion des indicatifs de chaque adresse
			$reqIndicatif = "select idIndicatif, nom from indicatif";
			$resIndicatif = $this->connexionBdd->requete($reqIndicatif);
			while($fetchIndicatif = mysql_fetch_assoc($resIndicatif))
			{
				$selected="";
				//(isset($this->variablesPost['indicatif'.$i]) && $this->variablesPost['indicatif'.$i]!='' && $this->variablesPost['indicatif'.$i]==$fetchIndicatif['idIndicatif']) 	||
				if(($arrayAdresse[$i]['indicatif']==$fetchIndicatif['idIndicatif']))
				{
					$selected = " selected";
				}
				$t->assign_block_vars("isNotAjoutSousEvenement.adresses.indicatifs",array(
												"id"		=>	$fetchIndicatif['idIndicatif'],
												"nom"		=>	$fetchIndicatif['nom'],
												"selected"	=>	$selected
				));
			}
		}
		
		// ***********************************************************************************
		// assignation des boutons
		$t->assign_vars(array(
									'formAction'					=> $this->creerUrl('','formulaireGroupeAdresses',array('archiIdEvenementGroupeAdresses'=>$idEvenementGroupeAdresse)),
									
									'popupVilles'					=> $this->getPopupChoixVille('nouveauDossier'),
									
									'popupRues'						=> $this->getPopupChoixRue('nouveauDossier'),
									
									'onClickBoutonAjouterAdresse'			=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','formulaireGroupeAdresses',array('archiIdEvenementGroupeAdresses'=>$idEvenementGroupeAdresse))."'",									
									'onClickBoutonEnleverAdresse'			=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','formulaireGroupeAdresses',array('archiIdEvenementGroupeAdresses'=>$idEvenementGroupeAdresse))."'",
									'onClickBoutonValider'					=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('enregistreGroupeAdresses','',array('archiIdEvenementGroupeAdresses'=>$idEvenementGroupeAdresse))."';testAdresseValideAndSubmit('formAjoutDossier');",
									
									'typeBoutonValidation'=>"button",
										
									'onClickBoutonChoixVille'		=>"document.getElementById('paramChampAppelantVille').value='ville';document.getElementById('calqueVille').style.display='block';",
									
									'onChangeListeQuartier'			=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('listeQuartier').value,'listeSousQuartiers')",
									'popupAttente'					=>$this->getPopupAttente()
							));
		
		
		// ***********************************************************************************
		// messages d'aide contextuelle
		$helpMessages = $this->getHelpMessages('helpAdresse');
		
		foreach($helpMessages as $fieldName => $message)
		{
			$t->assign_vars(array($fieldName=>$message));
		}
		// ***********************************************************************************
		
			
		ob_start();
		$t->pparse('ajoutAdressesMultiple');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}

	// **********************************************************************************************************************************************************************
	// recupere la liste des rues d'un quartier, sous quartier , ville 
	// **********************************************************************************************************************************************************************
	public function getIdRuesFrom($id,$type='')
	{
	
		$arrayIdRues=array();
		
		switch($type)
		{
			case 'ville':
				$reqVilles = "
									SELECT distinct r.idRue as idRue, lower(substr(r.nom,1,1)) as lettre
									FROM rue r 
									RIGHT JOIN historiqueAdresse ha ON ha.idRue = r.idRue
									RIGHT JOIN sousQuartier sq ON sq.idSousQuartier = r.idSousQuartier
									RIGHT JOIN quartier q ON q.idQuartier = sq.idQuartier
									RIGHT JOIN ville v ON q.idVille = v.idVille
									WHERE v.idVille = '".$id."'
									AND r.idRue IS NOT NULL
									ORDER BY lettre
				";
				
				$resVilles = $this->connexionBdd->requete($reqVilles);
				
				while($fetchVilles = mysql_fetch_assoc($resVilles))
				{
					$arrayIdRues[] = $fetchVilles['idRue'];
				}
			break;
			case 'pays':
				$reqVilles = "
									SELECT distinct r.idRue as idRue, lower(substr(r.nom,1,1)) as lettre
									FROM rue r 
									RIGHT JOIN historiqueAdresse ha ON ha.idRue = r.idRue
									RIGHT JOIN sousQuartier sq ON sq.idSousQuartier = r.idSousQuartier
									RIGHT JOIN quartier q ON q.idQuartier = sq.idQuartier
									RIGHT JOIN ville v ON q.idVille = v.idVille
									WHERE v.idPays = '".$id."'
									AND r.idRue IS NOT NULL
									ORDER BY lettre
				";
				
				$resVilles = $this->connexionBdd->requete($reqVilles);
				
				while($fetchVilles = mysql_fetch_assoc($resVilles))
				{
					$arrayIdRues[] = $fetchVilles['idRue'];
				}
			break;
			case 'quartier':
			
			break;
			
			case 'sousQuartier':
			
			break;
		}
		
		return $arrayIdRues;
	}
	
	// **********************************************************************************************************************************************************************
	// renvoi la liste des quartiers d'une ville
	// **********************************************************************************************************************************************************************
	public function getIdQuartiersFrom($id,$type='')
	{
		$arrayIdQuartier=array();
		switch($type)
		{
			case 'ville':
				$reqQuartiers = "	SELECT distinct q.idQuartier as idQuartier 
									FROM quartier q 
									RIGHT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier
									RIGHT JOIN rue r ON r.idSousQuartier = sq.idSousQuartier
									RIGHT JOIN historiqueAdresse ha ON ha.idRue = r.idRue
									WHERE q.idVille = '".$id."'
									";
				$resQuartiers = $this->connexionBdd->requete($reqQuartiers);
				while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
				{
					$arrayIdQuartier[] = $fetchQuartiers['idQuartier'];
				}
			break;
		}
		return $arrayIdQuartier;
	}
	
	// **********************************************************************************************************************************************************************
	// affiche les adresses par regroupements
	// quand on clique sur un regroupement , on affiche la liste des elements contenant ce regroupement
	// **********************************************************************************************************************************************************************
	public function afficheListeRegroupee()
	{
		$html="";
		$t=new Template($this->cheminPhysique.$this->cheminTemplates);
		$t->set_filenames((array('listeRegroupee'=>'listeRegroupee.tpl')));
		
		$t->assign_vars(array('liens'=>"<a href='".$this->creerUrl('','listeDossiers',array('modeAffichageListe'=>'parRues'))."'>Par rues de Strasbourg</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href='".$this->creerUrl('','listeDossiers',array('modeAffichageListe'=>'parQuartiers'))."'>Par quartiers de Strasbourg</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href='".$this->creerUrl('','listeDossiers',array('modeAffichageListe'=>'parVilles'))."'>Par villes</a>",
		
		));
				
		$modeAffichageListe = 'default';
		if(isset($this->variablesGet['modeAffichageListe']))
		{
			$modeAffichageListe = $this->variablesGet['modeAffichageListe'];
		}
		
		switch($modeAffichageListe)
		{
			case 'parQuartiers':
				$arrayQuartiers = $this->getIdQuartiersFrom(1,'ville');
				
				$reqNbQuartiers = "SELECT 0 FROM quartier WHERE idQuartier in ('".implode("','",$arrayQuartiers)."')";
				$resNbQuartiers = $this->connexionBdd->requete($reqNbQuartiers);
				// pagination
				$nbEnregistrementTotaux = mysql_num_rows($resNbQuartiers);
				
				// nombre d'images affichées sur une page
				$nbEnregistrementsParPage = 12;
				$arrayPagination=$this->pagination(array(
										'nomParamPageCourante'=>'archiPageCouranteVille',
										'nbEnregistrementsParPage'=>$nbEnregistrementsParPage,
										'nbEnregistrementsTotaux'=>$nbEnregistrementTotaux,
										'typeLiens'=>'noformulaire'
										));
				
				$t->assign_vars(array('pagination'=>$arrayPagination['html']));
				
				$req = "SELECT idQuartier, nom 
						FROM quartier 
						WHERE idQuartier in ('".implode("','",$arrayQuartiers)."')
						and nom<>'autre'
						LIMIT ".$arrayPagination['limitSqlDebut'].",".$nbEnregistrementsParPage;
				
				$tableau = new tableau();
				
				$res = $this->connexionBdd->requete($req);
				while($fetch = mysql_fetch_assoc($res))
				{
					// pour chaque ville on va regarder s'il y a des adresses qui correspondent et on les compte
					$reqCount = "
								SELECT distinct ha.idAdresse
								FROM historiqueAdresse ha2, historiqueAdresse ha
								LEFT JOIN sousQuartier sq ON sq.idQuartier = '".$fetch['idQuartier']."'
								LEFT JOIN rue r	ON r.idSousQuartier = sq.idSousQuartier
								WHERE 
									(ha.idRue = IFNULL(r.idRue , 0)
								OR 	ha.idQuartier = '".$fetch['idQuartier']."'
								OR 	ha.idSousQuartier = IFNULL(sq.idSousQuartier,0))
								AND ha2.idHistoriqueAdresse = ha.idHistoriqueAdresse
								GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
					";
					
					$resCount = $this->connexionBdd->requete($reqCount);
					
					$nbResultats = "(".mysql_num_rows($resCount).")";
				
					
				
					$htmlPhoto='';
					$urlPhoto = $this->getUrlImageFromQuartier($fetch['idQuartier'],'moyen');
					if($urlPhoto!='')
						$htmlPhoto = "<a href='".$this->creerUrl('','adresseListe',array('recherche_quartier'=>$fetch['idQuartier']))."'><img src='".$urlPhoto."' border=0></a>";
										
					$lien = "<a href='".$this->creerUrl('','adresseListe',array('recherche_quartier'=>$fetch['idQuartier']))."'>".$fetch['nom']."</a>".$nbResultats;
					
					$tableau->addValue($htmlPhoto."<br>".$lien);
				}
				
				$t->assign_vars(array('elements'=>$tableau->createHtmlTableFromArray(3)));
			break;
			
			case "parVilles":

				//pagination
				$reqNbVilles = "
						SELECT 0
						FROM ville
						where (idPays = '1' or idPays='2')
						and nom <>'autre'
						";
				$resNbVilles = $this->connexionBdd->requete($reqNbVilles);
				$nbEnregistrementTotaux = mysql_num_rows($resNbVilles);
				
				// nombre d'images affichées sur une page
				$nbEnregistrementsParPage = 12;
				$arrayPagination=$this->pagination(array(
										'nomParamPageCourante'=>'archiPageCouranteVille',
										'nbEnregistrementsParPage'=>$nbEnregistrementsParPage,
										'nbEnregistrementsTotaux'=>$nbEnregistrementTotaux,
										'typeLiens'=>'noformulaire'
										));



				$t->assign_vars(array('pagination'=>$arrayPagination['html']));
				
				$req = "
						SELECT nom,idVille, lower(substr(nom,1,1)) as lettre
						FROM ville
						WHERE (idPays = '1' or idPays='2')
						AND nom<>'autre'
						ORDER BY lettre
						LIMIT ".$arrayPagination['limitSqlDebut'].",".$nbEnregistrementsParPage;
						
				$tableau = new tableau();
	
				$res = $this->connexionBdd->requete($req);
				
				while($fetch = mysql_fetch_assoc($res))
				{
					// pour chaque ville on va regarder s'il y a des adresses qui correspondent et on les compte
					$reqCount = "
								SELECT distinct ha.idAdresse
								FROM historiqueAdresse ha2, historiqueAdresse ha
								LEFT JOIN quartier q ON q.idVille = '".$fetch['idVille']."'
								LEFT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier
								LEFT JOIN rue r	ON r.idSousQuartier = sq.idSousQuartier
								WHERE 
								(	(ha.idRue = IFNULL(r.idRue , 0) and ha.idQuartier=0 and ha.idSousQuartier=0 and ha.idVille=0)
								OR 	
									(ha.idRue=0 and ha.idQuartier = IFNULL(q.idQuartier,0) and ha.idSousQuartier=0 and ha.idVille=0)
								OR 	
									(ha.idRue=0 and ha.idQuartier=0 and ha.idSousQuartier = IFNULL(sq.idSousQuartier,0) and ha.idVille=0)
								OR 	
									(ha.idRue=0 and ha.idQuartier=0 and ha.idSousQuartier =0 and ha.idVille = '".$fetch['idVille']."')
								)
								AND 
								ha2.idHistoriqueAdresse = ha.idHistoriqueAdresse
								GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
					";
					
				
					
					$resCount = $this->connexionBdd->requete($reqCount);
					
					$nbResultats = "(".mysql_num_rows($resCount).")";
					
					
					$htmlPhoto="";
					$urlPhoto = $this->getUrlImageFromVille($fetch['idVille'],'moyen');
					if($urlPhoto!='')
						$htmlPhoto = "<a href='".$this->creerUrl('','adresseListe',array('recherche_ville'=>$fetch['idVille']))."'><img src='".$urlPhoto."' border=0></a>";
					
					$lien = "<a href='".$this->creerUrl('','adresseListe',array('recherche_ville'=>$fetch['idVille']))."'>".$fetch['nom']."</a>".$nbResultats."<br>";
					
					$tableau->addValue($htmlPhoto."<br>".$lien);
					
				}
				
				$t->assign_vars(array('elements'=>$tableau->createHtmlTableFromArray(3)));
				
			break;
			default:
				// DEFAULT : affichage parRues
				// s'il n'y a pas de criteres on affiche les dossiers des rues de strasbourg
				$arrayRues = $this->getIdRuesFrom(1 , 'ville');

				//pagination
				$reqNbRues = "
						SELECT 0
						FROM rue
						WHERE idRue in ('".implode("','",$arrayRues)."')
						";
				$resNbRues = $this->connexionBdd->requete($reqNbRues);
				$nbEnregistrementTotaux = mysql_num_rows($resNbRues);
				
				// nombre d'images affichées sur une page
				$nbEnregistrementsParPage = 12;
				$arrayPagination=$this->pagination(array(
										'nomParamPageCourante'=>'archiPageCouranteVille',
										'nbEnregistrementsParPage'=>$nbEnregistrementsParPage,
										'nbEnregistrementsTotaux'=>$nbEnregistrementTotaux,
										'typeLiens'=>'noformulaire'
										));



				$t->assign_vars(array('pagination'=>$arrayPagination['html']));
				
				$req = "
						SELECT nom,idRue,prefixe, lower(substr(nom,1,1)) as lettre
						FROM rue
						WHERE idRue in ('".implode("','",$arrayRues)."')
						ORDER BY lettre
						LIMIT ".$arrayPagination['limitSqlDebut'].",".$nbEnregistrementsParPage;
						
	
	
				$res = $this->connexionBdd->requete($req);
				
				$tableau = new tableau();
				
				while($fetch = mysql_fetch_assoc($res))
				{
				
					// pour chaque rue on va regarder s'il y a des adresses qui correspondent et on les compte (affichage du nombre de resultats)
					$reqCount = "
								SELECT distinct ha.idAdresse
								FROM historiqueAdresse ha2, historiqueAdresse ha
								WHERE 
									(ha.idRue = ".$fetch['idRue']."
								)
								AND ha2.idHistoriqueAdresse = ha.idHistoriqueAdresse
								GROUP BY ha.idAdresse, ha.idHistoriqueAdresse
								HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
					";
				
					$resCount = $this->connexionBdd->requete($reqCount);
					
					$nbResultats = "(".mysql_num_rows($resCount).")";
				
				
					$htmlPhoto='';
					$urlPhoto = $this->getUrlImageFromRue($fetch['idRue'],'moyen');
					if($urlPhoto!='')
						$htmlPhoto = "<a href='".$this->creerUrl('','adresseListe',array('recherche_rue'=>$fetch['idRue']))."'><img src='".$urlPhoto."' border=0></a>";
				
					$lien = "<a href='".$this->creerUrl('','adresseListe',array('recherche_rue'=>$fetch['idRue']))."'>".$fetch['prefixe']." ".$fetch['nom']."</a>".$nbResultats;
					
					$tableau->addValue($htmlPhoto.'<br>'.$lien);
					
				}
				
				$t->assign_vars(array('elements'=>$tableau->createHtmlTableFromArray(3)));

			break;
			
		}
		
		
		ob_start();
		$t->pparse('listeRegroupee');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// enregistrement des adresses liees a un evenement groupe d'adresses
	// **********************************************************************************************************************************************************************
	public function enregistreGroupeAdresses($idEvenementGroupeAdresses=0)
	{
		$this->connexionBdd->getLock(array('historiqueAdresse','_adresseEvenement'));
		$arrayIdAdresses = array();
		if(isset($this->variablesPost['idUnique']))
		{
			foreach($this->variablesPost['idUnique'] as $indice => $valueIdUnique)
			{
				if($this->variablesPost['rue'][$valueIdUnique]!='' && $this->variablesPost['rue'][$valueIdUnique]!='0')
				{
					$arrayIdAdresses[] = $this->ajouterAdresseFromArray(array(
														'idPays'=>1,
														'idVille'=>$this->variablesPost['ville'],
														'idQuartier' => $this->variablesPost['quartiers'],
														'idSousQuartier'=>$this->variablesPost['sousQuartiers'],
														'numero'=>$this->variablesPost['numero'][$valueIdUnique],
														'indicatif'=>$this->variablesPost['indicatif'][$valueIdUnique],
														'idRue'=>$this->variablesPost['rue'][$valueIdUnique]
												));
				}
				else
				{
					$arrayIdAdresses[] = $this->ajouterAdresseFromArray(array(
														'idPays'=>1,
														'idVille'=>$this->variablesPost['ville'],
														'idQuartier' => $this->variablesPost['quartiers'],
														'idSousQuartier'=>$this->variablesPost['sousQuartiers'],
														'numero'=>0,
														'indicatif'=>0,
														'idRue'=>0
												));
				
				}
			}
		}
		
		// on effaces les liaisons précédentes
		$resDelete = $this->connexionBdd->requete("DELETE FROM _adresseEvenement where idEvenement = '".$idEvenementGroupeAdresses."'");
		
		// on effectue la liaison entre les adresses enregistrées et l'evenement:
		foreach($arrayIdAdresses as $indice => $idAdresse)
		{
			$queryLiaison = "INSERT INTO _adresseEvenement (idAdresse,idEvenement) VALUES ('".$idAdresse."','".$idEvenementGroupeAdresses."')";
			$resLiaison = $this->connexionBdd->requete($queryLiaison);
		}
		
		$evenement = new archiEvenement();
		
		$retourEvenement = $evenement->afficher($idEvenementGroupeAdresses);
		$this->connexionBdd->freeLock(array('historiqueAdresse','_adresseEvenement'));

		// rafraichissement des caches
		$cache = new cacheObject();
		$cache->refreshCache();

		echo $retourEvenement['html'];
	}
	
	// **********************************************************************************************************************************************************************
	// affichage du formulaire d'ajout d'un nouveau dossier (groupe d'adresse + evenement construction)
	// **********************************************************************************************************************************************************************
	public function afficheFormulaireNouveauDossier($parametres=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('nouveauDossier'=>'nouveauDossier.tpl')));
		
		// assignation du titre de la page
		$t->assign_vars(array('titrePage'=>"Ajout d'une nouvelle adresse"));
		
		
		// ********
		// on affiche la partie ajout d'une adresse 
		$t->assign_block_vars('isNotAjoutSousEvenement',array());
		// ********
		
		// ********
		// on affiche la partie "ajout d'un evenement"	
		$t->assign_block_vars('afficheAjoutEvenement',array());
		// *******
		
		// ******
		// si la personne n'est pas admin elle verra une version simplifiée du formulaire
		$authentification = new archiAuthentification();
		if($authentification->estConnecte() && $authentification->estAdmin())
		{
			$t->assign_block_vars('afficheAjoutEvenement.isAdmin',array());
		}
		else
		{
			$t->assign_block_vars('afficheAjoutEvenement.isNotAdmin',array());
		}
		// ******
		
		$typeStructure=0;
		if(isset($this->variablesPost['typeStructure']) && $this->variablesPost['typeStructure']!='')
			$typeStructure = $this->variablesPost['typeStructure'];
		
		
		$groupeTypeEvenement=2; // par defaut on selectionne les evenement de type 'travaux'
		if(isset($this->variablesPost['typeGroupeEvenement']) && $this->variablesPost['typeGroupeEvenement']!='')
			$groupeTypeEvenement = $this->variablesPost['typeGroupeEvenement'];
		
		$typeEvenement=0;
		if(isset($this->variablesPost['typeEvenement']) && $this->variablesPost['typeEvenement']!='')
			$typeEvenement = $this->variablesPost['typeEvenement'];
	
		$ISMH=false;
		if(isset($this->variablesPost['ISMH']))
			$ISMH=true;
	
		$MH=false;
		if(isset($this->variablesPost['MH']))
			$MH=true;

		$personnes = array();
		if(isset($this->variablesPost['personnes']) && count($this->variablesPost['personnes'])>0)	
			$personnes = $this->variablesPost['personnes'];
		
		$ville = 0;
		if(isset($this->variablesPost['ville']) && $this->variablesPost['ville']!='0' && $this->variablesPost['ville']!='')
			$ville = $this->variablesPost['ville'];
		
		// ***********************************************************************************
		// recuperation des valeurs des champs textes du formulaire validé, les autres champs sont mis en place individuellement
		$listeChamps = array('titre','source','sourcetxt','dateDebut','dateFin','nbEtages','description','ville','villetxt');
		
		foreach($listeChamps as $indice => $fieldName)
		{
			if(isset($this->variablesPost[$fieldName]) && $this->variablesPost[$fieldName]!='')
			{
				$t->assign_vars(array($fieldName=>$this->variablesPost[$fieldName]));
			}
		}
				
		// gestion du favori de la ville
		if($ville=='0')
		{
			$reqVilleTxt = "select nom from ville where idVille = '".$this->session->getFromSession('idVilleFavoris')."'";
			$resVilleTxt = $this->connexionBdd->requete($reqVilleTxt);
			$fetchVilleTxt = mysql_fetch_assoc($resVilleTxt);
			$t->assign_vars(array('ville'=>$this->session->getFromSession('idVilleFavoris'),'villetxt'=>$fetchVilleTxt['nom']));
			$ville = $this->session->getFromSession('idVilleFavoris');
		}

		// ***********************************************************************************
		// si un idVille existe sur le formulaire , on affiche les quartiers correspondants
		if($ville!=0)
		{
			$resQuartiers = $this->connexionBdd->requete("select idQuartier, nom from quartier where idVille = '".$ville."' order by nom");
			while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
			{
				$selected = "";

				if(isset($this->variablesPost['quartiers']) && $this->variablesPost['quartiers']!='0' && $fetchQuartiers['idQuartier']==$this->variablesPost['quartiers'])
				{	
					$selected=" selected";
				}
				
				if($fetchQuartiers['nom']!='autre')
				{
					$t->assign_block_vars("isNotAjoutSousEvenement.quartiers",array(
															'id'		=>	$fetchQuartiers['idQuartier'],
															'nom'		=>	$fetchQuartiers['nom'],
															'selected'	=>	$selected
														));
				}
			}
		}
		
		// ***********************************************************************************
		// si on a des personnes selectionnees , on les ajoute
		if(count($personnes)>0)
		{
			$listePersonnes = implode("','",$personnes);
			
			$reqPersonnes = "select idPersonne, nom, prenom from personne where idPersonne in ('".$listePersonnes."')";
			$resPersonnes = $this->connexionBdd->requete($reqPersonnes);
			while($fetchPersonnes = mysql_fetch_assoc($resPersonnes))
			{
				$t->assign_block_vars('personnes',array('id'=>$fetchPersonnes['idPersonne'],'nom'=>$fetchPersonnes['nom'].' '.$fetchPersonnes['prenom'],'selected'=>" selected"));
			}
		}
		
		// ***********************************************************************************
		// si un idQuartier existe sur le formulaire on affiche les sous quartier correspondants
		if(isset($this->variablesPost['quartiers']) && $this->variablesPost['quartiers']!='')
		{
			$resSousQuartiers = $this->connexionBdd->requete("select idSousQuartier, nom from sousQuartier where idQuartier = '".$this->variablesPost['quartiers']."' order by nom");
		
			while($fetchSousQuartiers = mysql_fetch_assoc($resSousQuartiers))
			{
				$selected = "";

				if(isset($this->variablesPost['sousQuartiers']) && $this->variablesPost['sousQuartiers']!='0' && $fetchSousQuartiers['idSousQuartier']==$this->variablesPost['sousQuartiers'])
				{	
					$selected=" selected";
				}
				
				if($fetchSousQuartiers['nom']!='autre')
				{
					$t->assign_block_vars("isNotAjoutSousEvenement.sousQuartiers",array(
															'id'		=>	$fetchSousQuartiers['idSousQuartier'],
															'nom'		=>	$fetchSousQuartiers['nom'],
															'selected'	=>	$selected
														));
				}
			}
		}

		
		$numLigne=0;
		if(isset($this->variablesPost['idUnique']))
		{
			foreach($this->variablesPost['idUnique'] as $indice =>$valueIdUnique)
			{
				if((isset($this->variablesGet['supprAdresse']) && $this->variablesGet['supprAdresse']==$valueIdUnique))
				{
					//
				}
				else
				{
					$arrayAdresse[$numLigne]['idAdresse']	=0;
					$arrayAdresse[$numLigne]['txt'] 		= $this->variablesPost['ruetxt'][$valueIdUnique];
					$arrayAdresse[$numLigne]['id']  		= $this->variablesPost['rue'][$valueIdUnique];
					$arrayAdresse[$numLigne]['numero']  	= $this->variablesPost['numero'][$valueIdUnique];
					$arrayAdresse[$numLigne]['indicatif']   = $this->variablesPost['indicatif'][$valueIdUnique];
					$numLigne++;
				}
			}
			
			if(isset($this->variablesPost['ajouterAdresse']))
			{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
			}
			
			if(count($this->variablesPost['idUnique'])==1 && isset($this->variablesPost['enleverAdresse']))
			{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
			}
		}
		else
		{
				$arrayAdresse[$numLigne]['idAdresse']	=0;
				$arrayAdresse[$numLigne]['txt'] 		= "";
				$arrayAdresse[$numLigne]['id']  		= "";
				$arrayAdresse[$numLigne]['numero']  	= "";
				$arrayAdresse[$numLigne]['indicatif'] 	= "";
				$numLigne++;
		}
		
		for($i=0 ; $i<$numLigne ; $i++)
		{
			
			// affichage des indicatifs pour chaque adresse
			
			$t->assign_block_vars("isNotAjoutSousEvenement.adresses",array(
													'idUnique'					=> $i,
													
													'onClickBoutonChoixRue' 	=> "document.getElementById('paramChampAppelantRue').value= 'rue".$i."';document.getElementById('iFrameRue').src='".$this->creerUrl('','afficheChoixRue',array('noHeaderNoFooter'=>1))."&archiIdVille='+document.getElementById('ville').value+'&archiIdQuartier='+document.getElementById('quartiers').value+'&archiIdSousQuartier='+document.getElementById('sousQuartiers').value;document.getElementById('calqueRue').style.top=getScrollHeight()+150;document.getElementById('calqueRue').style.display='block';",
													
													"nomRue"				=> $arrayAdresse[$i]["txt"],
													"rue"					=> $arrayAdresse[$i]["id"],
													"numero"				=> $arrayAdresse[$i]["numero"],
													"onClickBoutonSupprAdresse"	=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','ajoutNouveauDossier',array('supprAdresse'=>$i))."'",
												));
			
			// gestion des indicatifs de chaque adresse
			$reqIndicatif = "select idIndicatif, nom from indicatif";
			$resIndicatif = $this->connexionBdd->requete($reqIndicatif);
			while($fetchIndicatif = mysql_fetch_assoc($resIndicatif))
			{
				$selected="";
				if(isset($this->variablesPost['indicatif'.$i]) && $this->variablesPost['indicatif'.$i]!='' && $this->variablesPost['indicatif'.$i]==$fetchIndicatif['idIndicatif'])
					$selected = " selected";
				
				$t->assign_block_vars("isNotAjoutSousEvenement.adresses.indicatifs",array(
												"id"		=>	$fetchIndicatif['idIndicatif'],
												"nom"		=>	$fetchIndicatif['nom'],
												"selected"	=>	$selected
				));
			
			}
		
		}
		// **************************************************************************************
		// ***********************************************************************************
		// liste des courants architecturaux
		$resCourants =$this->connexionBdd->requete("select idCourantArchitectural,nom from courantArchitectural order by nom");
		$tableauHtml = new tableau();
		
		while($fetchCourants = mysql_fetch_assoc($resCourants))
		{
			$checked ="";
			if(isset($this->variablesPost["courantArchitectural"]) && in_array($fetchCourants["idCourantArchitectural"],$this->variablesPost["courantArchitectural"]))
			{
				$checked = " checked";
			}
			
			$tableauHtml->addValue("<input type='checkbox' name='courantArchitectural[]' value='".$fetchCourants["idCourantArchitectural"] ."' ".$checked.">&nbsp;".$fetchCourants['nom']); 
		}
		
		$t->assign_vars(array('listeCourantsArchitecturaux'=>$tableauHtml->createHtmlTableFromArray(3,'white-space:nowrap;border:1px solid #000000;','listeCourantsArchitecturaux')));
		
		// ***********************************************************************************
		// les des types de structures
		$resTypeStructure=$this->connexionBdd->requete("SELECT idTypeStructure, nom FROM typeStructure order by nom");
		while($fetchTypeStructure = mysql_fetch_assoc($resTypeStructure))
		{
			$selected="";
			if($typeStructure!='' && $typeStructure==$fetchTypeStructure["idTypeStructure"] || ($typeStructure=="" && $fetchTypeStructure["idTypeStructure"]==$this->getIdTypeStructureImmeuble()))
			{
				$selected=" selected";
			}
			$t->assign_block_vars('afficheAjoutEvenement.typesStructure',array(
															'id'=>$fetchTypeStructure["idTypeStructure"],
															'nom'=>$fetchTypeStructure["nom"],
															'selected'=>$selected
													));
		}
		
		
		// ***********************************************************************************
		// le type de groupe d'evenement
		// 1 - culturel
		// 2 - travaux
		if($groupeTypeEvenement=='2')
		{
			 $t->assign_vars(array('checkedTypeEvenement2'=>" checked"));
		}
		elseif($groupeTypeEvenement=='1')
		{
			 $t->assign_vars(array('checkedTypeEvenement1'=>" checked"));
		}
		
		$t->assign_vars(array('onClickTypeEvenement1'=>"appelAjax('".$this->creerUrl('','afficheSelectTypeEvenement',array('noHeaderNoFooter'=>1,'archiTypeGroupeEvenement'=>'1'))."','typeEvenement');document.getElementById('afficheChampsSupplementairesCulturel').style.display='block';document.getElementById('afficheChampsSupplementairesTravaux').style.display='none';"));
		$t->assign_vars(array('onClickTypeEvenement2'=>"appelAjax('".$this->creerUrl('','afficheSelectTypeEvenement',array('noHeaderNoFooter'=>1,'archiTypeGroupeEvenement'=>'2'))."','typeEvenement');document.getElementById('afficheChampsSupplementairesTravaux').style.display='block';document.getElementById('afficheChampsSupplementairesCulturel').style.display='none';"));
			
		
		// ***********************************************************************************
		// les type d'evenements
		// par defaut on selectionne le typeEvenement=2 (travaux)
		$resTypeEvenement = $this->connexionBdd->requete("SELECT idTypeEvenement,nom FROM typeEvenement where groupe = '".$groupeTypeEvenement."'");
		while($fetchTypeEvenement = mysql_fetch_assoc($resTypeEvenement))
		{
			$selected="";
			if($typeEvenement!="" && $typeEvenement==$fetchTypeEvenement["idTypeEvenement"])
			{
				$selected = "selected";
			}

			$t->assign_block_vars('afficheAjoutEvenement.typesEvenement',array(
														'id'=>$fetchTypeEvenement['idTypeEvenement'],
														'nom'=>$fetchTypeEvenement['nom'],
														'selected'=>$selected
												));
		}
		
		// ***********************************************************************************
		// ISMH   (inscrit au s des monuments historiques)
		// MH (monument historique)
		if($ISMH)
			$t->assign_vars(array('ISMHchecked'=>' checked'));
		
		if($MH)
			$t->assign_vars(array('MHchecked'=>' checked'));
		
		// ***********************************************************************************
		$recherche = new archiRecherche();
		$source = new archiSource();
		
		$t->assign_vars(array(
									'formAction'					=> $this->creerUrl('ajoutNouveauDossier'),
									
									'popupCalendrier'				=> $this->getPopupCalendrier(),
									
									'popupVilles'					=> $this->getPopupChoixVille('nouveauDossier'),
									
									'popupRues'						=> $this->getPopupChoixRue('nouveauDossier'),
									
									'popupSources'					=> $recherche->getPopupChoixSource('nouveauDossier'),
									
									'popupPersonnes'				=> $recherche->getPopupChoixPersonne('nouveauDossier'),
									
									'onClickBoutonAjouterAdresse'			=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','ajoutNouveauDossier')."'",									
									'onClickBoutonEnleverAdresse'			=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('','ajoutNouveauDossier')."'",
									'onClickBoutonValider'					=> "document.getElementById('formAjoutDossier').action='".$this->creerUrl('ajoutNouveauDossier','')."';testAdresseValideAndSubmit('formAjoutDossier');",
									
									
									'typeBoutonValidation'=>"button",
									
									
									'onClickBoutonChoixVille'		=>"document.getElementById('paramChampAppelantVille').value='ville';document.getElementById('calqueVille').style.top=getScrollHeight()+150;document.getElementById('calqueVille').style.display='block';",
									'onChangeListeQuartier'			=>"appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'listeSousQuartier')",
									
									'onClickBoutonChoisirSource' 	=>"document.getElementById('paramChampsAppelantSource').value='source';document.getElementById('calqueSource').style.top=getScrollHeight()+150;document.getElementById('calqueSource').style.display='block';",
									
									'onClickChoixPersonne'			=>"document.getElementById('paramChampsAppelantPersonne').value='personnes';document.getElementById('calquePersonne').style.top=getScrollHeight()+150;document.getElementById('calquePersonne').style.display='block';",
									
									'onClickDateDebut'				=>"document.getElementById('paramChampAppelantDate').value='dateDebut';document.getElementById('calqueDate').style.top=getScrollHeight()+150;document.getElementById('calqueDate').style.display='block';",
									
									'onClickDateFin'				=>"document.getElementById('paramChampAppelantDate').value='dateFin';document.getElementById('calqueDate').style.display='block';",
									
									'styleChampsSupplementaireCulturel'=>"display:none;",
									
									'styleChampsSupplementaireTravaux'=>"display:block;",
									'popupAttente'=>$this->getPopupAttente()
							));
		
		// ******************************************************************************************************************************
		// on recupere les messages d'aide contextuelle et on les affiche : 
		$helpMessages = $this->getHelpMessages("helpEvenement");
		
		foreach($helpMessages as $fieldName => $helpMessage)
		{
			$t->assign_vars(array($fieldName=>$helpMessage));
		}
		
		// ******************************************************************************************************************************
		
		ob_start();
		$t->pparse('nouveauDossier');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// code du calque de la popup choix ville : appel du contenu de l'iframe
	// **********************************************************************************************************************************************************************
	public function getPopupChoixVille($modeAffichage='')
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('popupVille'=>'popupChoixVille.tpl')));
		
		switch($modeAffichage)
		{
			case 'nouveauDossier':
			case 'modifImage':
			case 'modifUtilisateur':
					
				$t->assign_vars(array(
								"iframeSrc"=>$this->creerUrl('','afficheChoixVille',array('noHeaderNoFooter'=>1,'modeAffichage'=>$modeAffichage)),
								"onClose"=>"document.getElementById('calqueVille').style.display='none';"
							));
			break;
		}
		
		ob_start();
		$t->pparse('popupVille');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// contenu de la popup pour le choix d'une ville
	// **********************************************************************************************************************************************************************
	public function afficheChoixVille($lettre='a')
	{

		if(isset($this->variablesGet['archiLettre']) && $this->variablesGet['archiLettre']!='')
			$lettre = $this->variablesGet['archiLettre'];
		
		$modeAffichage="";
		if(isset($this->variablesGet['modeAffichage']) && $this->variablesGet['modeAffichage']!='')
		{
			$modeAffichage = $this->variablesGet['modeAffichage'];
		}
		
		
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeVille'=>'listeVille.tpl')));

		
		$reqNbVille = "
			select 0
			from ville 
			where idPays = '1'
			and lower(substr(nom,1,1))='".$lettre."'
			and nom<>'autre'
			order by nom
		";
		$resNbVille = $this->connexionBdd->requete($reqNbVille);
		
		$nbEnregistrementTotaux = mysql_num_rows($resNbVille);
		
		
		if($nbEnregistrementTotaux ==0)
		{
			// recherche de la premiere lettre ou il y a des resultats
			$reqNbVilleNew = "
					select lower(substr(v.nom,1,1)) as lettre
					from ville v
					WHERE 1=1
					and nom<>'autre'
					order by lettre ASC
					LIMIT 1
					";
			$resNbVilleNew = $this->connexionBdd->requete($reqNbVilleNew);
			$nbEnregistrementTotaux = mysql_num_rows($resNbVilleNew);// nombre d'enregistrements pour la nouvelle lettre courante
			// recuperation de la nouvelle lettre courante
			$fetchNewLettre = mysql_fetch_assoc($resNbVilleNew);
			$lettre = $fetchNewLettre['lettre'];
		}
		
		
		// nombre d'images affichées sur une page
		$nbEnregistrementsParPage = 5;
		$arrayPagination=$this->pagination(array(
										'nomParamPageCourante'=>'archiPageCouranteVille',
										'nbEnregistrementsParPage'=>$nbEnregistrementsParPage,
										'nbEnregistrementsTotaux'=>$nbEnregistrementTotaux,
										'typeLiens'=>'noformulaire'
										));
		
		
		
		// affichage des villes de france
		$reqVille = "
			select idVille,nom,codepostal, lower(substr(nom,1,1)) as lettre
			from ville 
			where idPays = '1'
			and lower(substr(nom,1,1))='".$lettre."'
			and nom<>'autre'
			order by nom,lettre ASC
			LIMIT ".$arrayPagination['limitSqlDebut'].",".$nbEnregistrementsParPage;
			

		$resVille=$this->connexionBdd->requete($reqVille);
		
		
		$html .= $this->afficheListeAlphabetique(array('champ'=>'nom','table'=>'ville','where'=>" and idPays=1 and nom<>'autre' "),$modeAffichage);
		
		$html .=$arrayPagination['html']."<br>";
		
		if($nbEnregistrementTotaux>0)
		{
			mysql_data_seek($resVille,0); // on replace le curseur au debut de la liste des enregistrements
		}
		else
		{
			echo "Pas de résultat.";
		}

		
		
		while($fetchVille = mysql_fetch_assoc($resVille))
		{
				
				switch($modeAffichage)
				{
					case 'modifImage':
									$t->assign_block_vars('villes',array(
													'url'=>"#",
													'onclick'=>"parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value+'txt').value='".addslashes($fetchVille['nom'])."';parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value).value='".$fetchVille['idVille']."';parent.document.getElementById('calqueVille').style.display='none';parent.appelAjax('".$this->creerUrl('','afficheSelectQuartier',array('noHeaderNoFooter'=>1))."&identifiantUnique='+parent.document.getElementById('paramChampVilleIdentifiantUnique').value+'&archiIdVille='+parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value).value,'listeQuartier'+parent.document.getElementById('paramChampVilleIdentifiantUnique').value,true);parent.document.getElementById('sousQuartiers'+parent.document.getElementById('paramChampVilleIdentifiantUnique').value).innerHTML='<option value=0>Aucun</option>';",
													'nom'=>$fetchVille['nom']
													
				));
					break;
					
					case 'nouveauDossier':
					case 'modifUtilisateur':
					default:
									$t->assign_block_vars('villes',array(
													'url'=>"#",
													'onclick'=>"parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value+'txt').value='".addslashes($fetchVille['nom'])."';parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value).value='".$fetchVille['idVille']."';parent.document.getElementById('calqueVille').style.display='none';parent.appelAjax('".$this->creerUrl('','afficheSelectQuartier',array('noHeaderNoFooter'=>1))."&archiIdVille='+parent.document.getElementById(parent.document.getElementById('paramChampAppelantVille').value).value,'listeQuartier',true);parent.document.getElementById('sousQuartiers').innerHTML='<option value=0>Aucun</option>';",
													'nom'=>$fetchVille['nom']
				));
					break;
					
				}
				
				

		}
		
		
		ob_start();
		$t->pparse('listeVille');
		$html.=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	// **********************************************************************************************************************************************************************
	// affichage de la liste alphabetique en fonction du resultat de la requete (on affiche les lettres ou il y a un resultat dans la requete)
	// **********************************************************************************************************************************************************************
	public function afficheListeAlphabetique($criteres=array(),$modeAffichage='')
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeAlphabetique'=>'listeAlphabetique.tpl')));
		
		$join="";
		if(isset($criteres['join']))
			$join = $criteres['join'];
		
		$where="";
		if(isset($criteres['where']))
		{
			$where = 'WHERE 1=1 '.$criteres['where'];
		}
		
		$req = "select distinct lower(substr(".$criteres['champ'].",1,1)) as lettre from ".$criteres['table'].' '.$join.' '.$where.' order by lettre asc';
		
		
		
		$res = $this->connexionBdd->requete($req);
		
		$listeLettres=array();
		while($fetch = mysql_fetch_assoc($res))
		{
			$listeLettres[]=$fetch['lettre'];
		}
		$listeLettres = array_unique($listeLettres);
		
		foreach($listeLettres as $indice => $lettre)
		{
			switch($modeAffichage)
			{
				case "modifImage":				
				case 'nouveauDossier':
				case 'popupVille':
				case 'modifUtilisateur':
					$t->assign_block_vars('lettres',array(
															'lettre'=>$lettre,
															'url'=>$this->creerUrl('','afficheChoixVille',array('noHeaderNoFooter'=>1,'archiLettre'=>$lettre,'modeAffichage'=>$modeAffichage)),
															'onclick'=>''
														));
				break;
				case 'popupRue':
				
						$t->assign_block_vars('lettres',array(
															'lettre'=>$lettre,
															'url'=>"#",
															"onclick"=>"location.href='".$this->creerUrl('','afficheChoixRue',array('noHeaderNoFooter'=>1,'archiLettre'=>$lettre))."&archiIdVille='+document.getElementById('ville').value+'&archiIdQuartier='+document.getElementById('quartier').value+'&archiIdSousQuartier='+document.getElementById('sousQuartier').value;"
														));
				break;
				
				default:
					echo "Erreur : archiAdresse::afficheListeAlphabetique => precisez un mode d'affichage<br>";
				break;
			}
		}
		ob_start();
		$t->pparse('listeAlphabetique');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// affiche le champ select avec la liste des quartiers en fonction d'un parametre get archiIdVille
	// possibilité de passer un identifiant unique dans les parametres GET
	// ou par parametres de fonctions $params['identifiantUnique'] , .... idem pour idVille, idQuartier
	// **********************************************************************************************************************************************************************
	public function afficheSelectQuartier($params=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeQuartiers'=>'listeQuartiers.tpl')));
		

		$fromVille="";
		if(isset($params['idVille']) && $params['idVille']!='')
		{
			$fromVille = " AND idVille='".$params['idVille']."' ";
		}
		elseif(isset($this->variablesGet['archiIdVille']) && $this->variablesGet['archiIdVille']!='')
		{
			$fromVille = " AND idVille='".$this->variablesGet['archiIdVille']."' ";
		}
		elseif(isset($this->variablesGet['idVille']) && $this->variablesGet['idVille']!='')
		{
			$fromVille = " AND idVille='".$this->variablesGet['idVille']."' ";
		}
	
		$resQuartiers=$this->connexionBdd->requete("select idQuartier,nom from quartier where 1=1 and nom<>'autre' ".$fromVille." order by nom");
		while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
		{
				$selected="";
				if(isset($params['idQuartier']) && $params['idQuartier']!='' && $params['idQuartier'] == $fetchQuartiers['idQuartier'])
				{
					$selected=" selected ";
				}
				
				$t->assign_block_vars("quartiers",array(
														'nom'=>$fetchQuartiers['nom'],
														'id'=>$fetchQuartiers['idQuartier'],
														'selected'=>$selected
												));
		}
		
		
		
		// on peut desactiver les mise a jour des elements
		$javascriptSousQuartier = "";
		if(!isset($params['noSousQuartier']) || $params['noSousQuartier']!=true)
		{
			$javascriptSousQuartier ="
								document.getElementById('sousQuartiers').innerHTML='<option value=0>Aucun</option>';
					document.getElementById('sousQuartiers').selectedIndex=0;
					appelAjax('".$this->creerUrl('','afficheSelectSousQuartier',array('noHeaderNoFooter'=>1))."&archiIdQuartier='+document.getElementById('quartiers').value,'champSousQuartier')
			";
		}
		
		$t->assign_vars(array('javascript'=>"
				function onChangeListeQuartier()
				{
					".$javascriptSousQuartier."
				}
		"));
		
		$t->assign_vars(array('onChangeListeQuartier'=>"onChangeListeQuartier();"));
			

		
		ob_start();
		$t->pparse('listeQuartiers');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	
	// **********************************************************************************************************************************************************************
	// affiche le champ select avec la liste des sous quartiers en fonction d'un parametre get archiIdQuartier
	// possibilité de passer un identifiant unique dans les parametres GET
	// ou par parametre de fonction : identifiantUnique, idQuartier, idSousQuartier selectionne
	// **********************************************************************************************************************************************************************
	public function afficheSelectSousQuartier($params=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeSousQuartiers'=>'listeSousQuartiers.tpl')));
		
		$identifiantUnique="";
		
		if(isset($params['identifiantUnique']))
		{
			$identifiantUnique = $params['identifiantUnique'];
		}
		elseif(isset($this->variablesGet['identifiantUnique']))
		{
			$identifiantUnique=$this->variablesGet['identifiantUnique'];
		}
		
		$t->assign_vars(array('identifiantUnique'=>$identifiantUnique));
		
		if((isset($this->variablesGet['archiIdQuartier']) && $this->variablesGet['archiIdQuartier']!='') || (isset($params['idQuartier']) && $params['idQuartier']!=''))
		{
			$fromQuartier="";
			if(isset($params['idQuartier']) && $params['idQuartier']!='')
			{
				$whereQuartier = " AND idQuartier='".$params['idQuartier']."' ";
			}
			elseif(isset($this->variablesGet['archiIdQuartier']) && $this->variablesGet['archiIdQuartier']!='')
			{
				$whereQuartier = " AND idQuartier='".$this->variablesGet['archiIdQuartier']."' ";
			}
			
			$resQuartiers=$this->connexionBdd->requete("select idSousQuartier,nom from sousQuartier where 1=1 and nom<>'autre' ".$whereQuartier." order by nom");
			while($fetchQuartiers = mysql_fetch_assoc($resQuartiers))
			{
				// si un sousQuartier doit etre selectionne par defaut
				$selected="";
				if(isset($params['idSousQuartier']) && $params['idSousQuartier']!='' && $params['idSousQuartier']==$fetchQuartiers['idSousQuartier'])
				{
					$selected = " selected ";
				}
			
				if($fetchQuartiers['nom']!='autre')
				{
					$t->assign_block_vars("sousQuartiers",array(
															'nom'=>$fetchQuartiers['nom'],
															'id'=>$fetchQuartiers['idSousQuartier'],
															'selected'=>$selected
													));
				}
			}
		}
		else
		{
			echo "archiAdresses::afficheSelectQuartier => parametre archiIdVille manquant<br>";
		}
		
		ob_start();
		$t->pparse('listeSousQuartiers');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// affichage de la liste des villes sous forme d'un champ select
	public function afficheSelectVille($params=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeVille'=>'listeVilleSelect.tpl')));
		
		$wherePays = "";
		if(isset($params['idPays']) && $params['idPays']!='')
		{
			$wherePays = " AND idPays = '".$params['idPays']."' ";
		}
		
		if(isset($this->variablesGet["idPays"]) && $this->variablesGet["idPays"]!='')
		{
			$wherePays=" AND idPays = '".$this->variablesGet['idPays']."' ";
		}
		
		
		$javascriptQuartier = "";
		if(!isset($params['noQuartier']) || $params['noQuartier']!=true)
		{
			$javascriptQuartier = "
					document.getElementById('quartiers').innerHTML='<option value=0>Aucun</option>';
					document.getElementById('quartiers').selectedIndex=0;
					appelAjax('?archiAffichage=afficheSelectQuartier&noHeaderNoFooter=1&idVille='+document.getElementById('ville').value,'champQuartier');
				";
		}
		
		$javascriptSousQuartier = "";
		if(!isset($params['noSousQuartier']) || $params['noSousQuartier']!=true)
		{
			$javascriptSousQuartier = "
				document.getElementById('sousQuartiers').innerHTML='<option value=0>Aucun</option>';
				document.getElementById('sousQuartiers').selectedIndex=0;
			";
		}
		
		$t->assign_vars(array('javascript'=>"
			function onChangeListeVille()
			{
				".$javascriptSousQuartier."
				".$javascriptQuartier."
			}
			"));
		
		
		// assignation du javascript pour l'ajax
		$t->assign_vars(array('onChangeListeVille'=>"onChangeListeVille();"));
		
		
		$reqVille = "SELECT idVille, nom FROM ville WHERE 1=1 and nom<>'autre' ".$wherePays;
		
		$resVille = $this->connexionBdd->requete($reqVille);
		
		while($fetchVille = mysql_fetch_assoc($resVille))
		{
			$selected="";
			if(isset($params['idVille']) && $params['idVille']!='' && $params['idVille'] == $fetchVille['idVille'])
			{
				$selected=" selected ";
			}
			
			$t->assign_block_vars('villes',array(
													'id'	=>$fetchVille['idVille'],
													'nom' 	=>$fetchVille['nom'],
													'selected'=>$selected
												));
		}
		
		ob_start();
		$t->pparse('listeVille');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// affichage de la liste des pays sous forme d'un champ select
	public function afficheSelectPays($params=array())
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listePays'=>'listePaysSelect.tpl')));
		
		$reqPays = "SELECT nom, idPays FROM pays";
		$resPays = $this->connexionBdd->requete($reqPays);
		
		$javascriptVille="";
		if(!isset($params['noVille']) || $params['noVille']!=true)
		{
			$javascriptVille = "							
							document.getElementById('ville').innerHTML='<option value=0>Aucun</option>';
							document.getElementById('ville').selectedIndex=0;
							appelAjax('?archiAffichage=afficheSelectVille&noHeaderNoFooter=1&idPays='+document.getElementById('pays').value,'champVille');
							";
		}
		
		$javascriptQuartier="";
		if(!isset($params['noQuartier']) || $params['noQuartier']!=true)
		{
			$javascriptQuartier="
							document.getElementById('quartiers').innerHTML='<option value=0>Aucun</option>';
							document.getElementById('quartiers').selectedIndex=0;
			";
		}
		
		$javascriptSousQuartier="";
		if(!isset($params['noSousQuartier']) || $params['noSousQuartier']!=true)
		{
			$javascriptSousQuartier="
							document.getElementById('sousQuartiers').innerHTML='<option value=0>Aucun</option>';
							document.getElementById('sousQuartiers').selectedIndex=0;
			";
		}
		
		
		$t->assign_vars(array('javascript'=>"
						function onChangeListePays()
						{
							".$javascriptSousQuartier."
							".$javascriptQuartier."
							".$javascriptVille."
						}
						"));
		
		
		// assignation du javascript pour l'ajax
		$t->assign_vars(array('onChangeListePays'=>"onChangeListePays();"));
		
		while($fetchPays = mysql_fetch_assoc($resPays))
		{
			$selected="";
			if(isset($params['idPays']) && $params['idPays']!='' && $params['idPays'] == $fetchPays['idPays'])
			{
				$selected=" selected ";
			}
			$t->assign_block_vars('pays',array(
													'id'=>$fetchPays['idPays'],
													'nom'=>$fetchPays['nom'],
													'selected'=>$selected
												));
		}
		
		ob_start();
		$t->pparse('listePays');
		$html=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	
	
	public function afficheSelectTypeEvenement()
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeTypeEvenement'=>'listeTypeEvenement.tpl')));
		
		
		if(isset($this->variablesGet['archiTypeGroupeEvenement']) && $this->variablesGet['archiTypeGroupeEvenement']!='')
		{
			$res = $this->connexionBdd->requete("select idTypeEvenement, nom from typeEvenement where groupe = '".$this->variablesGet['archiTypeGroupeEvenement']."'");
			while($fetch = mysql_fetch_assoc($res))
			{
				$t->assign_block_vars('typesEvenement',array(
																'id'=>$fetch['idTypeEvenement'],
																'nom'=>$fetch['nom']
															));
			
			}
		}
		
		
		
		
		ob_start();
		$t->pparse('listeTypeEvenement');
		$html.=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	
	// **********************************************************************************************************************************************************************
	// code du calque de la popup choix rue : appel du contenu de l'iframe
	// **********************************************************************************************************************************************************************
	public function getPopupChoixRue($modeAffichage='')
	{
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('popupChoixRue'=>'popupChoixRue.tpl')));
		
		switch($modeAffichage)
		{
			case 'nouveauDossier':
			case 'modifImage':
				$t->assign_vars(array(
								"iframeSrc"=>$this->creerUrl('','afficheChoixRue',array('noHeaderNoFooter'=>1,'modeAffichage'=>$modeAffichage)),
								"onClose"=>"document.getElementById('calqueRue').style.display='none';"
							));
			break;
		}
		
		ob_start();
		$t->pparse('popupChoixRue');
		$html.=ob_get_contents();
		ob_end_clean();

		return $html;
	}
	
	// **********************************************************************************************************************************************************************
	// code du contenu de la popup choix rue 
	// **********************************************************************************************************************************************************************
	public function afficheChoixRue($lettre='a')
	{
		if(isset($this->variablesGet['archiLettre']) && $this->variablesGet['archiLettre']!='')
		{
			$lettre = $this->variablesGet['archiLettre'];
		}
		
		$modeAffichage="";
		if(isset($this->variablesGet['modeAffichage']) && $this->variablesGet['modeAffichage']!='')
			$modeAffichage=$this->variablesGet['modeAffichage'];
		
		$html="";
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('listeRues'=>'listeRues.tpl')));
		
		
		// recuperation des parametres
		$idPays 		= 1;
		$idVille 		= 0;
		$idQuartier 	= 0;
		$idSousQuartier = 0;
		
		$sqlLeftJoin="";
		$sqlSelection="";
		// mise en place des parametres de requete sql pour recherche des rue d'une ville
		if(isset($this->variablesGet['archiIdVille']) && $this->variablesGet['archiIdVille']!='0' && $this->variablesGet['archiIdVille']!='undefined' && $this->variablesGet['archiIdVille']!='')
		{
			$idVille = $this->variablesGet['archiIdVille'];
			$sqlLeftJoin  = " RIGHT JOIN quartier q ON q.idVille = '".$idVille."' ";
			$sqlLeftJoin .= " RIGHT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier ";
			$sqlSelection = " AND r.idSousQuartier = sq.idSousQuartier ";
			$t->assign_vars(array('idVille'=>$idVille));
		}
		
		// mise en place des parametres de requete sql pour recherche des rue d'un quartier 
		if(isset($this->variablesGet['archiIdQuartier']) && $this->variablesGet['archiIdQuartier']!='0' && $this->variablesGet['archiIdQuartier']!='undefined' && $this->variablesGet['archiIdQuartier']!='')
		{
			$idQuartier = $this->variablesGet['archiIdQuartier'];
			$sqlLeftJoin  = " RIGHT JOIN sousQuartier sq ON sq.idQuartier = '".$idQuartier."' ";
			$sqlSelection = " AND r.idSousQuartier = sq.idSousQuartier ";
			$t->assign_vars(array('idQuartier'=>$idQuartier));
		}
		
		// mise en place des parametres de requete sql pour recherche des rue d'un sous quartier
		if(isset($this->variablesGet['archiIdSousQuartier']) && $this->variablesGet['archiIdSousQuartier']!='0' && $this->variablesGet['archiIdSousQuartier']!='undefined' && $this->variablesGet['archiIdSousQuartier']!='')
		{
			$idSousQuartier = $this->variablesGet['archiIdSousQuartier'];
			$sqlLeftJoin  = "";
			$sqlSelection = " AND r.idSousQuartier = '".$idSousQuartier."'";
			$t->assign_vars(array('idSousQuartier'=>$idSousQuartier));
		}
		
		
		$reqNbRue = "
					select lower(substr(r.nom,1,1)) as lettre,r.nom
					from rue r
					".$sqlLeftJoin."
					WHERE 1=1
					".$sqlSelection."
					and lower(substr(r.nom,1,1))='".$lettre."'
					order by r.nom ASC
					";
		
		$resNbRue = $this->connexionBdd->requete($reqNbRue);
		
		$nbEnregistrementTotaux = mysql_num_rows($resNbRue); // nombre d'enregistrements pour la lettre courante
		
		if($nbEnregistrementTotaux ==0)
		{
			// recherche de la premiere lettre ou il y a des resultats
			$reqNbRueNew = "
					select lower(substr(r.nom,1,1)) as lettre,r.nom
					from rue r
					".$sqlLeftJoin."
					WHERE 1=1
					".$sqlSelection."
					order by r.nom ASC
					LIMIT 1
					";
			$resNbRueNew = $this->connexionBdd->requete($reqNbRueNew);
			$nbEnregistrementTotaux = mysql_num_rows($resNbRueNew);// nombre d'enregistrements pour la nouvelle lettre courante
			// recuperation de la nouvelle lettre courante
			$fetchNewLettre = mysql_fetch_assoc($resNbRueNew);
			$lettre = $fetchNewLettre['lettre'];
		}
		
		// nombre d'images affichées sur une page
		$nbEnregistrementsParPage = 20;
		$arrayPagination=$this->pagination(array(
										'nomParamPageCourante'=>'archiPageCouranteVille',
										'nbEnregistrementsParPage'=>$nbEnregistrementsParPage,
										'nbEnregistrementsTotaux'=>$nbEnregistrementTotaux,
										'typeLiens'=>'noformulaire'
										));
		
		$reqRue = "
					select r.idRue as idRue, r.nom as nom, lower(substr(r.nom,1,1)) as lettre, prefixe
					from rue r
					".$sqlLeftJoin."
					WHERE 1=1
					".$sqlSelection."
					and lower(substr(r.nom,1,1))='".$lettre."'
					order by r.nom ASC
					LIMIT ".$arrayPagination['limitSqlDebut'].",".$nbEnregistrementsParPage;
		$resRue = $this->connexionBdd->requete($reqRue);
		
		
		$html.=$this->afficheListeAlphabetique(array('champ'=>'r.nom','table'=>'rue r','join'=>$sqlLeftJoin,'where'=>$sqlSelection),'popupRue');
		$html.=$arrayPagination['html']."<br>";
		
		if($nbEnregistrementTotaux>0) // est qu'il y a des enregistrement pour la rue courante ?
		{
			mysql_data_seek($resRue,0); // on replace le curseur au debut de la liste des enregistrements
		}
		else
		{
			echo "Pas de résultat.";
		}

		$tableauHTML = new tableau();
		$colonneHTML="";
		$i=0;
		// ajout au tableau
		while($fetchRue = mysql_fetch_assoc($resRue))
		{
				$nom = $fetchRue['nom']	;
				if($fetchRue['prefixe']!='' && isset($fetchRue['prefixe']))
					$nom = $nom.' ('.$fetchRue['prefixe'].')';
			
				/*$t->assign_block_vars('rues',array(
													'url'=>"#",
													'onclick'=>"parent.document.getElementById(parent.document.getElementById('paramChampAppelantRue').value+'txt').value='".addslashes($nom)."';parent.document.getElementById(parent.document.getElementById('paramChampAppelantRue').value).value='".$fetchRue['idRue']."';parent.document.getElementById('calqueRue').style.display='none';",
													'nom'=>$nom
				));*/
				
				$colonneHTML .= "<a href=\"#\" onclick=\"parent.document.getElementById(parent.document.getElementById('paramChampAppelantRue').value+'txt').value='".addslashes($nom)."';parent.document.getElementById(parent.document.getElementById('paramChampAppelantRue').value).value='".$fetchRue['idRue']."';parent.document.getElementById('calqueRue').style.display='none';\">".$nom."</a><br>";
				if($i==9)
				{
					$tableauHTML->addValue($colonneHTML);
					$colonneHTML="";
				}
				
				$i++;
		}
		
		if($colonneHTML!='')
		{
			$tableauHTML->addValue($colonneHTML);
		}
		
		$t->assign_vars(array('rues'=>$tableauHTML->createHtmlTableFromArray(2,'border=0;width:400px;font-size:12px;vertical-align:top;','',"valign='top' border=0")));
		
		ob_start();
		$t->pparse('listeRues');
		$html.=ob_get_contents();
		ob_end_clean();

		return $html;
	}

	// **********************************************************************************************************************************************************************
	// recupere l'id d'une nouvelle adresse (id suivant le plus haut)
	// **********************************************************************************************************************************************************************
	public function getNewIdAdresse()
	{
		$req="select max(idAdresse) as newId from historiqueAdresse";
		$res = $this->connexionBdd->requete($req);
		$fetchAdresse = mysql_fetch_assoc($res);
		return $fetchAdresse['newId']+1;
	}
	
	// **********************************************************************************************************************************************************************
	// recuperation d'un encart affichant les adresses pour les derniers evenements  NEST PLUS UTILISE !!!!!!!!!!!!!!!! => a supprimer a terme , une fois la page d'accueil sera validee
	// **********************************************************************************************************************************************************************
	public function afficheEncart($modeAffichage='',$arrayIdAdressesNePasAfficher=array())
	{
		$html="";
		$retour = array();
		$t=new Template('modules/archi/templates/');
		$t->set_filenames((array('encartAccueil'=>'encartAccueil.tpl')));
		ob_start();
		
		switch($modeAffichage)
		{
			// ****************************************************************************************************************************************************************************
			// AFFICHAGE DES ENCARTS DES DERNIERES DEMOLITIONS
			// ****************************************************************************************************************************************************************************
			case 'demolition':
				$titre = "Dernières Démolitions";
				$where = " he.idTypeEvenement='6' ";
				$t->assign_vars(array('lienVersTout'=>"<a href='".$this->creerUrl('','toutesLesDemolitions',array())."'>Toutes les démolitions</a>"));
				// cas des trois encart sauf celui des derniereAdresses
				// recherche des derniers evenenements 

				$req="
										SELECT distinct ha.idAdresse as idAdresse,ee.idEvenementAssocie as idEvenementAssocie,ha.date,ha.numero as numero,ha.idRue as idRue,
										ha.idQuartier as idQuartier, ha.idSousQuartier as idSousQuartier, ha.idVille as idVille,ha.idIndicatif as idIndicatif,he1.idEvenement as idEvenement,he1.dateCreationEvenement as dateCreationEvenement, he1.description as description,
										
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue
										
										FROM historiqueAdresse ha2, historiqueAdresse ha
										
										RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
										RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
										RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
										RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
										
										LEFT JOIN rue r ON r.idRue = ha.idRue
										LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
										LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
										LEFT JOIN ville v ON v.idVille = ha.idVille
										
										WHERE ha2.idAdresse = ha.idAdresse
										AND he1.idTypeEvenement = '6'
										GROUP BY ha.idAdresse, he1.idEvenement , ha.idHistoriqueAdresse, he1.idHistoriqueEvenement
										HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
										ORDER BY he1.dateCreationEvenement DESC,ha.idHistoriqueAdresse DESC
										LIMIT 5
				";
				
				
				$res = $this->connexionBdd->requete($req);
				$i=0;
				$arrayIdAdresses=array();
				while($fetch = mysql_fetch_assoc($res))
				{
					if($i==0 && $fetch['idAdresse']!='') // premier evenement affiché avec sa photo
					{
						// on recupere une photo de l'evenement de la demolition
						$urlImage = $this->getUrlImageFrom($fetch['idAdresse'],'moyen',"AND he1.idTypeEvenement='6'");
						if(preg_match('/transparent/i',$urlImage['url'])==true)
						{
							$urlImage = $this->getUrlImageFromAdresse($fetch['idAdresse'],'moyen');
						}
						
						if(preg_match('/transparent/i',$urlImage['url'])==false) // recherche du mot 'transparent' dans la chaine, i indique l'insensibilité a la casse
						{
							$t->assign_vars(array('photoAdresse1'=>"<img style='border:1px #000000 solid;margin-right:2px;float:left;' align='middle' src='".$urlImage['url']."'>"));
						}
						
						$t->assign_vars(array('descriptionAdresse1'=>"<div><a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a><br>".stripslashes($this->sansBalises($this->coupureTexte($fetch['description'],20)))."</div>"));
					}
					elseif(!in_array($fetch['idAdresse'],$arrayIdAdresses) && $fetch['idAdresse']!='')
					{
						$t->assign_block_vars('listeAdressesSuivantes',array('lien'=>"<a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a>"));
					}
					
					$arrayIdAdresses[] = $fetch['idAdresse'];

					$i++;
				}
				
			break;
			// ****************************************************************************************************************************************************************************
			// AFFICHAGE DES ENCARTS DES DERNIERES ADRESSES AJOUTEES
			// ****************************************************************************************************************************************************************************
			case 'derniereAdresses':
				// on cherche les derniers groupes d'adresses
				$titre = "Nouvelles adresses";
				$t->assign_vars(array('lienVersTout'=>"<a href='".$this->creerUrl('','recherche',array('motcle'=>'','submit'=>'Rechercher'))."'>Toutes les adresses</a>"));

				$listeAdressesNePasAfficher="";
				if(isset($arrayIdAdressesNePasAfficher) && count($arrayIdAdressesNePasAfficher)>0)
				{
					$listeAdressesNePasAfficher = implode("','",$arrayIdAdressesNePasAfficher);
					$listeAdressesNePasAfficher = "AND ha.idAdresse not in ('".$listeAdressesNePasAfficher."')";
				}

			
				// cas de l'encars des dernieres adresses
				$req="
										SELECT distinct ha.idAdresse as idAdresse,ee.idEvenementAssocie as idEvenementAssocie,ha.date,ha.numero as numero,ha.idRue as idRue,
										ha.idQuartier as idQuartier, ha.idSousQuartier as idSousQuartier, ha.idVille as idVille,ha.idIndicatif as idIndicatif,he1.idEvenement as idEvenement,he1.dateCreationEvenement as dateCreationEvenement, he1.description as description,
										
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue
										
										FROM historiqueAdresse ha2, historiqueAdresse ha
										
										RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
										RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
										RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
										RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
										
										LEFT JOIN rue r ON r.idRue = ha.idRue
										LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
										LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
										LEFT JOIN ville v ON v.idVille = ha.idVille
										
										WHERE ha2.idAdresse = ha.idAdresse
										AND YEAR(he1.dateDebut)<>'".date("Y")."'
										".$listeAdressesNePasAfficher."
										GROUP BY ha.idAdresse, he1.idEvenement , ha.idHistoriqueAdresse, he1.idHistoriqueEvenement
										HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
										ORDER BY ha.date DESC,ha.idHistoriqueAdresse DESC
										LIMIT 5
				";
				
				$res = $this->connexionBdd->requete($req);
				$i=0;
				$arrayIdAdresses=array();
				while($fetch = mysql_fetch_assoc($res))
				{
					if($i==0 && $fetch['idAdresse']!='') // premier evenement affiché avec sa photo
					{
						// on recupere une photo du premier evenement travaux de l'adresse
						$urlImage = $this->getUrlImageFrom($fetch['idAdresse'],'moyen',"AND he1.idTypeEvenement not in (1,2,3,4,5,6,11) ");
						if(preg_match('/transparent/i',$urlImage['url'])==true)
						{
							$urlImage = $this->getUrlImageFromAdresse($fetch['idAdresse'],'moyen');
						}
						
						if(preg_match('/transparent/i',$urlImage['url'])==false) // recherche du mot 'transparent' dans la chaine, i indique l'insensibilité a la casse
						{
							$t->assign_vars(array('photoAdresse1'=>"<img style='border:1px #000000 solid;margin-right:2px;float:left;' align='middle' src='".$urlImage['url']."'>"));
						}
						
						$t->assign_vars(array('descriptionAdresse1'=>"<div><a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a><br>".stripslashes($this->sansBalises($this->coupureTexte($fetch['description'],20)))."</div>"));
					}
					elseif(!in_array($fetch['idAdresse'],$arrayIdAdresses) && $fetch['idAdresse']!='')
					{
						$t->assign_block_vars('listeAdressesSuivantes',array('lien'=>"<a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a>"));
					}
					
					$arrayIdAdresses[] = $fetch['idAdresse'];

					$i++;
				}
			break;
					
			// ****************************************************************************************************************************************************************************
			// AFFICHAGE DES ENCARTS DES EVENEMENTS TRAVAUX
			// ****************************************************************************************************************************************************************************
			case 'travaux':
				$titre = "Derniers travaux";
				$t->assign_vars(array('lienVersTout'=>"<a href='".$this->creerUrl('','tousLesTravaux',array())."'>Tous les travaux</a>"));
				// recherche des derniers evenenements 
				//he.idTypeEvenement in (1,2,3,4,5) 
				$req="
										SELECT distinct ha.idAdresse as idAdresse,ee.idEvenementAssocie as idEvenementAssocie,ha.date,ha.numero as numero,ha.idRue as idRue,
										ha.idQuartier as idQuartier, ha.idSousQuartier as idSousQuartier, ha.idVille as idVille,ha.idIndicatif as idIndicatif,he1.idEvenement as idEvenement,he1.dateCreationEvenement as dateCreationEvenement, he1.description as description,
										
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue
										
										FROM historiqueAdresse ha2, historiqueAdresse ha
										
										RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
										RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
										RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
										RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
										
										LEFT JOIN rue r ON r.idRue = ha.idRue
										LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
										LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
										LEFT JOIN ville v ON v.idVille = ha.idVille
										
										WHERE ha2.idAdresse = ha.idAdresse
										AND (he1.idTypeEvenement in (2,3,4,5) OR (he1.idTypeEvenement='1' AND YEAR(he1.dateDebut)='".date("Y")."'))
										
										GROUP BY ha.idAdresse, he1.idEvenement , ha.idHistoriqueAdresse, he1.idHistoriqueEvenement
										HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
										ORDER BY he1.dateCreationEvenement DESC,ha.idHistoriqueAdresse DESC
										LIMIT 5
				";
				
				$res = $this->connexionBdd->requete($req);
				$i=0;
				$arrayIdAdresses=array();
				while($fetch = mysql_fetch_assoc($res))
				{
					if($i==0 && $fetch['idAdresse']!='') // premier evenement affiché avec sa photo
					{
						// on recupere une photo du premier evenement travaux de l'adresse
						$urlImage = $this->getUrlImageFrom($fetch['idAdresse'],'moyen',"AND he1.idTypeEvenement in (1,2,3,4,5) ");
						if(preg_match('/transparent/i',$urlImage['url'])==true)
						{
							$urlImage = $this->getUrlImageFromAdresse($fetch['idAdresse'],'moyen');
						}
						
						if(preg_match('/transparent/i',$urlImage['url'])==false) // recherche du mot 'transparent' dans la chaine, i indique l'insensibilité a la casse
						{
							$t->assign_vars(array('photoAdresse1'=>"<img style='border:1px #000000 solid;margin-right:2px;float:left;' align='middle' src='".$urlImage['url']."'>"));
						}
						
						$t->assign_vars(array('descriptionAdresse1'=>"<div><a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a><br>".stripslashes($this->sansBalises($this->coupureTexte($fetch['description'],20)))."</div>"));
					}
					elseif(!in_array($fetch['idAdresse'],$arrayIdAdresses) && $fetch['idAdresse']!='')
					{
						$t->assign_block_vars('listeAdressesSuivantes',array('lien'=>"<a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a>"));
					}
					
					$arrayIdAdresses[] = $fetch['idAdresse'];

					$i++;
				}

			break;
			// ****************************************************************************************************************************************************************************
			// AFFICHAGE DES ENCARTS DES EVENEMENTS CULTURELS
			// ****************************************************************************************************************************************************************************
			case 'culturel':
				$titre = "Derniers évènements culturels";
				$t->assign_vars(array('lienVersTout'=>"<a href='".$this->creerUrl('','tousLesEvenementsCulturels',array())."'>Tous les évènements culturels</a>"));
				// cas des trois encart sauf celui des derniereAdresses
				// recherche des derniers evenenements 
				$req="
										SELECT distinct ha.idAdresse as idAdresse,ee.idEvenementAssocie as idEvenementAssocie,ha.date,ha.numero as numero,ha.idRue as idRue,
										ha.idQuartier as idQuartier, ha.idSousQuartier as idSousQuartier, ha.idVille as idVille,ha.idIndicatif as idIndicatif,he1.idEvenement as idEvenement,he1.dateCreationEvenement as dateCreationEvenement, he1.description as description,
										
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue
										
										FROM historiqueAdresse ha2, historiqueAdresse ha
										
										RIGHT JOIN _adresseEvenement ae ON ae.idAdresse = ha.idAdresse
										RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
										RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
										RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
										
										LEFT JOIN rue r ON r.idRue = ha.idRue
										LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha.idSousQuartier
										LEFT JOIN quartier q ON q.idQuartier = ha.idQuartier
										LEFT JOIN ville v ON v.idVille = ha.idVille
										
										WHERE ha2.idAdresse = ha.idAdresse
										AND he1.idTypeEvenement not in (1,2,3,4,5,6,11) 
										GROUP BY ha.idAdresse, he1.idEvenement , ha.idHistoriqueAdresse, he1.idHistoriqueEvenement
										HAVING ha.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement)
										ORDER BY he1.dateCreationEvenement DESC,ha.idHistoriqueAdresse DESC
										LIMIT 5
				";
				
				$res = $this->connexionBdd->requete($req);
				$i=0;
				$arrayIdAdresses=array();
				while($fetch = mysql_fetch_assoc($res))
				{
					if($i==0 && $fetch['idAdresse']!='') // premier evenement affiché avec sa photo
					{
						// on recupere une photo du premier evenement travaux de l'adresse
						$urlImage = $this->getUrlImageFrom($fetch['idAdresse'],'moyen',"AND he1.idTypeEvenement not in (1,2,3,4,5,6,11) ");
						if(preg_match('/transparent/i',$urlImage['url'])==true)
						{
							$urlImage = $this->getUrlImageFromAdresse($fetch['idAdresse'],'moyen');
						}
						
						if(preg_match('/transparent/i',$urlImage['url'])==false) // recherche du mot 'transparent' dans la chaine, i indique l'insensibilité a la casse
						{
							$t->assign_vars(array('photoAdresse1'=>"<img style='border:1px #000000 solid;margin-right:2px;float:left;' align='middle' src='".$urlImage['url']."'>"));
						}
						
						$t->assign_vars(array('descriptionAdresse1'=>"<div><a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a><br>".stripslashes($this->sansBalises($this->coupureTexte($fetch['description'],20)))."</div>"));
					}
					elseif(!in_array($fetch['idAdresse'],$arrayIdAdresses) && $fetch['idAdresse']!='')
					{
						$t->assign_block_vars('listeAdressesSuivantes',array('lien'=>"<a href='".$this->creerUrl('','adresseDetail',array("archiIdAdresse"=>$fetch['idAdresse']))."' style='font-size:12px;'>".date('d/m/Y',strtotime($fetch['dateCreationEvenement'])).' '.$this->getIntituleAdresse($fetch)."</a>"));
					}
					
					$arrayIdAdresses[] = $fetch['idAdresse'];

					$i++;
				}

			break;
		}

		
		$t->assign_vars(array('titre'=>$titre));
		
		$t->pparse('encartAccueil');
		$html.=ob_get_contents();
		ob_end_clean();
		$retour =array("html"=>$html , "arrayIdAdresses"=>$arrayIdAdresses);
		return $retour;
	}
	
	//  ************************************************************************************************************************
	// affichage des derniers evenements par categorie , travaux, culturel , dernieresAdresses,demolitions
	// on remplis un tableau au fur et a mesure , le but etant de realiser l'operation en 1 seul requete afin d'eviter les repetitions
	// et en meme temps rend plus rapide le traitement qu'avec 4 requetes distinctes
	//  ************************************************************************************************************************
	public function getDerniersEvenementsParCategorie($nbAdressesParEncart=5)
	{
		// 1 - les derniers evenements
		
		$reqEvenements = "
		
			SELECT 	he1.idEvenement as idEvenement, he1.dateCreationEvenement as dateCreationEvenement,he1.dateDebut as dateDebut,extract(YEAR FROM he1.dateDebut) as annneeDebut, he1.idTypeEvenement as idTypeEvenement,
					ha1.idAdresse as idAdresse, ha1.date as dateAdresse, ha1.numero as numero, ha1.idRue as idRue, ha1.idQuartier as idQuartier, 
					ha1.idSousQuartier as idSousQuartier, ha1.idPays as idPays, ha1.idVille as idVille, ha1.idIndicatif as idIndicatif,
										
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue,
					hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload
										
			FROM historiqueEvenement he2, historiqueEvenement he1
			RIGHT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = he1.idEvenement
			RIGHT JOIN _adresseEvenement ae ON ae.idEvenement = ee.idEvenement
			RIGHT JOIN historiqueAdresse ha1 ON ha1.idAdresse = ae.idAdresse
			RIGHT JOIN historiqueAdresse ha2 ON ha2.idAdresse = ha1.idAdresse
			
			LEFT JOIN typeEvenement te ON te.idTypeEvenement = he1.idTypeEvenement
			
			LEFT JOIN rue r ON r.idRue = ha1.idRue
			LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha1.idSousQuartier
			LEFT JOIN quartier q ON q.idQuartier = ha1.idQuartier
			LEFT JOIN ville v ON v.idVille = ha1.idVille
			
			LEFT JOIN _evenementImage ei ON ei.idEvenement = he1.idEvenement
			LEFT JOIN historiqueImage hi1 ON hi1.idImage = ei.idImage
			LEFT JOIN historiqueImage hi2 ON hi2.idImage = hi1.idImage
			
			WHERE he2.idEvenement = he1.idEvenement

			GROUP BY he1.idEvenement,ha1.idAdresse,hi1.idImage, he1.idHistoriqueEvenement, ha1.idHistoriqueAdresse,hi1.idHistoriqueImage
			HAVING he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement) AND ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) AND hi1.idHistoriqueImage = max(hi2.idHistoriqueImage) 
			ORDER BY he1.dateCreationEvenement DESC
		";//,dateCreationEvenement DESC,dateAdresse DESC
	
		$resEvenements = $this->connexionBdd->requete($reqEvenements);
		
		
		$tabAdressesEvenementsAffichees=array(); // tableau contenant les idAdresses qu'il ne faudra pas reafficher 
		
		$tabConstruction=array();
		$tabDemolition=array();
		$tabCulturel=array();
		$tabDernieresAdresses=array();
		
		$tabAdressesNouvellesAdressesAffichees=array();
		
		
		while($fetchEvenements = mysql_fetch_assoc($resEvenements))
		{
			//if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees))
			//{
				//$this->urlImagesMoyen."/".$fetchEvenements['dateUpload']."/".$fetchEvenements['idHistoriqueImage'].".jpg"
				$positionEvenement = $this->getPositionFromEvenement($fetchEvenements['idEvenement']);
				$infosAdresseCourante = array(
													"idAdresse"=>$fetchEvenements['idAdresse'],
													"numero"=>$fetchEvenements['numero'],
													"nomRue"=>$fetchEvenements['nomRue'],
													"nomQuartier"=>$fetchEvenements['nomQuartier'],
													"nomSousQuartier"=>$fetchEvenements['nomSousQuartier'],
													"nomVille"=>$fetchEvenements['nomVille'],
													"prefixeRue"=>$fetchEvenements['prefixeRue'],
													"dateCreationEvenement"=>$fetchEvenements['dateCreationEvenement'],
													"positionEvenement"=>$positionEvenement,
													"idEvenement"=>$fetchEvenements['idEvenement']
													);
				//"titreEvenement"=>$fetchEvenements['titreEvenement'],
				//"description"=>$fetchEvenements['descriptionEvenement'],
				//"idHistoriqueImage"=>$fetchEvenements['idHistoriqueImage'],
				//"dateUpload"=>$fetchEvenements['dateUpload'],
													
				switch($fetchEvenements['idTypeEvenement'])
				{
					// TRAVAUX OU NOUVELLE ADRESSE suivant l'annee
					case '1': // construction
						if($fetchEvenements['annneeDebut']==date('Y'))
						{
							// TRAVAUX
							if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees) )
							{
								if(count($tabConstruction)<5)
								{
									$tabConstruction[]=$infosAdresseCourante;
															
									$tabAdressesEvenementsAffichees[] = $fetchEvenements['idAdresse'];
								}
							}
						}
						else
						{
							// NOUVELLES ADRESSES
							/*if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees))
							{
								if(count($tabDernieresAdresses)<5)
								{
									$tabDernieresAdresses = $infosAdresseCourante;
									$tabAdressesEvenementsAffichees[] = $fetchEvenements['idAdresse'];
									$tabAdressesNouvellesAdressesAffichees[] = $fetchEvenements['idAdresse'];
								}
							}*/
						}
						
					// TRAVAUX
					case '2': // renovation
					case '3': // extension
					case '4': // transformation
					case '5': // ravalement
						if($fetchEvenements['annneeDebut']==date('Y'))
						{
							// TRAVAUX
							if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees) )
							{
								if(count($tabConstruction)<5)
								{
									$tabConstruction[]=$infosAdresseCourante;
															
									$tabAdressesEvenementsAffichees[] = $fetchEvenements['idAdresse'];
								}
							}
						}
					break;
					// DEMOLITIONS
					case '6': // demolition
						if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees))
						{
							if(count($tabDemolition)<5)
							{
								$tabDemolition[]=$infosAdresseCourante;
													
								$tabAdressesEvenementsAffichees[] = $fetchEvenements['idAdresse'];
							}
						}
					break;
					// EVENEMENTS CULTURELS
					case '14': // visite exceptionnelle
					case '13': // portes ouvertes
					case '12': // inauguration
					case '15': // fête
					case '16': // Journée du Patrimoine
					case '18': // Journée du bâtiment
					case '19': // Exposition
					case '20': // Information (Nouveautés)
						if(!in_array($fetchEvenements['idAdresse'],$tabAdressesEvenementsAffichees))
						{
							if(count($tabCulturel)<5)
							{
								$tabCulturel[]=$infosAdresseCourante;
													
								$tabAdressesEvenementsAffichees[] = $fetchEvenements['idAdresse'];
							}
						}
					break;
					
				}
				
				
			//}
			
			if(count($tabConstruction)==5 && count($tabDemolition)==5 && count($tabCulturel)==5)
			{
				break;
			}
		}

		
		
		$tabAdressesEvenementsAffichees = array_unique($tabAdressesEvenementsAffichees);
		
		$sqlAdressesExclues="";
		if(count($tabAdressesEvenementsAffichees)>0)
		{
			$sqlAdressesExclues=" AND ha1.idAdresse NOT IN ('".implode("','",$tabAdressesEvenementsAffichees)."') ";
		}
		
		

		// 2 - les dernieres adresses ajoutées moins celles deja affichées dans les rubriques précédentes
		$reqAdresses = "
			SELECT 	ha1.idAdresse as idAdresse, ha1.numero as numero, ha1.idRue as idRue , ha1.idQuartier as idQuartier, ha1.idSousQuartier as idSousQuartier,
					ha1.idVille as idVille,ha1.idPays as idPays, ha1.idIndicatif as idIndicatif,ha1.date as dateCreationAdresse,hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload, hi1.idHistoriqueImage,hi1.idImage,
					
										r.nom as nomRue,
										q.nom as nomQuartier,
										sq.nom as nomSousQuartier,
										v.nom as nomVille,
										r.prefixe as prefixeRue,ha1.date as date
					


			FROM historiqueAdresse ha2, historiqueAdresse ha1
			LEFT JOIN _adresseEvenement ae ON ae.idAdresse = ha1.idAdresse
			LEFT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
			
			
			LEFT JOIN rue r ON r.idRue = ha1.idRue
			LEFT JOIN sousQuartier sq ON sq.idSousQuartier = ha1.idSousQuartier
			LEFT JOIN quartier q ON q.idQuartier = ha1.idQuartier
			LEFT JOIN ville v ON v.idVille = ha1.idVille
			LEFT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
			LEFT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
			LEFT JOIN _evenementImage ei ON ei.idEvenement = he1.idEvenement
			LEFT JOIN historiqueImage hi1 ON hi1.idImage = ei.idImage
			LEFT JOIN historiqueImage hi2 ON hi2.idImage = hi1.idImage
			
			WHERE ha2.idAdresse = ha1.idAdresse
			".$sqlAdressesExclues."
			GROUP BY ha1.idAdresse ,he1.idEvenement,hi1.idImage, ha1.idHistoriqueAdresse, he1.idHistoriqueEvenement, hi1.idHistoriqueImage
			HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse) and he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement) and hi1.idHistoriqueImage = max(hi2.idHistoriqueImage)
			ORDER BY ha1.date DESC

		";
		
		
		
		
		$resAdresses = $this->connexionBdd->requete($reqAdresses);
		

		while($fetchAdresses = mysql_fetch_assoc($resAdresses))
		{
			if(!in_array($fetchAdresses['idAdresse'],$tabAdressesNouvellesAdressesAffichees))
			{
			
				$tabAdressesNouvellesAdressesAffichees[]=$fetchAdresses['idAdresse'];
				//$this->urlImagesMoyen."/".$fetchAdresses['dateUpload']."/".$fetchAdresses['idHistoriqueImage'].".jpg"
				$infosAdresseCourante = array(
														"idAdresse"=>$fetchAdresses['idAdresse'],
														"numero"=>$fetchAdresses['numero'],
														"nomRue"=>$fetchAdresses['nomRue'],
														"nomQuartier"=>$fetchAdresses['nomQuartier'],
														"nomSousQuartier"=>$fetchAdresses['nomSousQuartier'],
														"nomVille"=>$fetchAdresses['nomVille'],
														"prefixeRue"=>$fetchAdresses['prefixeRue'],
														"idHistoriqueImage"=>$fetchAdresses['idHistoriqueImage'],
														"dateCreationAdresse"=>$fetchAdresses['dateCreationAdresse'],
														"dateUpload"=>$fetchAdresses['dateUpload']
														);// ,"description"=>"" 

				$tabDernieresAdresses[] = $infosAdresseCourante;
			}
			
			if(count($tabDernieresAdresses)>=5)
			{
				break;
			}
		}
		



		// il faut maintenant parcourir les tableaux pour afficher les images de facon correcte
		$image = new archiImage();
		
		$indiceElementPremierePosition=array();
		$imageElementPremierePosition=array();
		
		// *******************************************************************************
		// recuperation de l'image qui sera affichée pour les demolitions 
		$trouveImageDemolition=false;
		$i=0;
		foreach($tabDemolition as $indice => $value)
		{
			if(!$trouveImageDemolition)
			{
				if(!isset($value['idHistoriqueImage']) || $value['idHistoriqueImage']=='0' )
				{
					// ici on recherche une autre image pour la meme adresse car il n'y en avait pas sur l'evenement concerné
					//$resImagesDemolitionFromAdresse = $image->getImagesEvenementsFromAdresse($value['idAdresse']);
					//$fetchImageDemolition = mysql_fetch_assoc($resImagesDemolitionFromAdresse);
					$fetch = $this->getFirstImageFromEvenement($value['idEvenement']);
					if(isset($fetch['idHistoriqueImage']) && $fetch['idHistoriqueImage']!='' && $fetch['idHistoriqueImage']!='0')
					{
						$imageElementPremierePosition['demolition'] =$fetch;//array('idHistoriqueImage'=> $fetchImageDemolition['idHistoriqueImage'], 'dateUpload'=>$fetchImageDemolition['dateUpload'] );
						
						$indiceElementPremierePosition['demolition'] = $indice;
						$trouveImageDemolition=true;
					}
					else
					{
						$trouveImageDemolition=false;
					}
					
				}
				else
				{
					$trouveImageDemolition=true;
					$imageElementPremierePosition['demolition'] = array('idHistoriqueImage'=> $value['idHistoriqueImage'], 'dateUpload'=>$value['dateUpload'] );
					$indiceElementPremierePosition['demolition'] = $indice;
				}
			}
			
			$i++;
		}

		// *******************************************************************************
		// recuperation de l'image qui sera affichee pour les derniers travaux
		
		
		$trouveImageConstruction=false;
		$i=0;
		foreach($tabConstruction as $indice => $value)
		{
			if(!$trouveImageConstruction)
			{
				if(!isset($value['idHistoriqueImage']) || $value['idHistoriqueImage']=='0')
				{
					// ici on recherche une autre image pour la meme adresse car il n'y en avait pas sur l'evenement concerné
					//$resImagesConstructionFromAdresse = $image->getImagesEvenementsFromAdresse($value['idAdresse']);
					//$fetchImageConstruction = mysql_fetch_assoc($resImagesConstructionFromAdresse);
					$fetch = $this->getFirstImageFromEvenement($value['idEvenement']);
					if(isset($fetch['idHistoriqueImage']) && $fetch['idHistoriqueImage']!='' && $fetch['idHistoriqueImage']!='0')
					{
						$imageElementPremierePosition['construction'] = $fetch;//array('idHistoriqueImage'=> $fetchImageConstruction['idHistoriqueImage'], 'dateUpload'=>$fetchImageConstruction['dateUpload'] );
						$indiceElementPremierePosition['construction'] = $indice;
						$trouveImageConstruction=true;
					}
					else
					{
						$trouveImageConstruction=false;
					}

					
				}
				else
				{
					$trouveImageConstruction=true;
					$imageElementPremierePosition['construction'] = array('idHistoriqueImage'=> $value['idHistoriqueImage'], 'dateUpload'=>$value['dateUpload'] );
					$indiceElementPremierePosition['construction'] = $indice;
				}
			}
			
			$i++;
		}
		

		// *******************************************************************************
		// recuperation de l'image qui sera affichee pour les derniers evenements culturels
		
		$trouveImageCulturel=false;
		$i=0;
		foreach($tabCulturel as $indice => $value)
		{
			if(!$trouveImageCulturel)
			{
				if(!isset($value['idHistoriqueImage']) || $value['idHistoriqueImage']=='0')
				{
					// ici on recherche une autre image pour la meme adresse car il n'y en avait pas sur l'evenement concerné
					//$resImagesCulturelFromAdresse = $this->getFirstImageFromEvenement($value['idEvenement']);//$image->getImagesEvenementsFromAdresse($value['idAdresse']);
					//$fetchImageCulturel = mysql_fetch_assoc($resImagesCulturelFromAdresse);
					$fetch = $this->getFirstImageFromEvenement($value['idEvenement']);
					if(isset($fetch['idHistoriqueImage']) && $fetch['idHistoriqueImage']!='' && $fetch['idHistoriqueImage']!='0')
					{
						$imageElementPremierePosition['culturel'] = $fetch;//$this->getFirstImageFromEvenement($value['idEvenement']);//array('idHistoriqueImage'=> $fetchImageCulturel['idHistoriqueImage'], 'dateUpload'=>$fetchImageCulturel['dateUpload'] );
						
						$indiceElementPremierePosition['culturel'] = $indice;
						$trouveImageCulturel=true;
					}
					else
					{
						$trouveImageCulturel=false;
					}
				}
				else
				{
					$trouveImageCulturel=true;
					$imageElementPremierePosition['culturel'] = array('idHistoriqueImage'=> $value['idHistoriqueImage'], 'dateUpload'=>$value['dateUpload'] );
					$indiceElementPremierePosition['culturel'] = $indice;
				}
			}
			
			$i++;
		}
		
		
		
		

		// *******************************************************************************
		// recuperation de l'image qui sera affichee pour les dernieres adresses ajoutées
		
		
		$trouveImageDernieresAdresses=false;
		$i=0;
		foreach($tabDernieresAdresses as $indice => $value)
		{
			if(!$trouveImageDernieresAdresses)
			{
				if(!isset($value['idHistoriqueImage']) || $value['idHistoriqueImage']=='0' )
				{
					// ici on recherche une autre image pour la meme adresse car il n'y en avait pas sur l'evenement concerné
					$resImagesDernieresAdressesFromAdresse = $image->getImagesEvenementsFromAdresse($value['idAdresse']);
					$fetchImageDernieresAdresses = mysql_fetch_assoc($resImagesDernieresAdressesFromAdresse);
					
					$imageElementPremierePosition['dernieresAdresses'] = array('idHistoriqueImage'=> $fetchImageDernieresAdresses['idHistoriqueImage'], 'dateUpload'=>$fetchImageDernieresAdresses['dateUpload'] );
					$indiceElementPremierePosition['dernieresAdresses'] = $indice;
					$trouveImageDernieresAdresses=true;
					$tabDernieresAdresses[$indice]['description'] = $this->getDescriptionEvenementForDerniereAdresse($value['idAdresse']);
				}
				else
				{
					$trouveImageDernieresAdresses=true;
					$imageElementPremierePosition['dernieresAdresses'] = array('idHistoriqueImage'=> $value['idHistoriqueImage'], 'dateUpload'=>$value['dateUpload'] );
					$indiceElementPremierePosition['dernieresAdresses'] = $indice;
					$tabDernieresAdresses[$indice]['description'] = $this->getDescriptionEvenementForDerniereAdresse($value['idAdresse']);
				}
			}
			
			$i++;
		}
		

		return array("dernieresAdresses"=>$tabDernieresAdresses,"constructions"=>$tabConstruction,"demolitions"=>$tabDemolition,"culture"=>$tabCulturel,"indiceEvenementsPremierePositions"=>$indiceElementPremierePosition,"imagesEvenementsPremieresPositions"=>$imageElementPremierePosition);
	}
	
	
	
	private function getPositionFromEvenement($idEvenement=0)
	{
		$positionRetour=0;
		
		$req = "
		
			SELECT distinct he1.idEvenement as idEvenement
			FROM 
				historiqueEvenement he1,historiqueEvenement he2
			RIGHT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = '".$idEvenement."'
			RIGHT JOIN _evenementEvenement ee2 ON ee2.idEvenement = ee.idEvenement
			WHERE
				he2.idEvenement = he1.idEvenement
			AND he1.idEvenement = ee2.idEvenementAssocie
			GROUP BY he1.idEvenement, he1.idHistoriqueEvenement
			ORDER BY he1.dateDebut,he1.idHistoriqueEvenement
		";
		
		$res = $this->connexionBdd->requete($req);
		
		$position=0;
		$trouve=false;
		while(!$trouve && $fetch = mysql_fetch_assoc($res))
		{
			if($idEvenement == $fetch['idEvenement'])
			{
				$positionRetour = $position;
				$trouve=true;
			}
			$position++;
		}
		
		return $positionRetour;
		
	}
	
	// recupere une description appartenant à un evenement de l'adresse donnée en parametre
	function getDescriptionEvenementForDerniereAdresse($idAdresse=0)
	{
		$req = "
				SELECT he1.description as description
				FROM historiqueEvenement he1, historiqueEvenement he2
				LEFT JOIN historiqueAdresse ha1 ON ha1.idAdresse = '".$idAdresse."'
				LEFT JOIN historiqueAdresse ha2 ON ha2.idAdresse = ha1.idAdresse
				LEFT JOIN _adresseEvenement ae ON ae.idAdresse = ha1.idAdresse
				LEFT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
				WHERE
					he1.idEvenement = ee.idEvenementAssocie
				AND
					he2.idEvenement = he1.idEvenement
				AND he1.description<>''
				GROUP BY he1.idEvenement,ha1.idAdresse,he1.idHistoriqueEvenement,ha1.idHistoriqueAdresse
				HAVING he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement) AND ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
		";
		
		$res = $this->connexionBdd->requete($req);
		$fetch = mysql_fetch_assoc($res);
		
		return $fetch['description'];
	}
	
	
	
	// ************************************************************************************************************************
	// ajoute une rue a partir de l'idSousQuartier avec verification de l'existence de la rue
	// ************************************************************************************************************************
	private function ajoutRue($idSousQuartier,$nom,$prefixe)
	{
		$sql="
			SELECT idRue 
			FROM rue 
			WHERE idSousQuartier = '".$idSousQuartier."'
			AND LOWER(nom) = LOWER(\"".$nom."\")
			AND LOWER(prefixe) = LOWER(\"".$prefixe."\")
		";
		
		$res=$this->connexionBdd->requete($sql);
		
		if(mysql_num_rows($res)>0)
		{
			$this->erreurs->ajouter("Erreur : il y a déjà un enregistrement de rue du même nom");
		}
		else
		{
			// ajout
			$this->connexionBdd->requete("
				INSERT INTO rue (idSousQuartier,nom,prefixe) 
				VALUES ('".$idSousQuartier."',\"".$nom."\",\"".$prefixe."\")
			");
		}
	}
	
	// ************************************************************************************************************************
	//   te.nom ='Construction' or te.nom='Rénovation' or te.nom='Extension' or te.nom='Transformation' or te.nom='Ravalement'
	//  te.nom = 'Démolition'
	// ************************************************************************************************************************
	public function getIdAdressesFromCriteres($parametres=array())
	{
		$arrayIdAdresses=array();
		$limitSql="";
		$whereSql="";
		
		if(isset($parametres['limitSql']))
			$limitSql = $parametres['limitSql'];
		
		if(isset($parametres['whereSql']))
			$whereSql = $parametres['whereSql'];
	
		$sql = "
				SELECT ae.idEvenement, ae.idAdresse,he1.titre , ha1.numero
				FROM _adresseEvenement ae
				RIGHT JOIN _evenementEvenement ee ON ee.idEvenement = ae.idEvenement
				RIGHT JOIN historiqueEvenement he1 ON he1.idEvenement = ee.idEvenementAssocie
				RIGHT JOIN historiqueEvenement he2 ON he2.idEvenement = he1.idEvenement
				RIGHT JOIN historiqueAdresse ha1 ON ha1.idAdresse = ae.idAdresse
				RIGHT JOIN historiqueAdresse ha2 ON ha2.idAdresse = ha1.idAdresse
				RIGHT JOIN typeEvenement te ON te.idTypeEvenement = he1.idTypeEvenement
				WHERE ".$whereSql."
				GROUP BY he1.idEvenement,ha1.idAdresse, he1.idHistoriqueEvenement, ha1.idHistoriqueAdresse
				HAVING he1.idHistoriqueEvenement = max(he2.idHistoriqueEvenement) AND ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
				".$limitSql."
		";
		
		$res=$this->connexionBdd->requete($sql);
		
		while($fetch = mysql_fetch_assoc($res))
		{
			$arrayIdAdresses[] = $fetch['idAdresse'];
		}
		
		return array_unique($arrayIdAdresses);
	}
	
	// ************************************************************************************************************************
	// fonction affichant le recapitulatif des adresses de l'evenement groupe d'adresse donné
	// ************************************************************************************************************************
	public function afficherRecapitulatifAdresses($idEvenementGroupeAdresse=0)
	{
		$html="";
		$t = new Template('modules/archi/templates/');
		$t->set_filenames((array('recapitulatifAdresses'=>'recapitulatifAdresses.tpl')));
		
		
		$retourAdresse=$this->afficherListe(array('archiIdEvenement'=>$idEvenementGroupeAdresse,'useTemplateFile'=>'listeAdressesDetailEvenement.tpl'));
		
		$t->assign_vars(array('recapitulatifAdresses'=>$retourAdresse['html']));
		
		ob_start();
		$t->pparse('recapitulatifAdresses');
		$html .= ob_get_contents();
		ob_end_clean();
		
		return $html;
	}
	
	// ************************************************************************************************************************
	// affiche le formulaire d'ajout d'un commentaire
	// ************************************************************************************************************************
	public function getFormulaireCommentaires($idEvenementGroupeAdresse=0,$fieldsCommentaires=array())
	{
		$html="";
		
		$fieldsCommentaires["idEvenementGroupeAdresse"]['default'] = $idEvenementGroupeAdresse;
		

		
		// si un utilisateur est connecté , on renseigne directement ces infos , mais on lui laisse la possibilité de modifier
		$authentification = new archiAuthentification();
		
		if($authentification->estConnecte())
		{
			$idUtilisateur = $authentification->getIdUtilisateur();
			$utilisateur = new archiUtilisateur();
			$fetchUtilisateur = $utilisateur->getArrayInfosFromUtilisateur($idUtilisateur);
			$fieldsCommentaires['nom']['default']=$fetchUtilisateur['nom'];
			$fieldsCommentaires['prenom']['default']=$fetchUtilisateur['prenom'];
			$fieldsCommentaires['email']['default']=$fetchUtilisateur['mail'];
		}
		
		$tabCommentaires = array(	'titrePage'=>'Ajouter un commentaire',
									'formAction'=>$this->creerUrl('enregistreCommentaire','',array()),
									'tableHtmlCode'=>" style='border:2px #007799 solid; width:700px;' ",
									'fields'=>$fieldsCommentaires);
		
		
		$formulaire = new formGenerator();
		
		$html.= $formulaire->afficherFromArray($tabCommentaires);
	
		return $html;
	}
	
	// ************************************************************************************************************************
	// affiche la liste des commentaires pour un groupe d'adresse donné
	// ************************************************************************************************************************
	public function getListeCommentaires($idEvenementGroupeAdresse=0)
	{
		$html="";
		$t = new Template('modules/archi/templates/');
		$t->set_filenames((array('listeCommentaires'=>'listeCommentaires.tpl')));
		
		$req = "SELECT idCommentaire,nom,prenom,email,DATE_FORMAT(date,'%d/%m/%Y à %kh%i') as date,commentaire
				FROM commentaires
				WHERE idEvenementGroupeAdresse = '".$idEvenementGroupeAdresse."'
				ORDER BY date DESC
		";
		
		$res = $this->connexionBdd->requete($req);
		
		
		$t->assign_vars(array('tableHtmlCode'=>" style='border:2px #007799 solid; width:700px;' "));
		
		if(mysql_num_rows($res)==0)
		{
			$t->assign_vars(array("msg"=>"Il n'y a pas encore de commentaires pour cette adresse.<br><br>"));
		}
		
		$authentification = new archiAuthentification();
		
		
		
		// si l'utilisateur est administrateur, on affiche le bouton de suppression d'un commentaire
		$isAdmin=false;
		if($authentification->estConnecte() && $authentification->estAdmin())
		{
			$isAdmin=true;
		}
		
		while($fetch = mysql_fetch_assoc($res))
		{
			$boutonSupprimer="";
			if($isAdmin)
			{
				$archiIdAdresse='';
				if(isset($this->variablesGet['archiIdAdresse']))
				{
					$archiIdAdresse = $this->variablesGet['archiIdAdresse'];
				}
				$boutonSupprimer = "<input type='button' value='supprimer' onclick=\"location.href='".$this->creerUrl('supprimerCommentaire','',array('archiIdCommentaire'=>$fetch['idCommentaire'],'archiIdAdresse'=>$archiIdAdresse))."';\">";
			}
			$t->assign_block_vars('commentaires',array('infosPersonne'=>$fetch['date'].' : '.$fetch['nom'].' '.$fetch['prenom'],'commentaire'=>nl2br(stripslashes(stripslashes($fetch['commentaire']))), 'boutonSupprimer'=>$boutonSupprimer));
		}
		
		ob_start();
		$t->pparse('listeCommentaires');
		$html .= ob_get_contents();
		ob_end_clean();
		
		return $html;
	}
	
	// ********************************************************************************************************************************************
	// fonction qui permet d'afficher les derniers commentaires postés par les internautes
	// ********************************************************************************************************************************************
	public function getDerniersCommentaires()
	{
		$html = '';
		
		$req = "
				SELECT email,nom,prenom,commentaire,idEvenementGroupeAdresse,DATE_FORMAT(date,'%d/%m/%Y') as dateF, date,ae.idAdresse as idAdresse
				FROM commentaires c
				LEFT JOIN _adresseEvenement ae ON ae.idEvenement = c.idEvenementGroupeAdresse
				ORDER BY date DESC 
				LIMIT 5
			";
			
		$res = $this->connexionBdd->requete($req);
		
		// on affiche l'encart seulement s'il y a au moins un commentaire
		if(mysql_num_rows($res)>0)
		{
			$t = new Template('modules/archi/templates/');
			$t->set_filenames(array('derniersCommentaires'=>'encartAccueilCommentaires.tpl'));

			while($fetch = mysql_fetch_assoc($res))
			{
				// recuperation de l'adresse concernée
				$fetchAdresse = $this->getArrayAdresseFromIdAdresse($fetch['idAdresse']);
				$intituleAdresse = $this->getIntituleAdresse($fetchAdresse);
			
				$t->assign_block_vars('commentaires',array(
													'commentaire'=>$this->coupureTexte(stripslashes(stripslashes($fetch['commentaire'])),20),
													'pseudo'=>$fetch['dateF']." de <font color='#007799'>".$fetch['nom'].' '.$fetch['prenom']."</font>"."<br>pour <a href=\"".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$fetch['idAdresse']))."\" style='text-decoration:none;color:#007799;'>".$intituleAdresse."</a>"
													));
			}

			ob_start();
			$t->pparse('derniersCommentaires');
			$html .= ob_get_contents();
			ob_end_clean();
		}
		
		return $html;
	}

	// ************************************************************************************************************************
	// enregistrement du commentaire
	// ************************************************************************************************************************
	public function enregistreCommentaire()
	{
		$fieldsCommentaires=$this->getCommentairesFields();
		$formulaire = new formGenerator();	
		$error = $formulaire->getArrayFromPost($fieldsCommentaires);
		
		if(count($error)==0)
		{
			$auth = new archiAuthentification();
			
			$idUtilisateur=0;
			if($auth->estConnecte())
			{
				$idUtilisateur = $auth->getIdUtilisateur();
			}
			
			// enregistrement du nouveau commentaire
			$req = "insert into commentaires (nom,prenom,email,commentaire,idEvenementGroupeAdresse,date,idUtilisateur) values (\"".addslashes(strip_tags($this->variablesPost['nom']))."\",\"".addslashes(strip_tags($this->variablesPost['prenom']))."\",\"".addslashes(strip_tags($this->variablesPost['email']))."\",\"".addslashes(strip_tags($this->variablesPost['commentaire']))."\",'".$this->variablesPost['idEvenementGroupeAdresse']."',now(),'".$idUtilisateur."')";
			$res = $this->connexionBdd->requete($req);
			
			// retour a l'affichage de l'adresse
			$idAdresse = $this->getIdAdresseFromIdEvenementGroupeAdresse($this->variablesPost['idEvenementGroupeAdresse']);


			
			// ************************************************************************************************************************************************
			// envoi d'un mail a tous les participants pour le groupe d'adresse
			// ************************************************************************************************************************************************
			$mail = new mailObject();
			$utilisateur = new archiUtilisateur();
			$arrayUtilisateurs = $utilisateur->getParticipantsCommentaires($this->variablesPost['idEvenementGroupeAdresse']);
			$intituleAdresse = $this->getIntituleAdresseFrom($idAdresse,'idAdresse');
			foreach($arrayUtilisateurs as $indice => $idUtilisateurAdresse)
			{
				if($idUtilisateurAdresse != $auth->getIdUtilisateur())
				{
					$infosUtilisateur = $utilisateur->getArrayInfosFromUtilisateur($idUtilisateurAdresse);
					if($infosUtilisateur['alerteCommentaires']=='1' && $infosUtilisateur['compteActif']=='1' && $infosUtilisateur['estAdmin']=='0')
					{
						$message = "Un utilisateur a ajouté un commentaire sur une adresse ou vous avez participé.";
						$message.= "Pour vous rendre sur l'adresse : <a href='".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$idAdresse))."'>".$intituleAdresse."</a><br>";
						$mail->sendMail($mail->getSiteMail(),$infosUtilisateur['mail'],'Ajout d\'un commentaire sur une adresse sur laquelle vous avez participé.',$message);
					}
				}
			}
			// ************************************************************************************************************************************************
			
			
			
			
			// envoi d'un mail aux administrateur pour la moderation
			$message="Un utilisateur a ajouté un commentaire sur archiV2 : <br>";
			$message .= "nom ou pseudo : ".strip_tags($this->variablesPost['nom'])."<br>";
			$message .= "prenom : ".strip_tags($this->variablesPost['prenom'])."<br>";
			$message .= "email : ".strip_tags($this->variablesPost['email'])."<br>";
			$message .= "commentaire : ".addslashes(strip_tags($this->variablesPost['commentaire']))."<br>";
			$message .="<a href='".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$idAdresse))."'>".$intituleAdresse."</a> (".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$idAdresse)).")<br>";
			$mail = new mailObject();
			$mail->sendMailToAdministrators($mail->getSiteMail(),'Un utilisateur a ajouté un commentaire',$message," AND alerteCommentaires='1' ");

			// remise a zero des variables en post sinon on va reafficher les infos
			$_POST['commentaire']="";
			$_POST['email']="";
			$_POST['nom']="";
			$_POST['prenom']="";
			
			echo $this->afficherDetail($idAdresse);
		}
		else
		{
			$this->erreurs->ajouter('Il y a une erreur dans le formulaire.');
			echo $this->erreurs->afficher();
			echo $this->getListeCommentaires($this->variablesPost['idEvenementGroupeAdresse']);
			echo $this->getFormulaireCommentaires($this->variablesPost['idEvenementGroupeAdresse'],$fieldsCommentaires);
		}
	}
	
	// ************************************************************************************************************************
	// supprime un commentaire a partir de son idCommentaire
	// ************************************************************************************************************************
	public function deleteCommentaire($criteres=array())
	{
		if(isset($this->variablesGet['archiIdCommentaire']) && $this->variablesGet['archiIdCommentaire']!='')
		{
			$req = "DELETE FROM commentaires WHERE idCommentaire = '".$this->variablesGet['archiIdCommentaire']."'";
			$res = $this->connexionBdd->requete($req);
		}
		
		// redirection javascript ... pas terrible ca , a changer
		if(isset($this->variablesGet['archiIdAdresse']) && $this->variablesGet['archiIdAdresse']!='')
		{
			echo "<script langage='javascript'>location.href='".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$this->variablesGet['archiIdAdresse']))."';</script>";
		}
	}
	
	// ************************************************************************************************************************
	// supprime tous les commentaires d'un idEvenementGroupeAdresse
	// ************************************************************************************************************************
	public function deleteCommentairesFromIdEvenement($idEvenementGroupeAdresse=0)
	{
		$req = "DELETE FROM commentaires WHERE idEvenementGroupeAdresse='".$idEvenementGroupeAdresse."'";
		$res = $this->connexionBdd->requete($req);
	}
	
	
	// ************************************************************************************************************************
	// recupere le premier idAdresse d'un evenement groupeAdresse
	// ************************************************************************************************************************
	public function getIdAdresseFromIdEvenementGroupeAdresse($idEvenementGroupeAdresse=0)
	{
		// recherche de l'idAdresse
		$req = "
				SELECT idAdresse
				FROM _adresseEvenement 
				WHERE idEvenement = '".$idEvenementGroupeAdresse."'
		";
		
		$res = $this->connexionBdd->requete($req);
		$fetch = mysql_fetch_assoc($res);
		
		return $fetch['idAdresse'];
	}
	
	// ************************************************************************************************************************
	// recupere la liste des adresses qui sont identique au l'adresses courantes de l'evenement groupe d'adresse transmis en parametre
	// ************************************************************************************************************************
	public function getAdressesMemeLocalite($idAdresse=0,$typeLocalite='rue')
	{
		// lien retour vers l'affichage du detail de l'adresse
		$html="<a href=\"".$this->creerUrl('','adresseDetail',array('archiIdAdresse'=>$idAdresse))."\">Retour</a><br>";
		
		// recuperation des adresses liees
		$reqAdresses = "
		
			SELECT ha1.idAdresse as idAdresse,ha1.idRue as idRue, ha1.idQuartier as idQuartier, ha1.idSousQuartier as idSousQuartier, ha1.idPays as idPays , ha1.idVille as idVille
			FROM historiqueAdresse ha2, historiqueAdresse ha1
			WHERE ha2.idAdresse = ha1.idAdresse
			AND ha1.idAdresse = '".$idAdresse."'
			GROUP BY ha1.idAdresse, ha1.idHistoriqueAdresse
			HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
		";
		
		$res = $this->connexionBdd->requete($reqAdresses);
		
		$rues = array();
		$quartiers = array();
		$sousQuartiers = array();
		$pays = array();
		$villes = array();
		$sql="";
		$tabIdAdressesNotToDisplay = array();
		$arrayComplementTitre=array();
		if(mysql_num_rows($res)>0)
		{
			while($fetch = mysql_fetch_assoc($res))
			{
				//$tabAdresses[] = array('idRue'=>$fetch['idRue'],'idQuartier'=>$fetch['idQuartier'],'idSousQuartier'=>$fetch['idSousQuartier'],'idPays'=>$fetch['idPays'],'idVille'=>$fetch['idVille']);
				if($typeLocalite=="rue")
				{
					if($fetch['idRue']!='0')
						$rues[] = $fetch['idRue'];
					
					$arrayComplementTitre[]="à la rue";
				}
				elseif($typeLocalite=="quartier")
				{
					// recherche du quartier
					if($fetch['idRue']!='0')
					{
						// recherche du quartier de la rue
						$reqQuartier = "
							SELECT q.idQuartier as idQuartier 
							FROM quartier q
							RIGHT JOIN sousQuartier sq ON sq.idQuartier = q.idQuartier
							RIGHT JOIN rue r ON r.idSousQuartier = sq.idSousQuartier
							WHERE r.idRue = '".$fetch['idRue']."'
						";
						
						$resQuartier = $this->connexionBdd->requete($reqQuartier);
						
						while($fetchQuartier = mysql_fetch_assoc($resQuartier))
						{
							$quartiers[] = $fetchQuartier['idQuartier'];
						}
					}
					
					if($fetch['idQuartier']!='0')
						$quartiers[] = $fetch['idQuartier'];
						
					$arrayComplementTitre[]="au quartier";
				}
				
				$tabIdAdressesNotToDisplay[]=$fetch['idAdresse'];
			}
			
			if(count($rues)>0)
			{
				$sql.=" AND ha1.idRue in ('".implode("','",array_unique($rues))."') ";
				
			}
				
			if(count($quartiers)>0)
			{
				$sql.=" AND q.idQuartier in ('".implode("','",array_unique($quartiers))."') ";
				
			}
			
			if(count($rues)==0 && count($quartiers)==0)
			{
				$sql.=" AND ha1.idAdresse ='0' ";
			}
			
			
			$sql.=" AND ha1.idAdresse not in ('".implode("','",$tabIdAdressesNotToDisplay)."') ";
			
		}
		
		// affichage de la liste des adresses
		$retour = $this->afficherListe(array('sqlSelectionExterne'=>$sql,'titre'=>'Adresses relatives '.implode(",",$arrayComplementTitre).': ','desactivateRedirection'=>1));
		
		$html .=$retour['html'];
		
		return $html;
	}

	// ************************************************************************************************************************
	// affichage du formulaire de modification d'un element d'adresse (rue, quartier, sous quartier, ville ...)
	// ************************************************************************************************************************
	public function afficheFormulaireModificationElementAdresse($parametres=array())
	{
		$html="";
		$t = new Template('modules/archi/templates/');
		
		
		$idRue 			= 0;
		$idQuartier		= 0;
		$idSousQuartier	= 0;
		$idVille		= 0;
		$idPays 		= 0;
				
		
		switch($parametres['tableName'])
		{
			case 'rue':
				
				$t->set_filenames((array('modificationElementAdresse'=>'modificationElementAdresseRue.tpl')));
				
				$idRue = $parametres['id'];
				
				$req = "
						SELECT r.nom as nomRue, r.prefixe as prefixeRue,sq.idSousQuartier as idSousQuartier,
								q.idQuartier as idQuartier, v.idVille as idVille, p.idPays as idPays
						FROM rue r 
						LEFT JOIN sousQuartier sq ON sq.idSousQuartier = r.idSousQuartier
						LEFT JOIN quartier q ON q.idQuartier = sq.idQuartier
						LEFT JOIN ville v ON v.idVille = q.idVille
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE idRue = '".$idRue."'";
				
				$res = $this->connexionBdd->requete($req);
				
				if(mysql_num_rows($res)==1)
				{
					$fetch=mysql_fetch_assoc($res);
					
					$t->assign_vars(array(
						'intitule'=>$fetch['nomRue'],
						'complement'=>$fetch['prefixeRue'],
						'sousQuartierField'=>$this->afficheSelectSousQuartier(array('idQuartier'=>$fetch['idQuartier'],'idSousQuartier'=>$fetch['idSousQuartier'])),
						'quartierField'=>$this->afficheSelectQuartier(array('idVille'=>$fetch['idVille'],'idQuartier'=>$fetch['idQuartier'])),
						'villeField'=>$this->afficheSelectVille(array('idPays'=>$fetch['idPays'],'idVille'=>$fetch['idVille'])),
						'paysField'=>$this->afficheSelectPays(array('idPays'=>$fetch['idPays'])),
						'idRue'=>$idRue
					));
				}
			break;
			
			case 'sousQuartier':
			
				$t->set_filenames((array('modificationElementAdresse'=>'modificationElementAdresseSousQuartier.tpl')));
			
				$idSousQuartier = $parametres['id'];
				
				$req = "
					SELECT sq.nom as nomSousQuartier, sq.idSousQuartier as idSousQuartier,
								q.idQuartier as idQuartier, v.idVille as idVille, p.idPays as idPays
					FROM sousQuartier sq
					LEFT JOIN quartier q ON q.idQuartier = sq.idQuartier
					LEFT JOIN ville v ON v.idVille = q.idVille
					LEFT JOIN pays p ON p.idPays = v.idPays
					WHERE sq.idSousQuartier= '".$idSousQuartier."'";
				$res = $this->connexionBdd->requete($req);
				
				if(mysql_num_rows($res)==1)
				{
					$fetch=mysql_fetch_assoc($res);
					
					$t->assign_vars(array(
						'intitule'=>$fetch['nomSousQuartier'],
						'quartierField'=>$this->afficheSelectQuartier(array('idVille'=>$fetch['idVille'],'idQuartier'=>$fetch['idQuartier'],'noSousQuartier'=>true)),
						'villeField'=>$this->afficheSelectVille(array('idPays'=>$fetch['idPays'],'idVille'=>$fetch['idVille'],'noSousQuartier'=>true)),
						'paysField'=>$this->afficheSelectPays(array('idPays'=>$fetch['idPays'],'noSousQuartier'=>true)),
						'idSousQuartier'=>$idSousQuartier
					));
				}
				
			break;
			case 'quartier':
				
				$t->set_filenames((array('modificationElementAdresse'=>'modificationElementAdresseQuartier.tpl')));
			
				$idQuartier = $parametres['id'];
				
				$req = "
						SELECT q.nom as nomQuartier,v.idVille as idVille, p.idPays as idPays
						FROM quartier q
						LEFT JOIN ville v ON v.idVille = q.idVille
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE q.idQuartier = '".$idQuartier."'
				";
				$res = $this->connexionBdd->requete($req);
				
				
				if(mysql_num_rows($res)==1)
				{
					$fetch=mysql_fetch_assoc($res);
					
					$t->assign_vars(array(
						'intitule'=>$fetch['nomQuartier'],
						'villeField'=>$this->afficheSelectVille(array('idPays'=>$fetch['idPays'],'idVille'=>$fetch['idVille'],'noSousQuartier'=>true,'noQuartier'=>true)),
						'paysField'=>$this->afficheSelectPays(array('idPays'=>$fetch['idPays'],'noSousQuartier'=>true,'noQuartier'=>true)),
						'idQuartier'=>$idQuartier
					));
				}
				
			break;
			case 'ville':
				$t->set_filenames((array('modificationElementAdresse'=>'modificationElementAdresseVille.tpl')));
				$idVille = $parametres['id'];
				
				$req = "
						SELECT v.nom as nomVille,v.codepostal as codePostal, p.idPays as idPays
						FROM ville v
						LEFT JOIN pays p ON p.idPays = v.idPays
						WHERE v.idVille = '".$idVille."'
				";
				$res = $this->connexionBdd->requete($req);
				
				if(mysql_num_rows($res)==1)
				{
					$fetch=mysql_fetch_assoc($res);
					
					$t->assign_vars(array(
						'intitule'=>$fetch['nomVille'],
						'codePostal' => $fetch['codePostal'],
						'paysField'=>$this->afficheSelectPays(array('idPays'=>$fetch['idPays'],'noSousQuartier'=>true,'noQuartier'=>true,'noVille'=>true)),
						'idVille'=>$idVille
					));
				}
				
			break;	

			case 'pays':
				$t->set_filenames((array('modificationElementAdresse'=>'modificationElementAdressePays.tpl')));
				$idPays = $parametres['id'];
				
				$req = "
						SELECT p.nom as nomPays
						FROM pays p
						WHERE p.idPays = '".$idPays."'
				";
				$res = $this->connexionBdd->requete($req);
				
				if(mysql_num_rows($res)==1)
				{
					$fetch=mysql_fetch_assoc($res);
					
					$t->assign_vars(array(
						'intitule'=>$fetch['nomPays'],
						'idPays'=>$idPays
					));
				}
			break;
		}


		
		$t->assign_vars(array(
					'typeElement' 				=>$parametres['tableName'],
					'onClickBoutonModifier'		=>"document.getElementById('formModif').action='".$this->creerUrl('adminEnregistreModifAdresse','',$parametres)."';",
					'onClickBoutonRetour'		=>"location.href='".$this->creerUrl('','adminElementAdresse',array('tableName'=>$parametres['tableName']))."';"
					));
		
		ob_start();
		$t->pparse('modificationElementAdresse');
		$html .= ob_get_contents();
		ob_end_clean();
		
		return $html;
	}
	
	
	// enregistrer les modification d'une adresse (rue quartier sous quartier ... ) dans la partie administration du site
	public function enregistreModificationAdresse()
	{
		$errors = array();
		if(isset($this->variablesPost['modifier']) && $this->variablesPost['modifier']='Modifier')
		{
			switch($this->variablesGet['tableName'])
			{
				// **********************************************************************************************************************************************************
				// rue
				// **********************************************************************************************************************************************************
				case 'rue':
					$req="";
					if(isset($this->variablesPost['sousQuartiers']) && $this->variablesPost['sousQuartiers']!='0')
					{
						$req = "UPDATE rue SET idSousQuartier='".$this->variablesPost['sousQuartiers']."', nom=\"".$this->variablesPost['intitule']."\", prefixe=\"".$this->variablesPost['complement']."\" WHERE idRue = '".$this->variablesPost['idRue']."'";
					}
					elseif(isset($this->variablesPost['quartiers']) && $this->variablesPost['quartiers']!='0')
					{
						// recherche du sous quartier 'autre' , s'il n'existe pas , on le cree
						$reqSousQuartierAutre = "
									SELECT idSousQuartier 
									FROM sousQuartier 
									WHERE idQuartier = '".$this->variablesPost['quartiers']."' 
									AND nom='autre'
									";
						
						$resSousQuartierAutre = $this->connexionBdd->requete($reqSousQuartierAutre);
						$idSousQuartierAutre = 0;
						if(mysql_num_rows($resSousQuartierAutre)==1)
						{
							// le sousQuartier autre existe , on recupere son ID
							$fetchSousQuartierAutre = mysql_fetch_assoc($resSousQuartierAutre);
							$idSousQuartierAutre = $fetchSousQuartierAutre['idSousQuartier'];
						}
						
						if(mysql_num_rows($resSousQuartierAutre)>1)
						{
							$errors[]="Probleme detecté dans les sousQuartiers 'autre', merci de contacter l'administrateur.<br>";
						}
						
						if(mysql_num_rows($resSousQuartierAutre)==0)
						{
							// le sousQuartier 'autre' pour le quartier n'existe pas , il faut le creer et renvoyer son ID
							$reqInsertNouveauSousQuartierAutre = "INSERT INTO sousQuartier (idQuartier,nom) VALUES ('".$this->variablesPost['quartiers']."',\"autre\")";
							$resInsertNouveauSousQuartierAutre = $this->connexionBdd->requete($reqInsertNouveauSousQuartierAutre);
							$idSousQuartierAutre = mysql_insert_id();
						}
						
						if($idSousQuartierAutre!=0)
						{
						
							$req = "UPDATE rue SET idSousQuartier='".$idSousQuartierAutre."', nom=\"".$this->variablesPost['intitule']."\", prefixe=\"".$this->variablesPost['complement']."\" WHERE idRue = '".$this->variablesPost['idRue']."'";
						}
						else
						{
							$errors[] = "Il y a eu un souci a la selection automatique du sous quartier, merci de contacter l'administrateur.<br>";
						}
					}
					elseif(isset($this->variablesPost['ville']) && $this->variablesPost['ville']!='0')
					{
						// l'adresse est une ville , ceci ne sera pas beaucoup utilisé car en principe une adresse est au moins une ville et un quartier , mais il a des adresses qui ne sont que des villes quand meme
						// recherche du quartier 'autre' de la ville s'il n'existe pas , on le cree
						$reqQuartierAutre = "SELECT idQuartier FROM quartier WHERE idVille='".$this->variablesPost['ville']."' and nom='autre'";
						$resQuartierAutre = $this->connexionBdd->requete($reqQuartierAutre);
						
						$idQuartierAutre = 0;
						if(mysql_num_rows($resQuartierAutre)==1)
						{
							// le quartier autre existe, on passe au sousQuartier
							$fetchQuartierAutre = mysql_fetch_assoc($resQuartierAutre);
							$idQuartierAutre = $fetchQuartierAutre['idQuartier'];
							
							// on verifie que le sousQuartiers 'autre' existe pour le quartier 'autre' trouve
							
							// recherche du sous quartier 'autre' , s'il n'existe pas , on le cree
							$reqSousQuartierAutre = "
										SELECT idSousQuartier 
										FROM sousQuartier 
										WHERE idQuartier = '".$idQuartierAutre."' 
										AND nom='autre'
										";
							
							$resSousQuartierAutre = $this->connexionBdd->requete($reqSousQuartierAutre);
							$idSousQuartierAutre = 0;
							if(mysql_num_rows($resSousQuartierAutre)==1)
							{
								// le sousQuartier autre existe , on recupere son ID
								$fetchSousQuartierAutre = mysql_fetch_assoc($resSousQuartierAutre);
								$idSousQuartierAutre = $fetchSousQuartierAutre['idSousQuartier'];
							}
							
							if(mysql_num_rows($resSousQuartierAutre)>1)
							{
								$errors[] = "Probleme detecté dans les sousQuartiers 'autre', merci de contacter l'administrateur.<br>";
							}
							
							if(mysql_num_rows($resSousQuartierAutre)==0)
							{
								// le sousQuartier 'autre' pour le quartier n'existe pas , il faut le creer et renvoyer son ID
								$reqInsertNouveauSousQuartierAutre = "INSERT INTO sousQuartier (idQuartier,nom) VALUES ('".$idQuartierAutre."',\"autre\")";
								$resInsertNouveauSousQuartierAutre = $this->connexionBdd->requete($reqInsertNouveauSousQuartierAutre);
								$idSousQuartierAutre = mysql_insert_id();
							}
							
							if($idSousQuartierAutre!=0)
							{
							
								$req = "UPDATE rue SET idSousQuartier='".$idSousQuartierAutre."', nom=\"".$this->variablesPost['intitule']."\", prefixe=\"".$this->variablesPost['complement']."\" WHERE idRue = '".$this->variablesPost['idRue']."'";
							}
							else
							{
								$errors[] = "Il y a eu un souci a la selection automatique du sous quartier, merci de contacter l'administrateur.<br>";
							}
							
							if(mysql_num_rows($resQuartierAutre)>1)
							{
								$errors[] =  "Probleme detecté dans les quartiers 'autre', merci de contacter l'administrateur.<br>";
							}
						}
						if(mysql_num_rows($resQuartierAutre)==0)
						{
							// le quartier autre n'existe pas , il faut le cree
							$reqInsertQuartierAutre = "INSERT INTO quartier (idVille,nom) VALUES ('".$this->variablesPost['ville']."','autre')";
							$resInsertQuartierAutre = $this->connexionBdd->requete($reqInsertQuartierAutre);
							$idQuartierAutre = mysql_insert_id();
							
							// on ajoute aussi le sousQuartier 'autre' pour le quartier 'autre' cree , on va quand meme regarder s'il n'existe pas un enregistrement pour etre sur qu'il n'y a pas de souci d'integrité
														// recherche du sous quartier 'autre' , s'il n'existe pas , on le cree
							$reqSousQuartierAutre = "
										SELECT idSousQuartier 
										FROM sousQuartier 
										WHERE idQuartier = '".$idQuartierAutre."' 
										AND nom='autre'
										";
							
							$resSousQuartierAutre = $this->connexionBdd->requete($reqSousQuartierAutre);
							$idSousQuartierAutre = 0;
							if(mysql_num_rows($resSousQuartierAutre)==1)
							{
								// le sousQuartier autre existe , on recupere son ID
								$fetchSousQuartierAutre = mysql_fetch_assoc($resSousQuartierAutre);
								$idSousQuartierAutre = $fetchSousQuartierAutre['idSousQuartier'];
							}
							
							if(mysql_num_rows($resSousQuartierAutre)>1)
							{
								$errors[] =  "Probleme detecté dans les sousQuartiers 'autre', merci de contacter l'administrateur.<br>";
							}
							
							if(mysql_num_rows($resSousQuartierAutre)==0)
							{
								// le sousQuartier 'autre' pour le quartier n'existe pas , il faut le creer et renvoyer son ID
								$reqInsertNouveauSousQuartierAutre = "INSERT INTO sousQuartier (idQuartier,nom) VALUES ('".$idQuartierAutre."',\"autre\")";
								$resInsertNouveauSousQuartierAutre = $this->connexionBdd->requete($reqInsertNouveauSousQuartierAutre);
								$idSousQuartierAutre = mysql_insert_id();
							}
							
							if($idSousQuartierAutre!=0)
							{
							
								$req = "UPDATE rue SET idSousQuartier='".$idSousQuartierAutre."', nom=\"".$this->variablesPost['intitule']."\", prefixe=\"".$this->variablesPost['complement']."\" WHERE idRue = '".$this->variablesPost['idRue']."'";
							}
							else
							{
								$errors[] =  "Il y a eu un souci a la selection automatique du sous quartier, merci de contacter l'administrateur.<br>";
							}
							
							if(mysql_num_rows($resQuartierAutre)>1)
							{
								$errors[] =  "Probleme detecté dans les quartiers 'autre', merci de contacter l'administrateur.<br>";
							}
							
						}
						
					}
					
					
					if($req!="")
					{
						// execution de la requete de mise a jour de la rue
						$res = $this->connexionBdd->requete($req);
					}
					else
					{
						$errors[] =  "erreur dans la modification de la rue<br>";
					}
					
				break;
				// **********************************************************************************************************************************************************
				// sous quartier
				// **********************************************************************************************************************************************************
				case 'sousQuartier':
					// un sousQuartier appartient toujours a un quartier
					
					//﻿array(8) { ["idRue"]=>  string(1) "5" ["pays"]=>  string(1) "1" ["ville"]=>  string(1) "1" ["quartiers"]=>  string(2) "13" ["sousQuartiers"]=>  string(1) "8" ["intitule"]=>  string(13) "Saint-Nicolas" ["complement"]=>  string(4) "quai" ["modifier"]=>  string(8) "Modifier" }
					$req="";
					if($this->variablesPost['quartiers']!='0' && $this->variablesPost['ville']!='0' && $this->variablesPost['pays']!='0')
					{
						$req = "UPDATE sousQuartier SET idQuartier = '".$this->variablesPost['quartiers']."',nom=\"".$this->variablesPost['intitule']."\" WHERE idSousQuartier = '".$this->variablesPost['idSousQuartier']."'";
						
					}
					else
					{
						$errors[] =  "Erreur : un sous quartier ne peut pas appartenir a aucun quartier.<br>";
					}
				
					if($req!="")
					{
						// execution de la requete de mise a jour de la rue
						$res = $this->connexionBdd->requete($req);
					}
					else
					{
						$errors[] =  "erreur dans la modification du sous quartier<br>";
					}
				break;
				// **********************************************************************************************************************************************************
				// quartier
				// **********************************************************************************************************************************************************
				case 'quartier':
					// un quartier appartient toujours a une ville
					
					//﻿array(8) { ["idRue"]=>  string(1) "5" ["pays"]=>  string(1) "1" ["ville"]=>  string(1) "1" ["quartiers"]=>  string(2) "13" ["sousQuartiers"]=>  string(1) "8" ["intitule"]=>  string(13) "Saint-Nicolas" ["complement"]=>  string(4) "quai" ["modifier"]=>  string(8) "Modifier" }
					$req="";
					if($this->variablesPost['ville']!='0' && $this->variablesPost['pays']!='0')
					{
						$req = "UPDATE quartier SET idVille = '".$this->variablesPost['ville']."',nom=\"".$this->variablesPost['intitule']."\" WHERE idQuartier = '".$this->variablesPost['idQuartier']."'";
						
					}
					else
					{
						$errors[] =  "Erreur : un quartier ne peut pas appartenir a aucune ville.<br>";
					}
				
					if($req!="")
					{
						// execution de la requete de mise a jour de du quartier
						$res = $this->connexionBdd->requete($req);
					}
					else
					{
						$errors[] =  "erreur dans la modification du quartier<br>";
					}
				break;
				// **********************************************************************************************************************************************************
				// ville
				// **********************************************************************************************************************************************************
				case 'ville':
					// une ville appartient toujours a un pays
					
					//﻿array(8) { ["idRue"]=>  string(1) "5" ["pays"]=>  string(1) "1" ["ville"]=>  string(1) "1" ["quartiers"]=>  string(2) "13" ["sousQuartiers"]=>  string(1) "8" ["intitule"]=>  string(13) "Saint-Nicolas" ["complement"]=>  string(4) "quai" ["modifier"]=>  string(8) "Modifier" }
					$req="";
					if($this->variablesPost['pays']!='0')
					{
						$req = "UPDATE ville SET idPays = '".$this->variablesPost['pays']."',nom=\"".$this->variablesPost['intitule']."\",codepostal=\"".$this->variablesPost['codePostal']."\" WHERE idVille = '".$this->variablesPost['idVille']."'";
						
					}
					else
					{
						$errors[] =  "Erreur : une ville ne peut pas appartenir a aucun pays.<br>";
					}
				
					if($req!="")
					{
						// execution de la requete de mise a jour de la ville
						$res = $this->connexionBdd->requete($req);
					}
					else
					{
						$errors[] =  "erreur dans la modification de la ville<br>";
					}
				break;
				// **********************************************************************************************************************************************************
				// pays
				// **********************************************************************************************************************************************************
				case 'pays':
					$req = "UPDATE pays SET nom=\"".$this->variablesPost['intitule']."\" WHERE idPays = '".$this->variablesPost['idPays']."'";
					$res = $this->connexionBdd->requete($req);
				break;
				
			}
		}
		return $errors;
	}

	// recupere la premiere image d'un evenement en fonction de sa position
	public function getFirstImageFromEvenement($idEvenement=0)
	{
		$fetch=array();
		
		$reqVerifTri = "
					SELECT ei.idImage
					FROM _evenementImage ei
					WHERE ei.idEvenement = '".$idEvenement."'
					AND position<>0
		";
		
		$resVerifTri = $this->connexionBdd->requete($reqVerifTri);
		
		if(mysql_num_rows($resVerifTri)>0)
		{
			// les images ont deja ete triés , on prend celle qui a la plus petite position <>0
			$req = "
				SELECT hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload
				FROM historiqueImage hi2,historiqueImage hi1
				RIGHT JOIN _evenementImage ei1 ON ei1.idEvenement ='".$idEvenement."'
				RIGHT JOIN _evenementImage ei2 ON ei2.idEvenement = ei1.idEvenement
				WHERE hi1.idImage = ei1.idImage
				AND hi2.idImage = hi1.idImage
				AND ei1.position<>'0'
				AND ei2.position<>'0'
				GROUP BY hi1.idImage,ei1.position,hi1.idHistoriqueImage
				HAVING hi1.idHistoriqueImage = max(hi2.idHistoriqueImage) AND ei1.position = min(ei2.position)
				ORDER BY ei1.position ASC
			";
			$res = $this->connexionBdd->requete($req);
			
			$fetch = mysql_fetch_assoc($res);
			
		}
		else
		{
			// pas d'image de position differente de zero , on selectionne la derniere ajoutée de l'evenement
			$req = "
				SELECT hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload
				FROM historiqueImage hi2,historiqueImage hi1
				RIGHT JOIN _evenementImage ei1 ON ei1.idEvenement ='".$idEvenement."'
				WHERE hi1.idImage = ei1.idImage
				AND hi2.idImage = hi1.idImage
				GROUP BY hi1.idImage,hi1.idHistoriqueImage
				HAVING hi1.idHistoriqueImage = max(hi2.idHistoriqueImage)
				ORDER BY hi1.idHistoriqueImage
			";
			
			$res = $this->connexionBdd->requete($req);
			
			if(mysql_num_rows($res)==0)
			{
				// pas d'image pour l'evenement courant, on va en chercher une pour l'adresse courante de l'evenement ( donc dans un evenement de la meme adresse)
				$req = "
					SELECT hi1.idHistoriqueImage as idHistoriqueImage, hi1.dateUpload as dateUpload
					FROM historiqueImage hi2,historiqueImage hi1,ei1.position as position
					
					RIGHT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = '".$idEvenement."'
					LEFT JOIN _evenementEvenement ee2 ON ee2.idEvenement = ee.idEvenement
					RIGHT JOIN _evenementEvenement ee3 ON ee3.idEvenement = ee2.idEvenementAssocie
					RIGHT JOIN _evenementImage ei1 ON ei1.idEvenement = ee3.idEvenementAssocie
					
					WHERE hi1.idImage = ei1.idImage
					AND hi2.idImage = hi1.idImage
					GROUP BY hi1.idImage,hi1.idHistoriqueImage
					HAVING hi1.idHistoriqueImage = max(hi2.idHistoriqueImage)
					ORDER BY ei1.position, hi1.idHistoriqueImage
				";
				
				$res = $this->connexionBdd->requete($req);
				while($fetchImagesAdresses = mysql_fetch_assoc($res))
				{
					if($fetchImagesAdresses['position']=='1')
					{
						$fetch = $fetchImagesAdresses;
						break;
					}
					else
					{
						$fetch = $fetchImagesAdresses;
					}
				}
				
			}
			else
			{
				$fetch = mysql_fetch_assoc($res);
			}
		}
		
		return $fetch;
	}
	
	public function getIntituleAdresseFrom($id=0,$type='')
	{
		switch($type)
		{
			case 'idEvenement':
				$req = "
					SELECT distinct ha1.idAdresse as idAdresse, ha1.numero, ha1.idQuartier, ha1.idVille,ind.nom,
				
						r.nom as nomRue,
						sq.nom as nomSousQuartier,
						q.nom as nomQuartier,
						v.nom as nomVille,
						p.nom as nomPays,
						ha1.numero as numeroAdresse, 
						ha1.idRue,
						r.prefixe as prefixeRue,
						IF (ha1.idSousQuartier != 0, ha1.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
						IF (ha1.idQuartier != 0, ha1.idQuartier, sq.idQuartier) AS idQuartier,
						IF (ha1.idVille != 0, ha1.idVille, q.idVille) AS idVille,
						IF (ha1.idPays != 0, ha1.idPays, v.idPays) AS idPays,
						
						ha1.numero as numero,
						ha1.idHistoriqueAdresse,
						ha1.idIndicatif as idIndicatif
					FROM historiqueAdresse ha2, historiqueAdresse ha1
					
					LEFT JOIN _evenementEvenement ee ON ee.idEvenementAssocie = '".$id."'
					LEFT JOIN _adresseEvenement ae ON ae.idEvenement = ee.idEvenement
					
					LEFT JOIN indicatif ind ON ind.idIndicatif = ha1.idIndicatif
				
					LEFT JOIN rue r 		ON r.idRue = ha1.idRue
					LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
					LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
					LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
					LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )
					
					WHERE ha2.idAdresse = ha1.idAdresse
					AND ha1.idAdresse = ae.idAdresse
					GROUP BY ha1.idAdresse, ha1.idHistoriqueAdresse
					HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)
				";
				$res = $this->connexionBdd->requete($req);
				$fetch = mysql_fetch_assoc($res);
			break;
			case 'idHistoriqueEvenement':
			
			break;
			case 'idEvenementGroupeAdresse':
			
			break;
			case 'idAdresse':
				$req = "
					SELECT distinct ha1.idAdresse as idAdresse, ha1.numero, ha1.idQuartier, ha1.idVille,ind.nom,
						r.nom as nomRue,
						sq.nom as nomSousQuartier,
						q.nom as nomQuartier,
						v.nom as nomVille,
						p.nom as nomPays,
						ha1.numero as numeroAdresse, 
						ha1.idRue,
						r.prefixe as prefixeRue,
						IF (ha1.idSousQuartier != 0, ha1.idSousQuartier, r.idSousQuartier) AS idSousQuartier,
						IF (ha1.idQuartier != 0, ha1.idQuartier, sq.idQuartier) AS idQuartier,
						IF (ha1.idVille != 0, ha1.idVille, q.idVille) AS idVille,
						IF (ha1.idPays != 0, ha1.idPays, v.idPays) AS idPays,
						
						ha1.numero as numero,
						ha1.idHistoriqueAdresse,
						ha1.idIndicatif as idIndicatif
					FROM historiqueAdresse ha2, historiqueAdresse ha1

					LEFT JOIN indicatif ind ON ind.idIndicatif = ha1.idIndicatif
				
					LEFT JOIN rue r 		ON r.idRue = ha1.idRue
					LEFT JOIN sousQuartier sq	ON sq.idSousQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier!='0' ,ha1.idSousQuartier ,r.idSousQuartier )
					LEFT JOIN quartier q		ON q.idQuartier = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier!='0' ,ha1.idQuartier ,sq.idQuartier )
					LEFT JOIN ville v		ON v.idVille = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille!='0' ,ha1.idVille ,q.idVille )
					LEFT JOIN pays p		ON p.idPays = IF(ha1.idRue='0' and ha1.idSousQuartier='0' and ha1.idQuartier='0' and ha1.idVille='0' and ha1.idPays!='0' ,ha1.idPays ,v.idPays )
					
					WHERE ha2.idAdresse = ha1.idAdresse
					AND ha1.idAdresse = '".$id."'
					GROUP BY ha1.idAdresse, ha1.idHistoriqueAdresse
					HAVING ha1.idHistoriqueAdresse = max(ha2.idHistoriqueAdresse)";
				
				$res = $this->connexionBdd->requete($req);
				$fetch = mysql_fetch_assoc($res);
			break;
		}
		
		return $this->getIntituleAdresse($fetch);
	}
}

?>
